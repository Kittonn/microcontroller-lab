
Lab05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006540  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08006740  08006740  00007740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b00  08006b00  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006b00  08006b00  00007b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b08  08006b08  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b08  08006b08  00007b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b0c  08006b0c  00007b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006b10  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  200001d4  08006ce4  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08006ce4  00008494  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c018  00000000  00000000  00008202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201b  00000000  00000000  0001421a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  00016238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000722  00000000  00000000  00016ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028857  00000000  00000000  000172ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d305  00000000  00000000  0003fb21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f819e  00000000  00000000  0004ce26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144fc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e8  00000000  00000000  00145008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001483f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08006728 	.word	0x08006728

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08006728 	.word	0x08006728

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f2:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x98>)
 80005f4:	4a21      	ldr	r2, [pc, #132]	@ (800067c <MX_ADC1_Init+0x9c>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <MX_ADC1_Init+0x98>)
 80005fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000606:	4b1c      	ldr	r3, [pc, #112]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800060c:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_ADC1_Init+0x98>)
 800060e:	2201      	movs	r2, #1
 8000610:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000612:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061a:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000622:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <MX_ADC1_Init+0xa0>)
 8000624:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000626:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <MX_ADC1_Init+0x98>)
 800062e:	2201      	movs	r2, #1
 8000630:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000640:	480d      	ldr	r0, [pc, #52]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000642:	f000 fd37 	bl	80010b4 <HAL_ADC_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800064c:	f000 fac6 	bl	8000bdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000650:	230a      	movs	r3, #10
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000654:	2301      	movs	r3, #1
 8000656:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	@ (8000678 <MX_ADC1_Init+0x98>)
 8000662:	f000 fed1 	bl	8001408 <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800066c:	f000 fab6 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200001f0 	.word	0x200001f0
 800067c:	40012000 	.word	0x40012000
 8000680:	0f000001 	.word	0x0f000001

08000684 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	@ 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <HAL_ADC_MspInit+0x74>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d123      	bne.n	80006ee <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006aa:	4a14      	ldr	r2, [pc, #80]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <HAL_ADC_MspInit+0x78>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d6:	2301      	movs	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006da:	2303      	movs	r3, #3
 80006dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <HAL_ADC_MspInit+0x7c>)
 80006ea:	f001 fa3b 	bl	8001b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40012000 	.word	0x40012000
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800

08000704 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <MX_GPIO_Init+0x78>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a17      	ldr	r2, [pc, #92]	@ (800077c <MX_GPIO_Init+0x78>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <MX_GPIO_Init+0x78>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_GPIO_Init+0x78>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a11      	ldr	r2, [pc, #68]	@ (800077c <MX_GPIO_Init+0x78>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_GPIO_Init+0x78>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000750:	480b      	ldr	r0, [pc, #44]	@ (8000780 <MX_GPIO_Init+0x7c>)
 8000752:	f001 fbb3 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000756:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800075a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4619      	mov	r1, r3
 800076e:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_GPIO_Init+0x7c>)
 8000770:	f001 f9f8 	bl	8001b64 <HAL_GPIO_Init>

}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40020800 	.word	0x40020800
 8000784:	00000000 	.word	0x00000000

08000788 <displayHex>:
volatile uint32_t adc_val = 0;
int adc_avg_8;
int adc_avg_16;
float vin;

void displayHex(uint32_t num) {
 8000788:	b580      	push	{r7, lr}
 800078a:	f5ad 7d7e 	sub.w	sp, sp, #1016	@ 0x3f8
 800078e:	af02      	add	r7, sp, #8
 8000790:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000794:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8000798:	6018      	str	r0, [r3, #0]
	char hexString[1000];
	vin = num * 3.3 / 4095.0;
 800079a:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800079e:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	ee07 3a90 	vmov	s15, r3
 80007a8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007ac:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8000828 <displayHex+0xa0>
 80007b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007b4:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000830 <displayHex+0xa8>
 80007b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <displayHex+0xb0>)
 80007c2:	edc3 7a00 	vstr	s15, [r3]

	sprintf(hexString, "ADC1_CH10 0x%08X Vin = %0.3f V\n", num, vin);
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <displayHex+0xb0>)
 80007c8:	edd3 7a00 	vldr	s15, [r3]
 80007cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007d0:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80007d4:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 80007d8:	f107 0008 	add.w	r0, r7, #8
 80007dc:	ed8d 7b00 	vstr	d7, [sp]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	4916      	ldr	r1, [pc, #88]	@ (800083c <displayHex+0xb4>)
 80007e4:	f003 fe20 	bl	8004428 <siprintf>


	while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
 80007e8:	bf00      	nop
 80007ea:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <displayHex+0xb8>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007f4:	2b40      	cmp	r3, #64	@ 0x40
 80007f6:	d1f8      	bne.n	80007ea <displayHex+0x62>
	HAL_UART_Transmit(&huart3, (uint8_t *) hexString, strlen(hexString), 100);
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fd6f 	bl	80002e0 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	b29a      	uxth	r2, r3
 8000806:	f107 0108 	add.w	r1, r7, #8
 800080a:	2364      	movs	r3, #100	@ 0x64
 800080c:	480c      	ldr	r0, [pc, #48]	@ (8000840 <displayHex+0xb8>)
 800080e:	f002 fcc9 	bl	80031a4 <HAL_UART_Transmit>

	HAL_Delay(400);
 8000812:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000816:	f000 fc29 	bl	800106c <HAL_Delay>
}
 800081a:	bf00      	nop
 800081c:	f507 777c 	add.w	r7, r7, #1008	@ 0x3f0
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	f3af 8000 	nop.w
 8000828:	66666666 	.word	0x66666666
 800082c:	400a6666 	.word	0x400a6666
 8000830:	00000000 	.word	0x00000000
 8000834:	40affe00 	.word	0x40affe00
 8000838:	20000244 	.word	0x20000244
 800083c:	08006740 	.word	0x08006740
 8000840:	200002bc 	.word	0x200002bc

08000844 <average_8>:

int average_8(int x){
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	static int samples[8];
	static int i = 0;
	static int total = 0;

	total += x - samples[i];
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <average_8+0x54>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a12      	ldr	r2, [pc, #72]	@ (800089c <average_8+0x58>)
 8000852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	1ad2      	subs	r2, r2, r3
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <average_8+0x5c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4413      	add	r3, r2
 8000860:	4a0f      	ldr	r2, [pc, #60]	@ (80008a0 <average_8+0x5c>)
 8000862:	6013      	str	r3, [r2, #0]
	samples[i] = x;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <average_8+0x54>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	490c      	ldr	r1, [pc, #48]	@ (800089c <average_8+0x58>)
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	i = (i == 7 ? 0 : i+1);
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <average_8+0x54>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b07      	cmp	r3, #7
 8000876:	d003      	beq.n	8000880 <average_8+0x3c>
 8000878:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <average_8+0x54>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	e000      	b.n	8000882 <average_8+0x3e>
 8000880:	2300      	movs	r3, #0
 8000882:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <average_8+0x54>)
 8000884:	6013      	str	r3, [r2, #0]

	return total >> 3;
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <average_8+0x5c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	10db      	asrs	r3, r3, #3
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	20000248 	.word	0x20000248
 800089c:	2000024c 	.word	0x2000024c
 80008a0:	2000026c 	.word	0x2000026c

080008a4 <average_16>:

int average_16(int x){
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	static int samples[16];
	static int i = 0;
	static int total = 0;

	total += x - samples[i];
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <average_16+0x54>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <average_16+0x58>)
 80008b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	1ad2      	subs	r2, r2, r3
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <average_16+0x5c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000900 <average_16+0x5c>)
 80008c2:	6013      	str	r3, [r2, #0]
	samples[i] = x;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <average_16+0x54>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	490c      	ldr	r1, [pc, #48]	@ (80008fc <average_16+0x58>)
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	i = (i == 15 ? 0 : i+1);
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <average_16+0x54>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d003      	beq.n	80008e0 <average_16+0x3c>
 80008d8:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <average_16+0x54>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	3301      	adds	r3, #1
 80008de:	e000      	b.n	80008e2 <average_16+0x3e>
 80008e0:	2300      	movs	r3, #0
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <average_16+0x54>)
 80008e4:	6013      	str	r3, [r2, #0]

	return total >> 4;
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <average_16+0x5c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	111b      	asrs	r3, r3, #4
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	20000270 	.word	0x20000270
 80008fc:	20000274 	.word	0x20000274
 8000900:	200002b4 	.word	0x200002b4
 8000904:	00000000 	.word	0x00000000

08000908 <displayLed>:

void displayLed(uint32_t num) {
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b08b      	sub	sp, #44	@ 0x2c
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	float vin = num * 3.3 / 4095.0;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	ee07 3a90 	vmov	s15, r3
 8000916:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800091a:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 8000a00 <displayLed+0xf8>
 800091e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000922:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 8000a08 <displayLed+0x100>
 8000926:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800092a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800092e:	edc7 7a08 	vstr	s15, [r7, #32]
	uint16_t pins[] = { GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11 };
 8000932:	4a39      	ldr	r2, [pc, #228]	@ (8000a18 <displayLed+0x110>)
 8000934:	f107 0318 	add.w	r3, r7, #24
 8000938:	e892 0003 	ldmia.w	r2, {r0, r1}
 800093c:	e883 0003 	stmia.w	r3, {r0, r1}
	float thresholds[] = { 0.66, 1.32, 1.98, 2.64 };
 8000940:	4b36      	ldr	r3, [pc, #216]	@ (8000a1c <displayLed+0x114>)
 8000942:	f107 0408 	add.w	r4, r7, #8
 8000946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for (int i = 0; i < 4; i++) {
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000950:	e04b      	b.n	80009ea <displayLed+0xe2>
		if (vin > thresholds[i] && vin <= thresholds[i] + 0.66) {
 8000952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	3328      	adds	r3, #40	@ 0x28
 8000958:	443b      	add	r3, r7
 800095a:	3b20      	subs	r3, #32
 800095c:	edd3 7a00 	vldr	s15, [r3]
 8000960:	ed97 7a08 	vldr	s14, [r7, #32]
 8000964:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096c:	dd21      	ble.n	80009b2 <displayLed+0xaa>
 800096e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000972:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	3328      	adds	r3, #40	@ 0x28
 800097c:	443b      	add	r3, r7
 800097e:	3b20      	subs	r3, #32
 8000980:	edd3 7a00 	vldr	s15, [r3]
 8000984:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000988:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8000a10 <displayLed+0x108>
 800098c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000990:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000998:	d80b      	bhi.n	80009b2 <displayLed+0xaa>
			HAL_GPIO_WritePin(GPIOC, pins[i], GPIO_PIN_SET);
 800099a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	3328      	adds	r3, #40	@ 0x28
 80009a0:	443b      	add	r3, r7
 80009a2:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80009a6:	2201      	movs	r2, #1
 80009a8:	4619      	mov	r1, r3
 80009aa:	481d      	ldr	r0, [pc, #116]	@ (8000a20 <displayLed+0x118>)
 80009ac:	f001 fa86 	bl	8001ebc <HAL_GPIO_WritePin>
 80009b0:	e018      	b.n	80009e4 <displayLed+0xdc>
		} else if (vin <= thresholds[i]) {
 80009b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	3328      	adds	r3, #40	@ 0x28
 80009b8:	443b      	add	r3, r7
 80009ba:	3b20      	subs	r3, #32
 80009bc:	edd3 7a00 	vldr	s15, [r3]
 80009c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80009c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009cc:	d80a      	bhi.n	80009e4 <displayLed+0xdc>
			HAL_GPIO_WritePin(GPIOC, pins[i], GPIO_PIN_RESET);
 80009ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	3328      	adds	r3, #40	@ 0x28
 80009d4:	443b      	add	r3, r7
 80009d6:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	4810      	ldr	r0, [pc, #64]	@ (8000a20 <displayLed+0x118>)
 80009e0:	f001 fa6c 	bl	8001ebc <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 80009e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e6:	3301      	adds	r3, #1
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	ddb0      	ble.n	8000952 <displayLed+0x4a>
		}
//		HAL_Delay(500);
	}
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	372c      	adds	r7, #44	@ 0x2c
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	bf00      	nop
 80009fc:	f3af 8000 	nop.w
 8000a00:	66666666 	.word	0x66666666
 8000a04:	400a6666 	.word	0x400a6666
 8000a08:	00000000 	.word	0x00000000
 8000a0c:	40affe00 	.word	0x40affe00
 8000a10:	51eb851f 	.word	0x51eb851f
 8000a14:	3fe51eb8 	.word	0x3fe51eb8
 8000a18:	08006760 	.word	0x08006760
 8000a1c:	08006768 	.word	0x08006768
 8000a20:	40020800 	.word	0x40020800

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a28:	f000 f8ac 	bl	8000b84 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2c:	f000 fac1 	bl	8000fb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a30:	f000 f83a 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a34:	f7ff fe66 	bl	8000704 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a38:	f7ff fdd2 	bl	80005e0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000a3c:	f000 fa00 	bl	8000e40 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000a40:	4815      	ldr	r0, [pc, #84]	@ (8000a98 <main+0x74>)
 8000a42:	f000 fb7b 	bl	800113c <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {}
 8000a46:	bf00      	nop
 8000a48:	2164      	movs	r1, #100	@ 0x64
 8000a4a:	4813      	ldr	r0, [pc, #76]	@ (8000a98 <main+0x74>)
 8000a4c:	f000 fc44 	bl	80012d8 <HAL_ADC_PollForConversion>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1f8      	bne.n	8000a48 <main+0x24>
	adc_val = HAL_ADC_GetValue(&hadc1);
 8000a56:	4810      	ldr	r0, [pc, #64]	@ (8000a98 <main+0x74>)
 8000a58:	f000 fcc9 	bl	80013ee <HAL_ADC_GetValue>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a9c <main+0x78>)
 8000a60:	6013      	str	r3, [r2, #0]

	adc_avg_16 = average_16(adc_val);
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <main+0x78>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ff1c 	bl	80008a4 <average_16>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa0 <main+0x7c>)
 8000a70:	6013      	str	r3, [r2, #0]
	adc_avg_8 = average_8(adc_val);
 8000a72:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <main+0x78>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fee4 	bl	8000844 <average_8>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a09      	ldr	r2, [pc, #36]	@ (8000aa4 <main+0x80>)
 8000a80:	6013      	str	r3, [r2, #0]
	displayHex(adc_val);
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <main+0x78>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fe7e 	bl	8000788 <displayHex>
	displayLed(adc_val);
 8000a8c:	4b03      	ldr	r3, [pc, #12]	@ (8000a9c <main+0x78>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff39 	bl	8000908 <displayLed>
	while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {}
 8000a96:	e7d6      	b.n	8000a46 <main+0x22>
 8000a98:	200001f0 	.word	0x200001f0
 8000a9c:	20000238 	.word	0x20000238
 8000aa0:	20000240 	.word	0x20000240
 8000aa4:	2000023c 	.word	0x2000023c

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b094      	sub	sp, #80	@ 0x50
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2234      	movs	r2, #52	@ 0x34
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f003 fd98 	bl	80045ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000acc:	4b2b      	ldr	r3, [pc, #172]	@ (8000b7c <SystemClock_Config+0xd4>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8000b7c <SystemClock_Config+0xd4>)
 8000ad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad8:	4b28      	ldr	r3, [pc, #160]	@ (8000b7c <SystemClock_Config+0xd4>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae4:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <SystemClock_Config+0xd8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a25      	ldr	r2, [pc, #148]	@ (8000b80 <SystemClock_Config+0xd8>)
 8000aea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	4b23      	ldr	r3, [pc, #140]	@ (8000b80 <SystemClock_Config+0xd8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b00:	2301      	movs	r3, #1
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b04:	2310      	movs	r3, #16
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b10:	2308      	movs	r3, #8
 8000b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b14:	23d8      	movs	r3, #216	@ 0xd8
 8000b16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 fa31 	bl	8001f90 <HAL_RCC_OscConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b34:	f000 f852 	bl	8000bdc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b38:	f001 f9da 	bl	8001ef0 <HAL_PWREx_EnableOverDrive>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b42:	f000 f84b 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b46:	230f      	movs	r3, #15
 8000b48:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b52:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b5c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	2107      	movs	r1, #7
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 fcc1 	bl	80024ec <HAL_RCC_ClockConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b70:	f000 f834 	bl	8000bdc <Error_Handler>
  }
}
 8000b74:	bf00      	nop
 8000b76:	3750      	adds	r7, #80	@ 0x50
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000

08000b84 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b96:	f000 ff6d 	bl	8001a74 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ba6:	231f      	movs	r3, #31
 8000ba8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000baa:	2387      	movs	r3, #135	@ 0x87
 8000bac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 ff8b 	bl	8001ae4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bce:	2004      	movs	r0, #4
 8000bd0:	f000 ff68 	bl	8001aa4 <HAL_MPU_Enable>

}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <Error_Handler+0x8>

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <HAL_MspInit+0x44>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <HAL_MspInit+0x44>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <HAL_MspInit+0x44>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <HAL_MspInit+0x44>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <HAL_MspInit+0x44>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_MspInit+0x44>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <NMI_Handler+0x4>

08000c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <MemManage_Handler+0x4>

08000c48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c86:	f000 f9d1 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  return 1;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_kill>:

int _kill(int pid, int sig)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ca8:	f003 fcac 	bl	8004604 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2216      	movs	r2, #22
 8000cb0:	601a      	str	r2, [r3, #0]
  return -1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_exit>:

void _exit (int status)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cc6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffe7 	bl	8000c9e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <_exit+0x12>

08000cd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	e00a      	b.n	8000cfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ce6:	f3af 8000 	nop.w
 8000cea:	4601      	mov	r1, r0
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	60ba      	str	r2, [r7, #8]
 8000cf2:	b2ca      	uxtb	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbf0      	blt.n	8000ce6 <_read+0x12>
  }

  return len;
 8000d04:	687b      	ldr	r3, [r7, #4]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	e009      	b.n	8000d34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	60ba      	str	r2, [r7, #8]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3301      	adds	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dbf1      	blt.n	8000d20 <_write+0x12>
  }
  return len;
 8000d3c:	687b      	ldr	r3, [r7, #4]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <_close>:

int _close(int file)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d6e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <_isatty>:

int _isatty(int file)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f003 fc10 	bl	8004604 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20080000 	.word	0x20080000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	200002b8 	.word	0x200002b8
 8000e18:	20000498 	.word	0x20000498

08000e1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <MX_USART3_UART_Init+0x58>)
 8000e46:	4a15      	ldr	r2, [pc, #84]	@ (8000e9c <MX_USART3_UART_Init+0x5c>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <MX_USART3_UART_Init+0x58>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <MX_USART3_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <MX_USART3_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <MX_USART3_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <MX_USART3_UART_Init+0x58>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <MX_USART3_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <MX_USART3_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <MX_USART3_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <MX_USART3_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <MX_USART3_UART_Init+0x58>)
 8000e84:	f002 f940 	bl	8003108 <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e8e:	f7ff fea5 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200002bc 	.word	0x200002bc
 8000e9c:	40004800 	.word	0x40004800

08000ea0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0ae      	sub	sp, #184	@ 0xb8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2290      	movs	r2, #144	@ 0x90
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f003 fb93 	bl	80045ec <memset>
  if(uartHandle->Instance==USART3)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a22      	ldr	r2, [pc, #136]	@ (8000f54 <HAL_UART_MspInit+0xb4>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d13c      	bne.n	8000f4a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ed0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ed4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 fcea 	bl	80028b8 <HAL_RCCEx_PeriphCLKConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eea:	f7ff fe77 	bl	8000bdc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eee:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <HAL_UART_MspInit+0xb8>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	4a19      	ldr	r2, [pc, #100]	@ (8000f58 <HAL_UART_MspInit+0xb8>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000efa:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <HAL_UART_MspInit+0xb8>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <HAL_UART_MspInit+0xb8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a13      	ldr	r2, [pc, #76]	@ (8000f58 <HAL_UART_MspInit+0xb8>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <HAL_UART_MspInit+0xb8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <HAL_UART_MspInit+0xbc>)
 8000f46:	f000 fe0d 	bl	8001b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	37b8      	adds	r7, #184	@ 0xb8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40004800 	.word	0x40004800
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020c00 	.word	0x40020c00

08000f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f64:	f7ff ff5a 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f68:	480c      	ldr	r0, [pc, #48]	@ (8000f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6a:	490d      	ldr	r1, [pc, #52]	@ (8000fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f80:	4c0a      	ldr	r4, [pc, #40]	@ (8000fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f003 fb3f 	bl	8004610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f92:	f7ff fd47 	bl	8000a24 <main>
  bx  lr    
 8000f96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f98:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000fa4:	08006b10 	.word	0x08006b10
  ldr r2, =_sbss
 8000fa8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000fac:	20000494 	.word	0x20000494

08000fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC_IRQHandler>

08000fb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f000 fd28 	bl	8001a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbc:	200f      	movs	r0, #15
 8000fbe:	f000 f805 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc2:	f7ff fe11 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fd35 	bl	8001a5a <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001008:	f000 fd0b 	bl	8001a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	@ (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000000 	.word	0x20000000
 8001024:	20000008 	.word	0x20000008
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	20000344 	.word	0x20000344

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000344 	.word	0x20000344

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_Delay+0x44>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008

080010b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e031      	b.n	800112e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fad6 	bl	8000684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d116      	bne.n	8001120 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <HAL_ADC_Init+0x84>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	f043 0202 	orr.w	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 fad6 	bl	80016b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f023 0303 	bic.w	r3, r3, #3
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	@ 0x40
 800111e:	e001      	b.n	8001124 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	ffffeefd 	.word	0xffffeefd

0800113c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800114e:	2b01      	cmp	r3, #1
 8001150:	d101      	bne.n	8001156 <HAL_ADC_Start+0x1a>
 8001152:	2302      	movs	r3, #2
 8001154:	e0ad      	b.n	80012b2 <HAL_ADC_Start+0x176>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b01      	cmp	r3, #1
 800116a:	d018      	beq.n	800119e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0201 	orr.w	r2, r2, #1
 800117a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800117c:	4b50      	ldr	r3, [pc, #320]	@ (80012c0 <HAL_ADC_Start+0x184>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a50      	ldr	r2, [pc, #320]	@ (80012c4 <HAL_ADC_Start+0x188>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	0c9a      	lsrs	r2, r3, #18
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001190:	e002      	b.n	8001198 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3b01      	subs	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f9      	bne.n	8001192 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d175      	bne.n	8001298 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011b0:	4b45      	ldr	r3, [pc, #276]	@ (80012c8 <HAL_ADC_Start+0x18c>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d007      	beq.n	80011da <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011e6:	d106      	bne.n	80011f6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ec:	f023 0206 	bic.w	r2, r3, #6
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80011f4:	e002      	b.n	80011fc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800120c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800120e:	4b2f      	ldr	r3, [pc, #188]	@ (80012cc <HAL_ADC_Start+0x190>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 031f 	and.w	r3, r3, #31
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10f      	bne.n	800123a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d143      	bne.n	80012b0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	e03a      	b.n	80012b0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a24      	ldr	r2, [pc, #144]	@ (80012d0 <HAL_ADC_Start+0x194>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d10e      	bne.n	8001262 <HAL_ADC_Start+0x126>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d107      	bne.n	8001262 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001260:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001262:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <HAL_ADC_Start+0x190>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	d120      	bne.n	80012b0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a18      	ldr	r2, [pc, #96]	@ (80012d4 <HAL_ADC_Start+0x198>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d11b      	bne.n	80012b0 <HAL_ADC_Start+0x174>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d114      	bne.n	80012b0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	e00b      	b.n	80012b0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	f043 0210 	orr.w	r2, r3, #16
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000000 	.word	0x20000000
 80012c4:	431bde83 	.word	0x431bde83
 80012c8:	fffff8fe 	.word	0xfffff8fe
 80012cc:	40012300 	.word	0x40012300
 80012d0:	40012000 	.word	0x40012000
 80012d4:	40012200 	.word	0x40012200

080012d8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012f4:	d113      	bne.n	800131e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001304:	d10b      	bne.n	800131e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f043 0220 	orr.w	r2, r3, #32
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e063      	b.n	80013e6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800131e:	f7ff fe99 	bl	8001054 <HAL_GetTick>
 8001322:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001324:	e021      	b.n	800136a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800132c:	d01d      	beq.n	800136a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d007      	beq.n	8001344 <HAL_ADC_PollForConversion+0x6c>
 8001334:	f7ff fe8e 	bl	8001054 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d212      	bcs.n	800136a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b02      	cmp	r3, #2
 8001350:	d00b      	beq.n	800136a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f043 0204 	orr.w	r2, r3, #4
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e03d      	b.n	80013e6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b02      	cmp	r3, #2
 8001376:	d1d6      	bne.n	8001326 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f06f 0212 	mvn.w	r2, #18
 8001380:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d123      	bne.n	80013e4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d11f      	bne.n	80013e4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d006      	beq.n	80013c0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d111      	bne.n	80013e4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	f043 0201 	orr.w	r2, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x1c>
 8001420:	2302      	movs	r3, #2
 8001422:	e136      	b.n	8001692 <HAL_ADC_ConfigChannel+0x28a>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b09      	cmp	r3, #9
 8001432:	d93a      	bls.n	80014aa <HAL_ADC_ConfigChannel+0xa2>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800143c:	d035      	beq.n	80014aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68d9      	ldr	r1, [r3, #12]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	3b1e      	subs	r3, #30
 8001454:	2207      	movs	r2, #7
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	400a      	ands	r2, r1
 8001462:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a8d      	ldr	r2, [pc, #564]	@ (80016a0 <HAL_ADC_ConfigChannel+0x298>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d10a      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68d9      	ldr	r1, [r3, #12]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	061a      	lsls	r2, r3, #24
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001482:	e035      	b.n	80014f0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68d9      	ldr	r1, [r3, #12]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	4603      	mov	r3, r0
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4403      	add	r3, r0
 800149c:	3b1e      	subs	r3, #30
 800149e:	409a      	lsls	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014a8:	e022      	b.n	80014f0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6919      	ldr	r1, [r3, #16]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	4613      	mov	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	2207      	movs	r2, #7
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43da      	mvns	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	400a      	ands	r2, r1
 80014cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6919      	ldr	r1, [r3, #16]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	4603      	mov	r3, r0
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4403      	add	r3, r0
 80014e6:	409a      	lsls	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b06      	cmp	r3, #6
 80014f6:	d824      	bhi.n	8001542 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	3b05      	subs	r3, #5
 800150a:	221f      	movs	r2, #31
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43da      	mvns	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	400a      	ands	r2, r1
 8001518:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	b29b      	uxth	r3, r3
 8001526:	4618      	mov	r0, r3
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	3b05      	subs	r3, #5
 8001534:	fa00 f203 	lsl.w	r2, r0, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001540:	e04c      	b.n	80015dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b0c      	cmp	r3, #12
 8001548:	d824      	bhi.n	8001594 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	3b23      	subs	r3, #35	@ 0x23
 800155c:	221f      	movs	r2, #31
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	400a      	ands	r2, r1
 800156a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	3b23      	subs	r3, #35	@ 0x23
 8001586:	fa00 f203 	lsl.w	r2, r0, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	631a      	str	r2, [r3, #48]	@ 0x30
 8001592:	e023      	b.n	80015dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	3b41      	subs	r3, #65	@ 0x41
 80015a6:	221f      	movs	r2, #31
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43da      	mvns	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	400a      	ands	r2, r1
 80015b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	3b41      	subs	r3, #65	@ 0x41
 80015d0:	fa00 f203 	lsl.w	r2, r0, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a30      	ldr	r2, [pc, #192]	@ (80016a4 <HAL_ADC_ConfigChannel+0x29c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d10a      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x1f4>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80015ee:	d105      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80015f0:	4b2d      	ldr	r3, [pc, #180]	@ (80016a8 <HAL_ADC_ConfigChannel+0x2a0>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a2c      	ldr	r2, [pc, #176]	@ (80016a8 <HAL_ADC_ConfigChannel+0x2a0>)
 80015f6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80015fa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a28      	ldr	r2, [pc, #160]	@ (80016a4 <HAL_ADC_ConfigChannel+0x29c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d10f      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x21e>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b12      	cmp	r3, #18
 800160c:	d10b      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800160e:	4b26      	ldr	r3, [pc, #152]	@ (80016a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4a25      	ldr	r2, [pc, #148]	@ (80016a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001614:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001618:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800161a:	4b23      	ldr	r3, [pc, #140]	@ (80016a8 <HAL_ADC_ConfigChannel+0x2a0>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4a22      	ldr	r2, [pc, #136]	@ (80016a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001620:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001624:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1e      	ldr	r2, [pc, #120]	@ (80016a4 <HAL_ADC_ConfigChannel+0x29c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d12b      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x280>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a1a      	ldr	r2, [pc, #104]	@ (80016a0 <HAL_ADC_ConfigChannel+0x298>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d003      	beq.n	8001642 <HAL_ADC_ConfigChannel+0x23a>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b11      	cmp	r3, #17
 8001640:	d122      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001642:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4a18      	ldr	r2, [pc, #96]	@ (80016a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001648:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800164c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800164e:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4a15      	ldr	r2, [pc, #84]	@ (80016a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001654:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001658:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a10      	ldr	r2, [pc, #64]	@ (80016a0 <HAL_ADC_ConfigChannel+0x298>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d111      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <HAL_ADC_ConfigChannel+0x2a4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a11      	ldr	r2, [pc, #68]	@ (80016b0 <HAL_ADC_ConfigChannel+0x2a8>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0c9a      	lsrs	r2, r3, #18
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800167a:	e002      	b.n	8001682 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3b01      	subs	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f9      	bne.n	800167c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	10000012 	.word	0x10000012
 80016a4:	40012000 	.word	0x40012000
 80016a8:	40012300 	.word	0x40012300
 80016ac:	20000000 	.word	0x20000000
 80016b0:	431bde83 	.word	0x431bde83

080016b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80016bc:	4b78      	ldr	r3, [pc, #480]	@ (80018a0 <ADC_Init+0x1ec>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4a77      	ldr	r2, [pc, #476]	@ (80018a0 <ADC_Init+0x1ec>)
 80016c2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80016c6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80016c8:	4b75      	ldr	r3, [pc, #468]	@ (80018a0 <ADC_Init+0x1ec>)
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4973      	ldr	r1, [pc, #460]	@ (80018a0 <ADC_Init+0x1ec>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	021a      	lsls	r2, r3, #8
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6859      	ldr	r1, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800172a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6899      	ldr	r1, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001742:	4a58      	ldr	r2, [pc, #352]	@ (80018a4 <ADC_Init+0x1f0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d022      	beq.n	800178e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001756:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6899      	ldr	r1, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6899      	ldr	r1, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	e00f      	b.n	80017ae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800179c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0202 	bic.w	r2, r2, #2
 80017bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6899      	ldr	r1, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	005a      	lsls	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d01b      	beq.n	8001814 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6859      	ldr	r1, [r3, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001806:	3b01      	subs	r3, #1
 8001808:	035a      	lsls	r2, r3, #13
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	e007      	b.n	8001824 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001822:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001832:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	3b01      	subs	r3, #1
 8001840:	051a      	lsls	r2, r3, #20
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001858:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6899      	ldr	r1, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001866:	025a      	lsls	r2, r3, #9
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800187e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6899      	ldr	r1, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	029a      	lsls	r2, r3, #10
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	609a      	str	r2, [r3, #8]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40012300 	.word	0x40012300
 80018a4:	0f000001 	.word	0x0f000001

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <__NVIC_SetPriorityGrouping+0x40>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <__NVIC_SetPriorityGrouping+0x40>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00
 80018ec:	05fa0000 	.word	0x05fa0000

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	@ (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	@ (800195c <__NVIC_SetPriority+0x50>)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	@ 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	@ 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019d8:	d301      	bcc.n	80019de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019da:	2301      	movs	r3, #1
 80019dc:	e00f      	b.n	80019fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019de:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <SysTick_Config+0x40>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e6:	210f      	movs	r1, #15
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019ec:	f7ff ff8e 	bl	800190c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <SysTick_Config+0x40>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f6:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <SysTick_Config+0x40>)
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	e000e010 	.word	0xe000e010

08001a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff47 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a34:	f7ff ff5c 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	f7ff ff8e 	bl	8001960 <NVIC_EncodePriority>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff5d 	bl	800190c <__NVIC_SetPriority>
}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffb0 	bl	80019c8 <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a78:	f3bf 8f5f 	dmb	sy
}
 8001a7c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <HAL_MPU_Disable+0x28>)
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	4a06      	ldr	r2, [pc, #24]	@ (8001a9c <HAL_MPU_Disable+0x28>)
 8001a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a88:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a8a:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <HAL_MPU_Disable+0x2c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00
 8001aa0:	e000ed90 	.word	0xe000ed90

08001aa4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001aac:	4a0b      	ldr	r2, [pc, #44]	@ (8001adc <HAL_MPU_Enable+0x38>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_MPU_Enable+0x3c>)
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aba:	4a09      	ldr	r2, [pc, #36]	@ (8001ae0 <HAL_MPU_Enable+0x3c>)
 8001abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001ac2:	f3bf 8f4f 	dsb	sy
}
 8001ac6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ac8:	f3bf 8f6f 	isb	sy
}
 8001acc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000ed90 	.word	0xe000ed90
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	785a      	ldrb	r2, [r3, #1]
 8001af0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <HAL_MPU_ConfigRegion+0x7c>)
 8001af2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001af4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b60 <HAL_MPU_ConfigRegion+0x7c>)
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	4a19      	ldr	r2, [pc, #100]	@ (8001b60 <HAL_MPU_ConfigRegion+0x7c>)
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001b00:	4a17      	ldr	r2, [pc, #92]	@ (8001b60 <HAL_MPU_ConfigRegion+0x7c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7b1b      	ldrb	r3, [r3, #12]
 8001b0c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7adb      	ldrb	r3, [r3, #11]
 8001b12:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7a9b      	ldrb	r3, [r3, #10]
 8001b1a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7b5b      	ldrb	r3, [r3, #13]
 8001b22:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7b9b      	ldrb	r3, [r3, #14]
 8001b2a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7bdb      	ldrb	r3, [r3, #15]
 8001b32:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7a5b      	ldrb	r3, [r3, #9]
 8001b3a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7a1b      	ldrb	r3, [r3, #8]
 8001b42:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b44:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b4c:	4a04      	ldr	r2, [pc, #16]	@ (8001b60 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b4e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b50:	6113      	str	r3, [r2, #16]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed90 	.word	0xe000ed90

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	@ 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	e175      	b.n	8001e70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b84:	2201      	movs	r2, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f040 8164 	bne.w	8001e6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d005      	beq.n	8001bba <HAL_GPIO_Init+0x56>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d130      	bne.n	8001c1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 0201 	and.w	r2, r3, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d017      	beq.n	8001c58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d123      	bne.n	8001cac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	08da      	lsrs	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3208      	adds	r2, #8
 8001c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	08da      	lsrs	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3208      	adds	r2, #8
 8001ca6:	69b9      	ldr	r1, [r7, #24]
 8001ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0203 	and.w	r2, r3, #3
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80be 	beq.w	8001e6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	4b66      	ldr	r3, [pc, #408]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	4a65      	ldr	r2, [pc, #404]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfa:	4b63      	ldr	r3, [pc, #396]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d06:	4a61      	ldr	r2, [pc, #388]	@ (8001e8c <HAL_GPIO_Init+0x328>)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a58      	ldr	r2, [pc, #352]	@ (8001e90 <HAL_GPIO_Init+0x32c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d037      	beq.n	8001da2 <HAL_GPIO_Init+0x23e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a57      	ldr	r2, [pc, #348]	@ (8001e94 <HAL_GPIO_Init+0x330>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d031      	beq.n	8001d9e <HAL_GPIO_Init+0x23a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a56      	ldr	r2, [pc, #344]	@ (8001e98 <HAL_GPIO_Init+0x334>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d02b      	beq.n	8001d9a <HAL_GPIO_Init+0x236>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a55      	ldr	r2, [pc, #340]	@ (8001e9c <HAL_GPIO_Init+0x338>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d025      	beq.n	8001d96 <HAL_GPIO_Init+0x232>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a54      	ldr	r2, [pc, #336]	@ (8001ea0 <HAL_GPIO_Init+0x33c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01f      	beq.n	8001d92 <HAL_GPIO_Init+0x22e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a53      	ldr	r2, [pc, #332]	@ (8001ea4 <HAL_GPIO_Init+0x340>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d019      	beq.n	8001d8e <HAL_GPIO_Init+0x22a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a52      	ldr	r2, [pc, #328]	@ (8001ea8 <HAL_GPIO_Init+0x344>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0x226>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a51      	ldr	r2, [pc, #324]	@ (8001eac <HAL_GPIO_Init+0x348>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00d      	beq.n	8001d86 <HAL_GPIO_Init+0x222>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a50      	ldr	r2, [pc, #320]	@ (8001eb0 <HAL_GPIO_Init+0x34c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <HAL_GPIO_Init+0x21e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4f      	ldr	r2, [pc, #316]	@ (8001eb4 <HAL_GPIO_Init+0x350>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_GPIO_Init+0x21a>
 8001d7a:	2309      	movs	r3, #9
 8001d7c:	e012      	b.n	8001da4 <HAL_GPIO_Init+0x240>
 8001d7e:	230a      	movs	r3, #10
 8001d80:	e010      	b.n	8001da4 <HAL_GPIO_Init+0x240>
 8001d82:	2308      	movs	r3, #8
 8001d84:	e00e      	b.n	8001da4 <HAL_GPIO_Init+0x240>
 8001d86:	2307      	movs	r3, #7
 8001d88:	e00c      	b.n	8001da4 <HAL_GPIO_Init+0x240>
 8001d8a:	2306      	movs	r3, #6
 8001d8c:	e00a      	b.n	8001da4 <HAL_GPIO_Init+0x240>
 8001d8e:	2305      	movs	r3, #5
 8001d90:	e008      	b.n	8001da4 <HAL_GPIO_Init+0x240>
 8001d92:	2304      	movs	r3, #4
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x240>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e004      	b.n	8001da4 <HAL_GPIO_Init+0x240>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_Init+0x240>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_Init+0x240>
 8001da2:	2300      	movs	r3, #0
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	f002 0203 	and.w	r2, r2, #3
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	4093      	lsls	r3, r2
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001db4:	4935      	ldr	r1, [pc, #212]	@ (8001e8c <HAL_GPIO_Init+0x328>)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8001eb8 <HAL_GPIO_Init+0x354>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de6:	4a34      	ldr	r2, [pc, #208]	@ (8001eb8 <HAL_GPIO_Init+0x354>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dec:	4b32      	ldr	r3, [pc, #200]	@ (8001eb8 <HAL_GPIO_Init+0x354>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e10:	4a29      	ldr	r2, [pc, #164]	@ (8001eb8 <HAL_GPIO_Init+0x354>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e16:	4b28      	ldr	r3, [pc, #160]	@ (8001eb8 <HAL_GPIO_Init+0x354>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb8 <HAL_GPIO_Init+0x354>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e40:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb8 <HAL_GPIO_Init+0x354>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e64:	4a14      	ldr	r2, [pc, #80]	@ (8001eb8 <HAL_GPIO_Init+0x354>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	f67f ae86 	bls.w	8001b84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3724      	adds	r7, #36	@ 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020c00 	.word	0x40020c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40021400 	.word	0x40021400
 8001ea8:	40021800 	.word	0x40021800
 8001eac:	40021c00 	.word	0x40021c00
 8001eb0:	40022000 	.word	0x40022000
 8001eb4:	40022400 	.word	0x40022400
 8001eb8:	40013c00 	.word	0x40013c00

08001ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ecc:	787b      	ldrb	r3, [r7, #1]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ed8:	e003      	b.n	8001ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001eda:	887b      	ldrh	r3, [r7, #2]
 8001edc:	041a      	lsls	r2, r3, #16
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	619a      	str	r2, [r3, #24]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4b23      	ldr	r3, [pc, #140]	@ (8001f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	4a22      	ldr	r2, [pc, #136]	@ (8001f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f06:	4b20      	ldr	r3, [pc, #128]	@ (8001f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f12:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1d      	ldr	r2, [pc, #116]	@ (8001f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f1e:	f7ff f899 	bl	8001054 <HAL_GetTick>
 8001f22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f24:	e009      	b.n	8001f3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f26:	f7ff f895 	bl	8001054 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f34:	d901      	bls.n	8001f3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e022      	b.n	8001f80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f3a:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f46:	d1ee      	bne.n	8001f26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f48:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f54:	f7ff f87e 	bl	8001054 <HAL_GetTick>
 8001f58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f5a:	e009      	b.n	8001f70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f5c:	f7ff f87a 	bl	8001054 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f6a:	d901      	bls.n	8001f70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e007      	b.n	8001f80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f7c:	d1ee      	bne.n	8001f5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40007000 	.word	0x40007000

08001f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e29b      	b.n	80024de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8087 	beq.w	80020c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fb4:	4b96      	ldr	r3, [pc, #600]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d00c      	beq.n	8001fda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc0:	4b93      	ldr	r3, [pc, #588]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d112      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x62>
 8001fcc:	4b90      	ldr	r3, [pc, #576]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fda:	4b8d      	ldr	r3, [pc, #564]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d06c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x130>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d168      	bne.n	80020c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e275      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x7a>
 8001ffc:	4b84      	ldr	r3, [pc, #528]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a83      	ldr	r2, [pc, #524]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e02e      	b.n	8002068 <HAL_RCC_OscConfig+0xd8>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x9c>
 8002012:	4b7f      	ldr	r3, [pc, #508]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7e      	ldr	r2, [pc, #504]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b7c      	ldr	r3, [pc, #496]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a7b      	ldr	r2, [pc, #492]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002024:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e01d      	b.n	8002068 <HAL_RCC_OscConfig+0xd8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0xc0>
 8002036:	4b76      	ldr	r3, [pc, #472]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a75      	ldr	r2, [pc, #468]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b73      	ldr	r3, [pc, #460]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a72      	ldr	r2, [pc, #456]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xd8>
 8002050:	4b6f      	ldr	r3, [pc, #444]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a6e      	ldr	r2, [pc, #440]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b6c      	ldr	r3, [pc, #432]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a6b      	ldr	r2, [pc, #428]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002062:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7fe fff0 	bl	8001054 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7fe ffec 	bl	8001054 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	@ 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e229      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b61      	ldr	r3, [pc, #388]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0xe8>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7fe ffdc 	bl	8001054 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a0:	f7fe ffd8 	bl	8001054 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	@ 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e215      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	4b57      	ldr	r3, [pc, #348]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x110>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d069      	beq.n	80021a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ce:	4b50      	ldr	r3, [pc, #320]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020da:	4b4d      	ldr	r3, [pc, #308]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x190>
 80020e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	4b47      	ldr	r3, [pc, #284]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x17a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e1e9      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b41      	ldr	r3, [pc, #260]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	493d      	ldr	r1, [pc, #244]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	e040      	b.n	80021a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d023      	beq.n	8002170 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	4b39      	ldr	r3, [pc, #228]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a38      	ldr	r2, [pc, #224]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7fe ff8e 	bl	8001054 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213c:	f7fe ff8a 	bl	8001054 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e1c7      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214e:	4b30      	ldr	r3, [pc, #192]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215a:	4b2d      	ldr	r3, [pc, #180]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4929      	ldr	r1, [pc, #164]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
 800216e:	e018      	b.n	80021a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002170:	4b27      	ldr	r3, [pc, #156]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a26      	ldr	r2, [pc, #152]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe ff6a 	bl	8001054 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002184:	f7fe ff66 	bl	8001054 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e1a3      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002196:	4b1e      	ldr	r3, [pc, #120]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d038      	beq.n	8002220 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d019      	beq.n	80021ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b6:	4b16      	ldr	r3, [pc, #88]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 80021b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ba:	4a15      	ldr	r2, [pc, #84]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7fe ff47 	bl	8001054 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ca:	f7fe ff43 	bl	8001054 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e180      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 80021de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x23a>
 80021e8:	e01a      	b.n	8002220 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ea:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 80021ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ee:	4a08      	ldr	r2, [pc, #32]	@ (8002210 <HAL_RCC_OscConfig+0x280>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f6:	f7fe ff2d 	bl	8001054 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fe:	f7fe ff29 	bl	8001054 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d903      	bls.n	8002214 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e166      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
 8002210:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	4b92      	ldr	r3, [pc, #584]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 8002216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1ee      	bne.n	80021fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a4 	beq.w	8002376 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222e:	4b8c      	ldr	r3, [pc, #560]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10d      	bne.n	8002256 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	4b89      	ldr	r3, [pc, #548]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	4a88      	ldr	r2, [pc, #544]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002244:	6413      	str	r3, [r2, #64]	@ 0x40
 8002246:	4b86      	ldr	r3, [pc, #536]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002252:	2301      	movs	r3, #1
 8002254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002256:	4b83      	ldr	r3, [pc, #524]	@ (8002464 <HAL_RCC_OscConfig+0x4d4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d118      	bne.n	8002294 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002262:	4b80      	ldr	r3, [pc, #512]	@ (8002464 <HAL_RCC_OscConfig+0x4d4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a7f      	ldr	r2, [pc, #508]	@ (8002464 <HAL_RCC_OscConfig+0x4d4>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226e:	f7fe fef1 	bl	8001054 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002276:	f7fe feed 	bl	8001054 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b64      	cmp	r3, #100	@ 0x64
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e12a      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002288:	4b76      	ldr	r3, [pc, #472]	@ (8002464 <HAL_RCC_OscConfig+0x4d4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x31a>
 800229c:	4b70      	ldr	r3, [pc, #448]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a0:	4a6f      	ldr	r2, [pc, #444]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022a8:	e02d      	b.n	8002306 <HAL_RCC_OscConfig+0x376>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x33c>
 80022b2:	4b6b      	ldr	r3, [pc, #428]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b6:	4a6a      	ldr	r2, [pc, #424]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80022be:	4b68      	ldr	r3, [pc, #416]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c2:	4a67      	ldr	r2, [pc, #412]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ca:	e01c      	b.n	8002306 <HAL_RCC_OscConfig+0x376>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d10c      	bne.n	80022ee <HAL_RCC_OscConfig+0x35e>
 80022d4:	4b62      	ldr	r3, [pc, #392]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d8:	4a61      	ldr	r2, [pc, #388]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80022da:	f043 0304 	orr.w	r3, r3, #4
 80022de:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e0:	4b5f      	ldr	r3, [pc, #380]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e4:	4a5e      	ldr	r2, [pc, #376]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ec:	e00b      	b.n	8002306 <HAL_RCC_OscConfig+0x376>
 80022ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fa:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fe:	4a58      	ldr	r2, [pc, #352]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d015      	beq.n	800233a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230e:	f7fe fea1 	bl	8001054 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7fe fe9d 	bl	8001054 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e0d8      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	4b4c      	ldr	r3, [pc, #304]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ee      	beq.n	8002316 <HAL_RCC_OscConfig+0x386>
 8002338:	e014      	b.n	8002364 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233a:	f7fe fe8b 	bl	8001054 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7fe fe87 	bl	8001054 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0c2      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002358:	4b41      	ldr	r3, [pc, #260]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ee      	bne.n	8002342 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002364:	7dfb      	ldrb	r3, [r7, #23]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d105      	bne.n	8002376 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4b3d      	ldr	r3, [pc, #244]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	4a3c      	ldr	r2, [pc, #240]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 8002370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80ae 	beq.w	80024dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002380:	4b37      	ldr	r3, [pc, #220]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d06d      	beq.n	8002468 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d14b      	bne.n	800242c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002394:	4b32      	ldr	r3, [pc, #200]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a31      	ldr	r2, [pc, #196]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 800239a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800239e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fe58 	bl	8001054 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a8:	f7fe fe54 	bl	8001054 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e091      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ba:	4b29      	ldr	r3, [pc, #164]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69da      	ldr	r2, [r3, #28]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	019b      	lsls	r3, r3, #6
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	3b01      	subs	r3, #1
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f0:	071b      	lsls	r3, r3, #28
 80023f2:	491b      	ldr	r1, [pc, #108]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f8:	4b19      	ldr	r3, [pc, #100]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a18      	ldr	r2, [pc, #96]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 80023fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fe26 	bl	8001054 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fe22 	bl	8001054 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e05f      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241e:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x47c>
 800242a:	e057      	b.n	80024dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242c:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0b      	ldr	r2, [pc, #44]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 8002432:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fe0c 	bl	8001054 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002440:	f7fe fe08 	bl	8001054 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e045      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002452:	4b03      	ldr	r3, [pc, #12]	@ (8002460 <HAL_RCC_OscConfig+0x4d0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x4b0>
 800245e:	e03d      	b.n	80024dc <HAL_RCC_OscConfig+0x54c>
 8002460:	40023800 	.word	0x40023800
 8002464:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002468:	4b1f      	ldr	r3, [pc, #124]	@ (80024e8 <HAL_RCC_OscConfig+0x558>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d030      	beq.n	80024d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d129      	bne.n	80024d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d122      	bne.n	80024d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002498:	4013      	ands	r3, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800249e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d119      	bne.n	80024d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ae:	085b      	lsrs	r3, r3, #1
 80024b0:	3b01      	subs	r3, #1
 80024b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d10f      	bne.n	80024d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800

080024ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0d0      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b6a      	ldr	r3, [pc, #424]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d910      	bls.n	8002534 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b67      	ldr	r3, [pc, #412]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 020f 	bic.w	r2, r3, #15
 800251a:	4965      	ldr	r1, [pc, #404]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b63      	ldr	r3, [pc, #396]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0b8      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800254c:	4b59      	ldr	r3, [pc, #356]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4a58      	ldr	r2, [pc, #352]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002552:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002556:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002564:	4b53      	ldr	r3, [pc, #332]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a52      	ldr	r2, [pc, #328]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 800256a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800256e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002570:	4b50      	ldr	r3, [pc, #320]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	494d      	ldr	r1, [pc, #308]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d040      	beq.n	8002610 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	4b47      	ldr	r3, [pc, #284]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d115      	bne.n	80025ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e07f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	4b41      	ldr	r3, [pc, #260]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e073      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b3d      	ldr	r3, [pc, #244]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e06b      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	4b39      	ldr	r3, [pc, #228]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f023 0203 	bic.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4936      	ldr	r1, [pc, #216]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e0:	f7fe fd38 	bl	8001054 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7fe fd34 	bl	8001054 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e053      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	4b2d      	ldr	r3, [pc, #180]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 020c 	and.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	429a      	cmp	r2, r3
 800260e:	d1eb      	bne.n	80025e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002610:	4b27      	ldr	r3, [pc, #156]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d210      	bcs.n	8002640 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b24      	ldr	r3, [pc, #144]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 020f 	bic.w	r2, r3, #15
 8002626:	4922      	ldr	r1, [pc, #136]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e032      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800264c:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4916      	ldr	r1, [pc, #88]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800266a:	4b12      	ldr	r3, [pc, #72]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	490e      	ldr	r1, [pc, #56]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800267e:	f000 f821 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8002682:	4602      	mov	r2, r0
 8002684:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	490a      	ldr	r1, [pc, #40]	@ (80026b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002690:	5ccb      	ldrb	r3, [r1, r3]
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	4a09      	ldr	r2, [pc, #36]	@ (80026bc <HAL_RCC_ClockConfig+0x1d0>)
 8002698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800269a:	4b09      	ldr	r3, [pc, #36]	@ (80026c0 <HAL_RCC_ClockConfig+0x1d4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fc94 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023c00 	.word	0x40023c00
 80026b4:	40023800 	.word	0x40023800
 80026b8:	08006778 	.word	0x08006778
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c8:	b090      	sub	sp, #64	@ 0x40
 80026ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80026d0:	2300      	movs	r3, #0
 80026d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026d4:	2300      	movs	r3, #0
 80026d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026dc:	4b59      	ldr	r3, [pc, #356]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x180>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d00d      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x40>
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	f200 80a1 	bhi.w	8002830 <HAL_RCC_GetSysClockFreq+0x16c>
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x34>
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x3a>
 80026f6:	e09b      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f8:	4b53      	ldr	r3, [pc, #332]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x184>)
 80026fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026fc:	e09b      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026fe:	4b53      	ldr	r3, [pc, #332]	@ (800284c <HAL_RCC_GetSysClockFreq+0x188>)
 8002700:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002702:	e098      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002704:	4b4f      	ldr	r3, [pc, #316]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x180>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800270c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800270e:	4b4d      	ldr	r3, [pc, #308]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x180>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d028      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271a:	4b4a      	ldr	r3, [pc, #296]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x180>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	099b      	lsrs	r3, r3, #6
 8002720:	2200      	movs	r2, #0
 8002722:	623b      	str	r3, [r7, #32]
 8002724:	627a      	str	r2, [r7, #36]	@ 0x24
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800272c:	2100      	movs	r1, #0
 800272e:	4b47      	ldr	r3, [pc, #284]	@ (800284c <HAL_RCC_GetSysClockFreq+0x188>)
 8002730:	fb03 f201 	mul.w	r2, r3, r1
 8002734:	2300      	movs	r3, #0
 8002736:	fb00 f303 	mul.w	r3, r0, r3
 800273a:	4413      	add	r3, r2
 800273c:	4a43      	ldr	r2, [pc, #268]	@ (800284c <HAL_RCC_GetSysClockFreq+0x188>)
 800273e:	fba0 1202 	umull	r1, r2, r0, r2
 8002742:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002744:	460a      	mov	r2, r1
 8002746:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800274a:	4413      	add	r3, r2
 800274c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800274e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002750:	2200      	movs	r2, #0
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	61fa      	str	r2, [r7, #28]
 8002756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800275a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800275e:	f7fd fdc7 	bl	80002f0 <__aeabi_uldivmod>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4613      	mov	r3, r2
 8002768:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800276a:	e053      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276c:	4b35      	ldr	r3, [pc, #212]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x180>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	2200      	movs	r2, #0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	617a      	str	r2, [r7, #20]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800277e:	f04f 0b00 	mov.w	fp, #0
 8002782:	4652      	mov	r2, sl
 8002784:	465b      	mov	r3, fp
 8002786:	f04f 0000 	mov.w	r0, #0
 800278a:	f04f 0100 	mov.w	r1, #0
 800278e:	0159      	lsls	r1, r3, #5
 8002790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002794:	0150      	lsls	r0, r2, #5
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	ebb2 080a 	subs.w	r8, r2, sl
 800279e:	eb63 090b 	sbc.w	r9, r3, fp
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027b6:	ebb2 0408 	subs.w	r4, r2, r8
 80027ba:	eb63 0509 	sbc.w	r5, r3, r9
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	00eb      	lsls	r3, r5, #3
 80027c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027cc:	00e2      	lsls	r2, r4, #3
 80027ce:	4614      	mov	r4, r2
 80027d0:	461d      	mov	r5, r3
 80027d2:	eb14 030a 	adds.w	r3, r4, sl
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	eb45 030b 	adc.w	r3, r5, fp
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ea:	4629      	mov	r1, r5
 80027ec:	028b      	lsls	r3, r1, #10
 80027ee:	4621      	mov	r1, r4
 80027f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027f4:	4621      	mov	r1, r4
 80027f6:	028a      	lsls	r2, r1, #10
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027fe:	2200      	movs	r2, #0
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	60fa      	str	r2, [r7, #12]
 8002804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002808:	f7fd fd72 	bl	80002f0 <__aeabi_uldivmod>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4613      	mov	r3, r2
 8002812:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x180>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	0c1b      	lsrs	r3, r3, #16
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	3301      	adds	r3, #1
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002824:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800282e:	e002      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x184>)
 8002832:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002838:	4618      	mov	r0, r3
 800283a:	3740      	adds	r7, #64	@ 0x40
 800283c:	46bd      	mov	sp, r7
 800283e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	00f42400 	.word	0x00f42400
 800284c:	017d7840 	.word	0x017d7840

08002850 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002854:	4b03      	ldr	r3, [pc, #12]	@ (8002864 <HAL_RCC_GetHCLKFreq+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000000 	.word	0x20000000

08002868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800286c:	f7ff fff0 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	0a9b      	lsrs	r3, r3, #10
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4903      	ldr	r1, [pc, #12]	@ (800288c <HAL_RCC_GetPCLK1Freq+0x24>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	08006788 	.word	0x08006788

08002890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002894:	f7ff ffdc 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	0b5b      	lsrs	r3, r3, #13
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4903      	ldr	r1, [pc, #12]	@ (80028b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40023800 	.word	0x40023800
 80028b4:	08006788 	.word	0x08006788

080028b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d012      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028e0:	4b69      	ldr	r3, [pc, #420]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a68      	ldr	r2, [pc, #416]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80028ea:	6093      	str	r3, [r2, #8]
 80028ec:	4b66      	ldr	r3, [pc, #408]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f4:	4964      	ldr	r1, [pc, #400]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002902:	2301      	movs	r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d017      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002912:	4b5d      	ldr	r3, [pc, #372]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002918:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002920:	4959      	ldr	r1, [pc, #356]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002930:	d101      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002932:	2301      	movs	r3, #1
 8002934:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d017      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800294e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002950:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002954:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	494a      	ldr	r1, [pc, #296]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800296c:	d101      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800296e:	2301      	movs	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800297a:	2301      	movs	r3, #1
 800297c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800298a:	2301      	movs	r3, #1
 800298c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 808b 	beq.w	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800299c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	4a39      	ldr	r2, [pc, #228]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a8:	4b37      	ldr	r3, [pc, #220]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029b4:	4b35      	ldr	r3, [pc, #212]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a34      	ldr	r2, [pc, #208]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c0:	f7fe fb48 	bl	8001054 <HAL_GetTick>
 80029c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c8:	f7fe fb44 	bl	8001054 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	@ 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e38f      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029da:	4b2c      	ldr	r3, [pc, #176]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029e6:	4b28      	ldr	r3, [pc, #160]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d035      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d02e      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a04:	4b20      	ldr	r3, [pc, #128]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a12:	4a1d      	ldr	r2, [pc, #116]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a18:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a26:	4a18      	ldr	r2, [pc, #96]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a2c:	4b16      	ldr	r3, [pc, #88]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d114      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe fb0c 	bl	8001054 <HAL_GetTick>
 8002a3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a40:	f7fe fb08 	bl	8001054 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e351      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a56:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0ee      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a6e:	d111      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a70:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a7c:	4b04      	ldr	r3, [pc, #16]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a7e:	400b      	ands	r3, r1
 8002a80:	4901      	ldr	r1, [pc, #4]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	0ffffcff 	.word	0x0ffffcff
 8002a94:	4bac      	ldr	r3, [pc, #688]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4aab      	ldr	r2, [pc, #684]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a9e:	6093      	str	r3, [r2, #8]
 8002aa0:	4ba9      	ldr	r3, [pc, #676]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	49a6      	ldr	r1, [pc, #664]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d010      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002abe:	4ba2      	ldr	r3, [pc, #648]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ac4:	4aa0      	ldr	r2, [pc, #640]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002aca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ace:	4b9e      	ldr	r3, [pc, #632]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad8:	499b      	ldr	r1, [pc, #620]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aec:	4b96      	ldr	r3, [pc, #600]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002afa:	4993      	ldr	r1, [pc, #588]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b0e:	4b8e      	ldr	r3, [pc, #568]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b1c:	498a      	ldr	r1, [pc, #552]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b30:	4b85      	ldr	r3, [pc, #532]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b3e:	4982      	ldr	r1, [pc, #520]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b52:	4b7d      	ldr	r3, [pc, #500]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b58:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b60:	4979      	ldr	r1, [pc, #484]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b74:	4b74      	ldr	r3, [pc, #464]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7a:	f023 0203 	bic.w	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	4971      	ldr	r1, [pc, #452]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b96:	4b6c      	ldr	r3, [pc, #432]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9c:	f023 020c 	bic.w	r2, r3, #12
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba4:	4968      	ldr	r1, [pc, #416]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bb8:	4b63      	ldr	r3, [pc, #396]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc6:	4960      	ldr	r1, [pc, #384]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bda:	4b5b      	ldr	r3, [pc, #364]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002be8:	4957      	ldr	r1, [pc, #348]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bfc:	4b52      	ldr	r3, [pc, #328]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c02:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0a:	494f      	ldr	r1, [pc, #316]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c24:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2c:	4946      	ldr	r1, [pc, #280]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c40:	4b41      	ldr	r3, [pc, #260]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c46:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4e:	493e      	ldr	r1, [pc, #248]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c62:	4b39      	ldr	r3, [pc, #228]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c70:	4935      	ldr	r1, [pc, #212]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c84:	4b30      	ldr	r3, [pc, #192]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c92:	492d      	ldr	r1, [pc, #180]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d011      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ca6:	4b28      	ldr	r3, [pc, #160]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cac:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cb4:	4924      	ldr	r1, [pc, #144]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cc4:	d101      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ce6:	4b18      	ldr	r3, [pc, #96]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf4:	4914      	ldr	r1, [pc, #80]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00b      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d08:	4b0f      	ldr	r3, [pc, #60]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d18:	490b      	ldr	r1, [pc, #44]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d2c:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d32:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d3c:	4902      	ldr	r1, [pc, #8]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d44:	e002      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d58:	4b8a      	ldr	r3, [pc, #552]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d5e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d68:	4986      	ldr	r1, [pc, #536]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d7c:	4b81      	ldr	r3, [pc, #516]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d82:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d8c:	497d      	ldr	r1, [pc, #500]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d006      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80d6 	beq.w	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002da8:	4b76      	ldr	r3, [pc, #472]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a75      	ldr	r2, [pc, #468]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db4:	f7fe f94e 	bl	8001054 <HAL_GetTick>
 8002db8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dbc:	f7fe f94a 	bl	8001054 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	@ 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e195      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dce:	4b6d      	ldr	r3, [pc, #436]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d021      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d11d      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dee:	4b65      	ldr	r3, [pc, #404]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dfc:	4b61      	ldr	r3, [pc, #388]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e02:	0e1b      	lsrs	r3, r3, #24
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	019a      	lsls	r2, r3, #6
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	041b      	lsls	r3, r3, #16
 8002e14:	431a      	orrs	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	061b      	lsls	r3, r3, #24
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	071b      	lsls	r3, r3, #28
 8002e22:	4958      	ldr	r1, [pc, #352]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d004      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d02e      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e54:	d129      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e56:	4b4b      	ldr	r3, [pc, #300]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e64:	4b47      	ldr	r3, [pc, #284]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e6a:	0f1b      	lsrs	r3, r3, #28
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	019a      	lsls	r2, r3, #6
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	041b      	lsls	r3, r3, #16
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	061b      	lsls	r3, r3, #24
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	071b      	lsls	r3, r3, #28
 8002e8a:	493e      	ldr	r1, [pc, #248]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e92:	4b3c      	ldr	r3, [pc, #240]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e98:	f023 021f 	bic.w	r2, r3, #31
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	4938      	ldr	r1, [pc, #224]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01d      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002eb6:	4b33      	ldr	r3, [pc, #204]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ebc:	0e1b      	lsrs	r3, r3, #24
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ec4:	4b2f      	ldr	r3, [pc, #188]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eca:	0f1b      	lsrs	r3, r3, #28
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	019a      	lsls	r2, r3, #6
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	061b      	lsls	r3, r3, #24
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	071b      	lsls	r3, r3, #28
 8002eea:	4926      	ldr	r1, [pc, #152]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d011      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	019a      	lsls	r2, r3, #6
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	041b      	lsls	r3, r3, #16
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	071b      	lsls	r3, r3, #28
 8002f1a:	491a      	ldr	r1, [pc, #104]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f22:	4b18      	ldr	r3, [pc, #96]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a17      	ldr	r2, [pc, #92]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2e:	f7fe f891 	bl	8001054 <HAL_GetTick>
 8002f32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f36:	f7fe f88d 	bl	8001054 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b64      	cmp	r3, #100	@ 0x64
 8002f42:	d901      	bls.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e0d8      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f48:	4b0e      	ldr	r3, [pc, #56]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	f040 80ce 	bne.w	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f5c:	4b09      	ldr	r3, [pc, #36]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a08      	ldr	r2, [pc, #32]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f68:	f7fe f874 	bl	8001054 <HAL_GetTick>
 8002f6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f6e:	e00b      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f70:	f7fe f870 	bl	8001054 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	@ 0x64
 8002f7c:	d904      	bls.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e0bb      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f88:	4b5e      	ldr	r3, [pc, #376]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f94:	d0ec      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d02e      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d12a      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fbe:	4b51      	ldr	r3, [pc, #324]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc4:	0c1b      	lsrs	r3, r3, #16
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd2:	0f1b      	lsrs	r3, r3, #28
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	019a      	lsls	r2, r3, #6
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	041b      	lsls	r3, r3, #16
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	061b      	lsls	r3, r3, #24
 8002fec:	431a      	orrs	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	071b      	lsls	r3, r3, #28
 8002ff2:	4944      	ldr	r1, [pc, #272]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ffa:	4b42      	ldr	r3, [pc, #264]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003000:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	3b01      	subs	r3, #1
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	493d      	ldr	r1, [pc, #244]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d022      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003024:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003028:	d11d      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800302a:	4b36      	ldr	r3, [pc, #216]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003030:	0e1b      	lsrs	r3, r3, #24
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003038:	4b32      	ldr	r3, [pc, #200]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303e:	0f1b      	lsrs	r3, r3, #28
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	019a      	lsls	r2, r3, #6
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	431a      	orrs	r2, r3
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	061b      	lsls	r3, r3, #24
 8003058:	431a      	orrs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	071b      	lsls	r3, r3, #28
 800305e:	4929      	ldr	r1, [pc, #164]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d028      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003072:	4b24      	ldr	r3, [pc, #144]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003078:	0e1b      	lsrs	r3, r3, #24
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003080:	4b20      	ldr	r3, [pc, #128]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003086:	0c1b      	lsrs	r3, r3, #16
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	019a      	lsls	r2, r3, #6
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	041b      	lsls	r3, r3, #16
 8003098:	431a      	orrs	r2, r3
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	071b      	lsls	r3, r3, #28
 80030a6:	4917      	ldr	r1, [pc, #92]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030ae:	4b15      	ldr	r3, [pc, #84]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	4911      	ldr	r1, [pc, #68]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d0:	f7fd ffc0 	bl	8001054 <HAL_GetTick>
 80030d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030d8:	f7fd ffbc 	bl	8001054 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	@ 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e007      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030f6:	d1ef      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800

08003108 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e040      	b.n	800319c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fd feb8 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2224      	movs	r2, #36	@ 0x24
 8003134:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fb16 	bl	8003780 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f8af 	bl	80032b8 <UART_SetConfig>
 800315a:	4603      	mov	r3, r0
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e01b      	b.n	800319c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003172:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003182:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fb95 	bl	80038c4 <UART_CheckIdleState>
 800319a:	4603      	mov	r3, r0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	@ 0x28
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d177      	bne.n	80032ac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_UART_Transmit+0x24>
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e070      	b.n	80032ae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2221      	movs	r2, #33	@ 0x21
 80031d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031da:	f7fd ff3b 	bl	8001054 <HAL_GetTick>
 80031de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	88fa      	ldrh	r2, [r7, #6]
 80031e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	88fa      	ldrh	r2, [r7, #6]
 80031ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031f8:	d108      	bne.n	800320c <HAL_UART_Transmit+0x68>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d104      	bne.n	800320c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	e003      	b.n	8003214 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003210:	2300      	movs	r3, #0
 8003212:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003214:	e02f      	b.n	8003276 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2200      	movs	r2, #0
 800321e:	2180      	movs	r1, #128	@ 0x80
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 fbf7 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d004      	beq.n	8003236 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e03b      	b.n	80032ae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10b      	bne.n	8003254 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800324a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	3302      	adds	r3, #2
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	e007      	b.n	8003264 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	781a      	ldrb	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3301      	adds	r3, #1
 8003262:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1c9      	bne.n	8003216 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	2140      	movs	r1, #64	@ 0x40
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fbc1 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d004      	beq.n	80032a2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e005      	b.n	80032ae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e000      	b.n	80032ae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3720      	adds	r7, #32
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	4ba6      	ldr	r3, [pc, #664]	@ (800357c <UART_SetConfig+0x2c4>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6812      	ldr	r2, [r2, #0]
 80032ea:	6979      	ldr	r1, [r7, #20]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	430a      	orrs	r2, r1
 8003328:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a94      	ldr	r2, [pc, #592]	@ (8003580 <UART_SetConfig+0x2c8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d120      	bne.n	8003376 <UART_SetConfig+0xbe>
 8003334:	4b93      	ldr	r3, [pc, #588]	@ (8003584 <UART_SetConfig+0x2cc>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b03      	cmp	r3, #3
 8003340:	d816      	bhi.n	8003370 <UART_SetConfig+0xb8>
 8003342:	a201      	add	r2, pc, #4	@ (adr r2, 8003348 <UART_SetConfig+0x90>)
 8003344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003348:	08003359 	.word	0x08003359
 800334c:	08003365 	.word	0x08003365
 8003350:	0800335f 	.word	0x0800335f
 8003354:	0800336b 	.word	0x0800336b
 8003358:	2301      	movs	r3, #1
 800335a:	77fb      	strb	r3, [r7, #31]
 800335c:	e150      	b.n	8003600 <UART_SetConfig+0x348>
 800335e:	2302      	movs	r3, #2
 8003360:	77fb      	strb	r3, [r7, #31]
 8003362:	e14d      	b.n	8003600 <UART_SetConfig+0x348>
 8003364:	2304      	movs	r3, #4
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	e14a      	b.n	8003600 <UART_SetConfig+0x348>
 800336a:	2308      	movs	r3, #8
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e147      	b.n	8003600 <UART_SetConfig+0x348>
 8003370:	2310      	movs	r3, #16
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e144      	b.n	8003600 <UART_SetConfig+0x348>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a83      	ldr	r2, [pc, #524]	@ (8003588 <UART_SetConfig+0x2d0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d132      	bne.n	80033e6 <UART_SetConfig+0x12e>
 8003380:	4b80      	ldr	r3, [pc, #512]	@ (8003584 <UART_SetConfig+0x2cc>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b0c      	cmp	r3, #12
 800338c:	d828      	bhi.n	80033e0 <UART_SetConfig+0x128>
 800338e:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <UART_SetConfig+0xdc>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033c9 	.word	0x080033c9
 8003398:	080033e1 	.word	0x080033e1
 800339c:	080033e1 	.word	0x080033e1
 80033a0:	080033e1 	.word	0x080033e1
 80033a4:	080033d5 	.word	0x080033d5
 80033a8:	080033e1 	.word	0x080033e1
 80033ac:	080033e1 	.word	0x080033e1
 80033b0:	080033e1 	.word	0x080033e1
 80033b4:	080033cf 	.word	0x080033cf
 80033b8:	080033e1 	.word	0x080033e1
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	080033e1 	.word	0x080033e1
 80033c4:	080033db 	.word	0x080033db
 80033c8:	2300      	movs	r3, #0
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e118      	b.n	8003600 <UART_SetConfig+0x348>
 80033ce:	2302      	movs	r3, #2
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e115      	b.n	8003600 <UART_SetConfig+0x348>
 80033d4:	2304      	movs	r3, #4
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e112      	b.n	8003600 <UART_SetConfig+0x348>
 80033da:	2308      	movs	r3, #8
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e10f      	b.n	8003600 <UART_SetConfig+0x348>
 80033e0:	2310      	movs	r3, #16
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e10c      	b.n	8003600 <UART_SetConfig+0x348>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a68      	ldr	r2, [pc, #416]	@ (800358c <UART_SetConfig+0x2d4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d120      	bne.n	8003432 <UART_SetConfig+0x17a>
 80033f0:	4b64      	ldr	r3, [pc, #400]	@ (8003584 <UART_SetConfig+0x2cc>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80033fa:	2b30      	cmp	r3, #48	@ 0x30
 80033fc:	d013      	beq.n	8003426 <UART_SetConfig+0x16e>
 80033fe:	2b30      	cmp	r3, #48	@ 0x30
 8003400:	d814      	bhi.n	800342c <UART_SetConfig+0x174>
 8003402:	2b20      	cmp	r3, #32
 8003404:	d009      	beq.n	800341a <UART_SetConfig+0x162>
 8003406:	2b20      	cmp	r3, #32
 8003408:	d810      	bhi.n	800342c <UART_SetConfig+0x174>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <UART_SetConfig+0x15c>
 800340e:	2b10      	cmp	r3, #16
 8003410:	d006      	beq.n	8003420 <UART_SetConfig+0x168>
 8003412:	e00b      	b.n	800342c <UART_SetConfig+0x174>
 8003414:	2300      	movs	r3, #0
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e0f2      	b.n	8003600 <UART_SetConfig+0x348>
 800341a:	2302      	movs	r3, #2
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	e0ef      	b.n	8003600 <UART_SetConfig+0x348>
 8003420:	2304      	movs	r3, #4
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e0ec      	b.n	8003600 <UART_SetConfig+0x348>
 8003426:	2308      	movs	r3, #8
 8003428:	77fb      	strb	r3, [r7, #31]
 800342a:	e0e9      	b.n	8003600 <UART_SetConfig+0x348>
 800342c:	2310      	movs	r3, #16
 800342e:	77fb      	strb	r3, [r7, #31]
 8003430:	e0e6      	b.n	8003600 <UART_SetConfig+0x348>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a56      	ldr	r2, [pc, #344]	@ (8003590 <UART_SetConfig+0x2d8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d120      	bne.n	800347e <UART_SetConfig+0x1c6>
 800343c:	4b51      	ldr	r3, [pc, #324]	@ (8003584 <UART_SetConfig+0x2cc>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003442:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003446:	2bc0      	cmp	r3, #192	@ 0xc0
 8003448:	d013      	beq.n	8003472 <UART_SetConfig+0x1ba>
 800344a:	2bc0      	cmp	r3, #192	@ 0xc0
 800344c:	d814      	bhi.n	8003478 <UART_SetConfig+0x1c0>
 800344e:	2b80      	cmp	r3, #128	@ 0x80
 8003450:	d009      	beq.n	8003466 <UART_SetConfig+0x1ae>
 8003452:	2b80      	cmp	r3, #128	@ 0x80
 8003454:	d810      	bhi.n	8003478 <UART_SetConfig+0x1c0>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <UART_SetConfig+0x1a8>
 800345a:	2b40      	cmp	r3, #64	@ 0x40
 800345c:	d006      	beq.n	800346c <UART_SetConfig+0x1b4>
 800345e:	e00b      	b.n	8003478 <UART_SetConfig+0x1c0>
 8003460:	2300      	movs	r3, #0
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e0cc      	b.n	8003600 <UART_SetConfig+0x348>
 8003466:	2302      	movs	r3, #2
 8003468:	77fb      	strb	r3, [r7, #31]
 800346a:	e0c9      	b.n	8003600 <UART_SetConfig+0x348>
 800346c:	2304      	movs	r3, #4
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e0c6      	b.n	8003600 <UART_SetConfig+0x348>
 8003472:	2308      	movs	r3, #8
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e0c3      	b.n	8003600 <UART_SetConfig+0x348>
 8003478:	2310      	movs	r3, #16
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e0c0      	b.n	8003600 <UART_SetConfig+0x348>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a44      	ldr	r2, [pc, #272]	@ (8003594 <UART_SetConfig+0x2dc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d125      	bne.n	80034d4 <UART_SetConfig+0x21c>
 8003488:	4b3e      	ldr	r3, [pc, #248]	@ (8003584 <UART_SetConfig+0x2cc>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003492:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003496:	d017      	beq.n	80034c8 <UART_SetConfig+0x210>
 8003498:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800349c:	d817      	bhi.n	80034ce <UART_SetConfig+0x216>
 800349e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034a2:	d00b      	beq.n	80034bc <UART_SetConfig+0x204>
 80034a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034a8:	d811      	bhi.n	80034ce <UART_SetConfig+0x216>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <UART_SetConfig+0x1fe>
 80034ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034b2:	d006      	beq.n	80034c2 <UART_SetConfig+0x20a>
 80034b4:	e00b      	b.n	80034ce <UART_SetConfig+0x216>
 80034b6:	2300      	movs	r3, #0
 80034b8:	77fb      	strb	r3, [r7, #31]
 80034ba:	e0a1      	b.n	8003600 <UART_SetConfig+0x348>
 80034bc:	2302      	movs	r3, #2
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e09e      	b.n	8003600 <UART_SetConfig+0x348>
 80034c2:	2304      	movs	r3, #4
 80034c4:	77fb      	strb	r3, [r7, #31]
 80034c6:	e09b      	b.n	8003600 <UART_SetConfig+0x348>
 80034c8:	2308      	movs	r3, #8
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e098      	b.n	8003600 <UART_SetConfig+0x348>
 80034ce:	2310      	movs	r3, #16
 80034d0:	77fb      	strb	r3, [r7, #31]
 80034d2:	e095      	b.n	8003600 <UART_SetConfig+0x348>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003598 <UART_SetConfig+0x2e0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d125      	bne.n	800352a <UART_SetConfig+0x272>
 80034de:	4b29      	ldr	r3, [pc, #164]	@ (8003584 <UART_SetConfig+0x2cc>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80034e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034ec:	d017      	beq.n	800351e <UART_SetConfig+0x266>
 80034ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034f2:	d817      	bhi.n	8003524 <UART_SetConfig+0x26c>
 80034f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034f8:	d00b      	beq.n	8003512 <UART_SetConfig+0x25a>
 80034fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034fe:	d811      	bhi.n	8003524 <UART_SetConfig+0x26c>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <UART_SetConfig+0x254>
 8003504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003508:	d006      	beq.n	8003518 <UART_SetConfig+0x260>
 800350a:	e00b      	b.n	8003524 <UART_SetConfig+0x26c>
 800350c:	2301      	movs	r3, #1
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e076      	b.n	8003600 <UART_SetConfig+0x348>
 8003512:	2302      	movs	r3, #2
 8003514:	77fb      	strb	r3, [r7, #31]
 8003516:	e073      	b.n	8003600 <UART_SetConfig+0x348>
 8003518:	2304      	movs	r3, #4
 800351a:	77fb      	strb	r3, [r7, #31]
 800351c:	e070      	b.n	8003600 <UART_SetConfig+0x348>
 800351e:	2308      	movs	r3, #8
 8003520:	77fb      	strb	r3, [r7, #31]
 8003522:	e06d      	b.n	8003600 <UART_SetConfig+0x348>
 8003524:	2310      	movs	r3, #16
 8003526:	77fb      	strb	r3, [r7, #31]
 8003528:	e06a      	b.n	8003600 <UART_SetConfig+0x348>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1b      	ldr	r2, [pc, #108]	@ (800359c <UART_SetConfig+0x2e4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d138      	bne.n	80035a6 <UART_SetConfig+0x2ee>
 8003534:	4b13      	ldr	r3, [pc, #76]	@ (8003584 <UART_SetConfig+0x2cc>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800353e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003542:	d017      	beq.n	8003574 <UART_SetConfig+0x2bc>
 8003544:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003548:	d82a      	bhi.n	80035a0 <UART_SetConfig+0x2e8>
 800354a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800354e:	d00b      	beq.n	8003568 <UART_SetConfig+0x2b0>
 8003550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003554:	d824      	bhi.n	80035a0 <UART_SetConfig+0x2e8>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <UART_SetConfig+0x2aa>
 800355a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800355e:	d006      	beq.n	800356e <UART_SetConfig+0x2b6>
 8003560:	e01e      	b.n	80035a0 <UART_SetConfig+0x2e8>
 8003562:	2300      	movs	r3, #0
 8003564:	77fb      	strb	r3, [r7, #31]
 8003566:	e04b      	b.n	8003600 <UART_SetConfig+0x348>
 8003568:	2302      	movs	r3, #2
 800356a:	77fb      	strb	r3, [r7, #31]
 800356c:	e048      	b.n	8003600 <UART_SetConfig+0x348>
 800356e:	2304      	movs	r3, #4
 8003570:	77fb      	strb	r3, [r7, #31]
 8003572:	e045      	b.n	8003600 <UART_SetConfig+0x348>
 8003574:	2308      	movs	r3, #8
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e042      	b.n	8003600 <UART_SetConfig+0x348>
 800357a:	bf00      	nop
 800357c:	efff69f3 	.word	0xefff69f3
 8003580:	40011000 	.word	0x40011000
 8003584:	40023800 	.word	0x40023800
 8003588:	40004400 	.word	0x40004400
 800358c:	40004800 	.word	0x40004800
 8003590:	40004c00 	.word	0x40004c00
 8003594:	40005000 	.word	0x40005000
 8003598:	40011400 	.word	0x40011400
 800359c:	40007800 	.word	0x40007800
 80035a0:	2310      	movs	r3, #16
 80035a2:	77fb      	strb	r3, [r7, #31]
 80035a4:	e02c      	b.n	8003600 <UART_SetConfig+0x348>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a72      	ldr	r2, [pc, #456]	@ (8003774 <UART_SetConfig+0x4bc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d125      	bne.n	80035fc <UART_SetConfig+0x344>
 80035b0:	4b71      	ldr	r3, [pc, #452]	@ (8003778 <UART_SetConfig+0x4c0>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80035ba:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80035be:	d017      	beq.n	80035f0 <UART_SetConfig+0x338>
 80035c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80035c4:	d817      	bhi.n	80035f6 <UART_SetConfig+0x33e>
 80035c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035ca:	d00b      	beq.n	80035e4 <UART_SetConfig+0x32c>
 80035cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035d0:	d811      	bhi.n	80035f6 <UART_SetConfig+0x33e>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <UART_SetConfig+0x326>
 80035d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035da:	d006      	beq.n	80035ea <UART_SetConfig+0x332>
 80035dc:	e00b      	b.n	80035f6 <UART_SetConfig+0x33e>
 80035de:	2300      	movs	r3, #0
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e00d      	b.n	8003600 <UART_SetConfig+0x348>
 80035e4:	2302      	movs	r3, #2
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e00a      	b.n	8003600 <UART_SetConfig+0x348>
 80035ea:	2304      	movs	r3, #4
 80035ec:	77fb      	strb	r3, [r7, #31]
 80035ee:	e007      	b.n	8003600 <UART_SetConfig+0x348>
 80035f0:	2308      	movs	r3, #8
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e004      	b.n	8003600 <UART_SetConfig+0x348>
 80035f6:	2310      	movs	r3, #16
 80035f8:	77fb      	strb	r3, [r7, #31]
 80035fa:	e001      	b.n	8003600 <UART_SetConfig+0x348>
 80035fc:	2310      	movs	r3, #16
 80035fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003608:	d15b      	bne.n	80036c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800360a:	7ffb      	ldrb	r3, [r7, #31]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d828      	bhi.n	8003662 <UART_SetConfig+0x3aa>
 8003610:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <UART_SetConfig+0x360>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	0800363d 	.word	0x0800363d
 800361c:	08003645 	.word	0x08003645
 8003620:	0800364d 	.word	0x0800364d
 8003624:	08003663 	.word	0x08003663
 8003628:	08003653 	.word	0x08003653
 800362c:	08003663 	.word	0x08003663
 8003630:	08003663 	.word	0x08003663
 8003634:	08003663 	.word	0x08003663
 8003638:	0800365b 	.word	0x0800365b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800363c:	f7ff f914 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 8003640:	61b8      	str	r0, [r7, #24]
        break;
 8003642:	e013      	b.n	800366c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003644:	f7ff f924 	bl	8002890 <HAL_RCC_GetPCLK2Freq>
 8003648:	61b8      	str	r0, [r7, #24]
        break;
 800364a:	e00f      	b.n	800366c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800364c:	4b4b      	ldr	r3, [pc, #300]	@ (800377c <UART_SetConfig+0x4c4>)
 800364e:	61bb      	str	r3, [r7, #24]
        break;
 8003650:	e00c      	b.n	800366c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003652:	f7ff f837 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8003656:	61b8      	str	r0, [r7, #24]
        break;
 8003658:	e008      	b.n	800366c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800365a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800365e:	61bb      	str	r3, [r7, #24]
        break;
 8003660:	e004      	b.n	800366c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	77bb      	strb	r3, [r7, #30]
        break;
 800366a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d074      	beq.n	800375c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	005a      	lsls	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	441a      	add	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b0f      	cmp	r3, #15
 800368c:	d916      	bls.n	80036bc <UART_SetConfig+0x404>
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003694:	d212      	bcs.n	80036bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	b29b      	uxth	r3, r3
 800369a:	f023 030f 	bic.w	r3, r3, #15
 800369e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	89fb      	ldrh	r3, [r7, #14]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	89fa      	ldrh	r2, [r7, #14]
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	e04f      	b.n	800375c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	77bb      	strb	r3, [r7, #30]
 80036c0:	e04c      	b.n	800375c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036c2:	7ffb      	ldrb	r3, [r7, #31]
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d828      	bhi.n	800371a <UART_SetConfig+0x462>
 80036c8:	a201      	add	r2, pc, #4	@ (adr r2, 80036d0 <UART_SetConfig+0x418>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	080036fd 	.word	0x080036fd
 80036d8:	08003705 	.word	0x08003705
 80036dc:	0800371b 	.word	0x0800371b
 80036e0:	0800370b 	.word	0x0800370b
 80036e4:	0800371b 	.word	0x0800371b
 80036e8:	0800371b 	.word	0x0800371b
 80036ec:	0800371b 	.word	0x0800371b
 80036f0:	08003713 	.word	0x08003713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f4:	f7ff f8b8 	bl	8002868 <HAL_RCC_GetPCLK1Freq>
 80036f8:	61b8      	str	r0, [r7, #24]
        break;
 80036fa:	e013      	b.n	8003724 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036fc:	f7ff f8c8 	bl	8002890 <HAL_RCC_GetPCLK2Freq>
 8003700:	61b8      	str	r0, [r7, #24]
        break;
 8003702:	e00f      	b.n	8003724 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003704:	4b1d      	ldr	r3, [pc, #116]	@ (800377c <UART_SetConfig+0x4c4>)
 8003706:	61bb      	str	r3, [r7, #24]
        break;
 8003708:	e00c      	b.n	8003724 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370a:	f7fe ffdb 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 800370e:	61b8      	str	r0, [r7, #24]
        break;
 8003710:	e008      	b.n	8003724 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003716:	61bb      	str	r3, [r7, #24]
        break;
 8003718:	e004      	b.n	8003724 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	77bb      	strb	r3, [r7, #30]
        break;
 8003722:	bf00      	nop
    }

    if (pclk != 0U)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d018      	beq.n	800375c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	085a      	lsrs	r2, r3, #1
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	441a      	add	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b0f      	cmp	r3, #15
 8003742:	d909      	bls.n	8003758 <UART_SetConfig+0x4a0>
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374a:	d205      	bcs.n	8003758 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	e001      	b.n	800375c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003768:	7fbb      	ldrb	r3, [r7, #30]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40007c00 	.word	0x40007c00
 8003778:	40023800 	.word	0x40023800
 800377c:	00f42400 	.word	0x00f42400

08003780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01a      	beq.n	8003896 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800387e:	d10a      	bne.n	8003896 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	605a      	str	r2, [r3, #4]
  }
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b098      	sub	sp, #96	@ 0x60
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038d4:	f7fd fbbe 	bl	8001054 <HAL_GetTick>
 80038d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d12e      	bne.n	8003946 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f0:	2200      	movs	r2, #0
 80038f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f88c 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d021      	beq.n	8003946 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003916:	653b      	str	r3, [r7, #80]	@ 0x50
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003920:	647b      	str	r3, [r7, #68]	@ 0x44
 8003922:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800392e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e6      	bne.n	8003902 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e062      	b.n	8003a0c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b04      	cmp	r3, #4
 8003952:	d149      	bne.n	80039e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003954:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395c:	2200      	movs	r2, #0
 800395e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f856 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d03c      	beq.n	80039e8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	623b      	str	r3, [r7, #32]
   return(result);
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800398c:	633b      	str	r3, [r7, #48]	@ 0x30
 800398e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800399a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e6      	bne.n	800396e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3308      	adds	r3, #8
 80039a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	e853 3f00 	ldrex	r3, [r3]
 80039ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3308      	adds	r3, #8
 80039be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039c0:	61fa      	str	r2, [r7, #28]
 80039c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c4:	69b9      	ldr	r1, [r7, #24]
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	617b      	str	r3, [r7, #20]
   return(result);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e5      	bne.n	80039a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e011      	b.n	8003a0c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3758      	adds	r7, #88	@ 0x58
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a24:	e04f      	b.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a2c:	d04b      	beq.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2e:	f7fd fb11 	bl	8001054 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e04e      	b.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d037      	beq.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b80      	cmp	r3, #128	@ 0x80
 8003a5a:	d034      	beq.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b40      	cmp	r3, #64	@ 0x40
 8003a60:	d031      	beq.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d110      	bne.n	8003a92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2208      	movs	r2, #8
 8003a76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f838 	bl	8003aee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2208      	movs	r2, #8
 8003a82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e029      	b.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aa0:	d111      	bne.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003aaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f81e 	bl	8003aee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e00f      	b.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d0a0      	beq.n	8003a26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b095      	sub	sp, #84	@ 0x54
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afe:	e853 3f00 	ldrex	r3, [r3]
 8003b02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b14:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e6      	bne.n	8003af6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f023 0301 	bic.w	r3, r3, #1
 8003b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3308      	adds	r3, #8
 8003b46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e5      	bne.n	8003b28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d118      	bne.n	8003b96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f023 0310 	bic.w	r3, r3, #16
 8003b78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b82:	61bb      	str	r3, [r7, #24]
 8003b84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6979      	ldr	r1, [r7, #20]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e6      	bne.n	8003b64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003baa:	bf00      	nop
 8003bac:	3754      	adds	r7, #84	@ 0x54
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <__cvt>:
 8003bb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb8:	ed2d 8b02 	vpush	{d8}
 8003bbc:	eeb0 8b40 	vmov.f64	d8, d0
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	4617      	mov	r7, r2
 8003bc4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8003bc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bc8:	ee18 2a90 	vmov	r2, s17
 8003bcc:	f025 0520 	bic.w	r5, r5, #32
 8003bd0:	2a00      	cmp	r2, #0
 8003bd2:	bfb6      	itet	lt
 8003bd4:	222d      	movlt	r2, #45	@ 0x2d
 8003bd6:	2200      	movge	r2, #0
 8003bd8:	eeb1 8b40 	vneglt.f64	d8, d0
 8003bdc:	2d46      	cmp	r5, #70	@ 0x46
 8003bde:	460c      	mov	r4, r1
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	d004      	beq.n	8003bee <__cvt+0x38>
 8003be4:	2d45      	cmp	r5, #69	@ 0x45
 8003be6:	d100      	bne.n	8003bea <__cvt+0x34>
 8003be8:	3401      	adds	r4, #1
 8003bea:	2102      	movs	r1, #2
 8003bec:	e000      	b.n	8003bf0 <__cvt+0x3a>
 8003bee:	2103      	movs	r1, #3
 8003bf0:	ab03      	add	r3, sp, #12
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	ab02      	add	r3, sp, #8
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	4622      	mov	r2, r4
 8003bfa:	4633      	mov	r3, r6
 8003bfc:	eeb0 0b48 	vmov.f64	d0, d8
 8003c00:	f000 fdb6 	bl	8004770 <_dtoa_r>
 8003c04:	2d47      	cmp	r5, #71	@ 0x47
 8003c06:	d114      	bne.n	8003c32 <__cvt+0x7c>
 8003c08:	07fb      	lsls	r3, r7, #31
 8003c0a:	d50a      	bpl.n	8003c22 <__cvt+0x6c>
 8003c0c:	1902      	adds	r2, r0, r4
 8003c0e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c16:	bf08      	it	eq
 8003c18:	9203      	streq	r2, [sp, #12]
 8003c1a:	2130      	movs	r1, #48	@ 0x30
 8003c1c:	9b03      	ldr	r3, [sp, #12]
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d319      	bcc.n	8003c56 <__cvt+0xa0>
 8003c22:	9b03      	ldr	r3, [sp, #12]
 8003c24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003c26:	1a1b      	subs	r3, r3, r0
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	b005      	add	sp, #20
 8003c2c:	ecbd 8b02 	vpop	{d8}
 8003c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c32:	2d46      	cmp	r5, #70	@ 0x46
 8003c34:	eb00 0204 	add.w	r2, r0, r4
 8003c38:	d1e9      	bne.n	8003c0e <__cvt+0x58>
 8003c3a:	7803      	ldrb	r3, [r0, #0]
 8003c3c:	2b30      	cmp	r3, #48	@ 0x30
 8003c3e:	d107      	bne.n	8003c50 <__cvt+0x9a>
 8003c40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c48:	bf1c      	itt	ne
 8003c4a:	f1c4 0401 	rsbne	r4, r4, #1
 8003c4e:	6034      	strne	r4, [r6, #0]
 8003c50:	6833      	ldr	r3, [r6, #0]
 8003c52:	441a      	add	r2, r3
 8003c54:	e7db      	b.n	8003c0e <__cvt+0x58>
 8003c56:	1c5c      	adds	r4, r3, #1
 8003c58:	9403      	str	r4, [sp, #12]
 8003c5a:	7019      	strb	r1, [r3, #0]
 8003c5c:	e7de      	b.n	8003c1c <__cvt+0x66>

08003c5e <__exponent>:
 8003c5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c60:	2900      	cmp	r1, #0
 8003c62:	bfba      	itte	lt
 8003c64:	4249      	neglt	r1, r1
 8003c66:	232d      	movlt	r3, #45	@ 0x2d
 8003c68:	232b      	movge	r3, #43	@ 0x2b
 8003c6a:	2909      	cmp	r1, #9
 8003c6c:	7002      	strb	r2, [r0, #0]
 8003c6e:	7043      	strb	r3, [r0, #1]
 8003c70:	dd29      	ble.n	8003cc6 <__exponent+0x68>
 8003c72:	f10d 0307 	add.w	r3, sp, #7
 8003c76:	461d      	mov	r5, r3
 8003c78:	270a      	movs	r7, #10
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003c80:	fb07 1416 	mls	r4, r7, r6, r1
 8003c84:	3430      	adds	r4, #48	@ 0x30
 8003c86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	2c63      	cmp	r4, #99	@ 0x63
 8003c8e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003c92:	4631      	mov	r1, r6
 8003c94:	dcf1      	bgt.n	8003c7a <__exponent+0x1c>
 8003c96:	3130      	adds	r1, #48	@ 0x30
 8003c98:	1e94      	subs	r4, r2, #2
 8003c9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c9e:	1c41      	adds	r1, r0, #1
 8003ca0:	4623      	mov	r3, r4
 8003ca2:	42ab      	cmp	r3, r5
 8003ca4:	d30a      	bcc.n	8003cbc <__exponent+0x5e>
 8003ca6:	f10d 0309 	add.w	r3, sp, #9
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	42ac      	cmp	r4, r5
 8003cae:	bf88      	it	hi
 8003cb0:	2300      	movhi	r3, #0
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	4403      	add	r3, r0
 8003cb6:	1a18      	subs	r0, r3, r0
 8003cb8:	b003      	add	sp, #12
 8003cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003cc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003cc4:	e7ed      	b.n	8003ca2 <__exponent+0x44>
 8003cc6:	2330      	movs	r3, #48	@ 0x30
 8003cc8:	3130      	adds	r1, #48	@ 0x30
 8003cca:	7083      	strb	r3, [r0, #2]
 8003ccc:	70c1      	strb	r1, [r0, #3]
 8003cce:	1d03      	adds	r3, r0, #4
 8003cd0:	e7f1      	b.n	8003cb6 <__exponent+0x58>
 8003cd2:	0000      	movs	r0, r0
 8003cd4:	0000      	movs	r0, r0
	...

08003cd8 <_printf_float>:
 8003cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cdc:	b08d      	sub	sp, #52	@ 0x34
 8003cde:	460c      	mov	r4, r1
 8003ce0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003ce4:	4616      	mov	r6, r2
 8003ce6:	461f      	mov	r7, r3
 8003ce8:	4605      	mov	r5, r0
 8003cea:	f000 fc87 	bl	80045fc <_localeconv_r>
 8003cee:	f8d0 b000 	ldr.w	fp, [r0]
 8003cf2:	4658      	mov	r0, fp
 8003cf4:	f7fc faf4 	bl	80002e0 <strlen>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8003cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8003d00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003d04:	6822      	ldr	r2, [r4, #0]
 8003d06:	9005      	str	r0, [sp, #20]
 8003d08:	3307      	adds	r3, #7
 8003d0a:	f023 0307 	bic.w	r3, r3, #7
 8003d0e:	f103 0108 	add.w	r1, r3, #8
 8003d12:	f8c8 1000 	str.w	r1, [r8]
 8003d16:	ed93 0b00 	vldr	d0, [r3]
 8003d1a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8003f78 <_printf_float+0x2a0>
 8003d1e:	eeb0 7bc0 	vabs.f64	d7, d0
 8003d22:	eeb4 7b46 	vcmp.f64	d7, d6
 8003d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8003d2e:	dd24      	ble.n	8003d7a <_printf_float+0xa2>
 8003d30:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d38:	d502      	bpl.n	8003d40 <_printf_float+0x68>
 8003d3a:	232d      	movs	r3, #45	@ 0x2d
 8003d3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d40:	498f      	ldr	r1, [pc, #572]	@ (8003f80 <_printf_float+0x2a8>)
 8003d42:	4b90      	ldr	r3, [pc, #576]	@ (8003f84 <_printf_float+0x2ac>)
 8003d44:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8003d48:	bf94      	ite	ls
 8003d4a:	4688      	movls	r8, r1
 8003d4c:	4698      	movhi	r8, r3
 8003d4e:	f022 0204 	bic.w	r2, r2, #4
 8003d52:	2303      	movs	r3, #3
 8003d54:	6123      	str	r3, [r4, #16]
 8003d56:	6022      	str	r2, [r4, #0]
 8003d58:	f04f 0a00 	mov.w	sl, #0
 8003d5c:	9700      	str	r7, [sp, #0]
 8003d5e:	4633      	mov	r3, r6
 8003d60:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003d62:	4621      	mov	r1, r4
 8003d64:	4628      	mov	r0, r5
 8003d66:	f000 f9d1 	bl	800410c <_printf_common>
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	f040 8089 	bne.w	8003e82 <_printf_float+0x1aa>
 8003d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d74:	b00d      	add	sp, #52	@ 0x34
 8003d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d7a:	eeb4 0b40 	vcmp.f64	d0, d0
 8003d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d82:	d709      	bvc.n	8003d98 <_printf_float+0xc0>
 8003d84:	ee10 3a90 	vmov	r3, s1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bfbc      	itt	lt
 8003d8c:	232d      	movlt	r3, #45	@ 0x2d
 8003d8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003d92:	497d      	ldr	r1, [pc, #500]	@ (8003f88 <_printf_float+0x2b0>)
 8003d94:	4b7d      	ldr	r3, [pc, #500]	@ (8003f8c <_printf_float+0x2b4>)
 8003d96:	e7d5      	b.n	8003d44 <_printf_float+0x6c>
 8003d98:	6863      	ldr	r3, [r4, #4]
 8003d9a:	1c59      	adds	r1, r3, #1
 8003d9c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8003da0:	d139      	bne.n	8003e16 <_printf_float+0x13e>
 8003da2:	2306      	movs	r3, #6
 8003da4:	6063      	str	r3, [r4, #4]
 8003da6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003daa:	2300      	movs	r3, #0
 8003dac:	6022      	str	r2, [r4, #0]
 8003dae:	9303      	str	r3, [sp, #12]
 8003db0:	ab0a      	add	r3, sp, #40	@ 0x28
 8003db2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8003db6:	ab09      	add	r3, sp, #36	@ 0x24
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	6861      	ldr	r1, [r4, #4]
 8003dbc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	f7ff fef8 	bl	8003bb6 <__cvt>
 8003dc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003dca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003dcc:	4680      	mov	r8, r0
 8003dce:	d129      	bne.n	8003e24 <_printf_float+0x14c>
 8003dd0:	1cc8      	adds	r0, r1, #3
 8003dd2:	db02      	blt.n	8003dda <_printf_float+0x102>
 8003dd4:	6863      	ldr	r3, [r4, #4]
 8003dd6:	4299      	cmp	r1, r3
 8003dd8:	dd41      	ble.n	8003e5e <_printf_float+0x186>
 8003dda:	f1a9 0902 	sub.w	r9, r9, #2
 8003dde:	fa5f f989 	uxtb.w	r9, r9
 8003de2:	3901      	subs	r1, #1
 8003de4:	464a      	mov	r2, r9
 8003de6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003dea:	9109      	str	r1, [sp, #36]	@ 0x24
 8003dec:	f7ff ff37 	bl	8003c5e <__exponent>
 8003df0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003df2:	1813      	adds	r3, r2, r0
 8003df4:	2a01      	cmp	r2, #1
 8003df6:	4682      	mov	sl, r0
 8003df8:	6123      	str	r3, [r4, #16]
 8003dfa:	dc02      	bgt.n	8003e02 <_printf_float+0x12a>
 8003dfc:	6822      	ldr	r2, [r4, #0]
 8003dfe:	07d2      	lsls	r2, r2, #31
 8003e00:	d501      	bpl.n	8003e06 <_printf_float+0x12e>
 8003e02:	3301      	adds	r3, #1
 8003e04:	6123      	str	r3, [r4, #16]
 8003e06:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0a6      	beq.n	8003d5c <_printf_float+0x84>
 8003e0e:	232d      	movs	r3, #45	@ 0x2d
 8003e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e14:	e7a2      	b.n	8003d5c <_printf_float+0x84>
 8003e16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003e1a:	d1c4      	bne.n	8003da6 <_printf_float+0xce>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1c2      	bne.n	8003da6 <_printf_float+0xce>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e7bf      	b.n	8003da4 <_printf_float+0xcc>
 8003e24:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8003e28:	d9db      	bls.n	8003de2 <_printf_float+0x10a>
 8003e2a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8003e2e:	d118      	bne.n	8003e62 <_printf_float+0x18a>
 8003e30:	2900      	cmp	r1, #0
 8003e32:	6863      	ldr	r3, [r4, #4]
 8003e34:	dd0b      	ble.n	8003e4e <_printf_float+0x176>
 8003e36:	6121      	str	r1, [r4, #16]
 8003e38:	b913      	cbnz	r3, 8003e40 <_printf_float+0x168>
 8003e3a:	6822      	ldr	r2, [r4, #0]
 8003e3c:	07d0      	lsls	r0, r2, #31
 8003e3e:	d502      	bpl.n	8003e46 <_printf_float+0x16e>
 8003e40:	3301      	adds	r3, #1
 8003e42:	440b      	add	r3, r1
 8003e44:	6123      	str	r3, [r4, #16]
 8003e46:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003e48:	f04f 0a00 	mov.w	sl, #0
 8003e4c:	e7db      	b.n	8003e06 <_printf_float+0x12e>
 8003e4e:	b913      	cbnz	r3, 8003e56 <_printf_float+0x17e>
 8003e50:	6822      	ldr	r2, [r4, #0]
 8003e52:	07d2      	lsls	r2, r2, #31
 8003e54:	d501      	bpl.n	8003e5a <_printf_float+0x182>
 8003e56:	3302      	adds	r3, #2
 8003e58:	e7f4      	b.n	8003e44 <_printf_float+0x16c>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e7f2      	b.n	8003e44 <_printf_float+0x16c>
 8003e5e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8003e62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e64:	4299      	cmp	r1, r3
 8003e66:	db05      	blt.n	8003e74 <_printf_float+0x19c>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	6121      	str	r1, [r4, #16]
 8003e6c:	07d8      	lsls	r0, r3, #31
 8003e6e:	d5ea      	bpl.n	8003e46 <_printf_float+0x16e>
 8003e70:	1c4b      	adds	r3, r1, #1
 8003e72:	e7e7      	b.n	8003e44 <_printf_float+0x16c>
 8003e74:	2900      	cmp	r1, #0
 8003e76:	bfd4      	ite	le
 8003e78:	f1c1 0202 	rsble	r2, r1, #2
 8003e7c:	2201      	movgt	r2, #1
 8003e7e:	4413      	add	r3, r2
 8003e80:	e7e0      	b.n	8003e44 <_printf_float+0x16c>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	055a      	lsls	r2, r3, #21
 8003e86:	d407      	bmi.n	8003e98 <_printf_float+0x1c0>
 8003e88:	6923      	ldr	r3, [r4, #16]
 8003e8a:	4642      	mov	r2, r8
 8003e8c:	4631      	mov	r1, r6
 8003e8e:	4628      	mov	r0, r5
 8003e90:	47b8      	blx	r7
 8003e92:	3001      	adds	r0, #1
 8003e94:	d12a      	bne.n	8003eec <_printf_float+0x214>
 8003e96:	e76b      	b.n	8003d70 <_printf_float+0x98>
 8003e98:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8003e9c:	f240 80e0 	bls.w	8004060 <_printf_float+0x388>
 8003ea0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8003ea4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eac:	d133      	bne.n	8003f16 <_printf_float+0x23e>
 8003eae:	4a38      	ldr	r2, [pc, #224]	@ (8003f90 <_printf_float+0x2b8>)
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	4631      	mov	r1, r6
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	47b8      	blx	r7
 8003eb8:	3001      	adds	r0, #1
 8003eba:	f43f af59 	beq.w	8003d70 <_printf_float+0x98>
 8003ebe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003ec2:	4543      	cmp	r3, r8
 8003ec4:	db02      	blt.n	8003ecc <_printf_float+0x1f4>
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	07d8      	lsls	r0, r3, #31
 8003eca:	d50f      	bpl.n	8003eec <_printf_float+0x214>
 8003ecc:	9b05      	ldr	r3, [sp, #20]
 8003ece:	465a      	mov	r2, fp
 8003ed0:	4631      	mov	r1, r6
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	47b8      	blx	r7
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	f43f af4a 	beq.w	8003d70 <_printf_float+0x98>
 8003edc:	f04f 0900 	mov.w	r9, #0
 8003ee0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003ee4:	f104 0a1a 	add.w	sl, r4, #26
 8003ee8:	45c8      	cmp	r8, r9
 8003eea:	dc09      	bgt.n	8003f00 <_printf_float+0x228>
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	079b      	lsls	r3, r3, #30
 8003ef0:	f100 8107 	bmi.w	8004102 <_printf_float+0x42a>
 8003ef4:	68e0      	ldr	r0, [r4, #12]
 8003ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ef8:	4298      	cmp	r0, r3
 8003efa:	bfb8      	it	lt
 8003efc:	4618      	movlt	r0, r3
 8003efe:	e739      	b.n	8003d74 <_printf_float+0x9c>
 8003f00:	2301      	movs	r3, #1
 8003f02:	4652      	mov	r2, sl
 8003f04:	4631      	mov	r1, r6
 8003f06:	4628      	mov	r0, r5
 8003f08:	47b8      	blx	r7
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	f43f af30 	beq.w	8003d70 <_printf_float+0x98>
 8003f10:	f109 0901 	add.w	r9, r9, #1
 8003f14:	e7e8      	b.n	8003ee8 <_printf_float+0x210>
 8003f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	dc3b      	bgt.n	8003f94 <_printf_float+0x2bc>
 8003f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003f90 <_printf_float+0x2b8>)
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4631      	mov	r1, r6
 8003f22:	4628      	mov	r0, r5
 8003f24:	47b8      	blx	r7
 8003f26:	3001      	adds	r0, #1
 8003f28:	f43f af22 	beq.w	8003d70 <_printf_float+0x98>
 8003f2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003f30:	ea59 0303 	orrs.w	r3, r9, r3
 8003f34:	d102      	bne.n	8003f3c <_printf_float+0x264>
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	07d9      	lsls	r1, r3, #31
 8003f3a:	d5d7      	bpl.n	8003eec <_printf_float+0x214>
 8003f3c:	9b05      	ldr	r3, [sp, #20]
 8003f3e:	465a      	mov	r2, fp
 8003f40:	4631      	mov	r1, r6
 8003f42:	4628      	mov	r0, r5
 8003f44:	47b8      	blx	r7
 8003f46:	3001      	adds	r0, #1
 8003f48:	f43f af12 	beq.w	8003d70 <_printf_float+0x98>
 8003f4c:	f04f 0a00 	mov.w	sl, #0
 8003f50:	f104 0b1a 	add.w	fp, r4, #26
 8003f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f56:	425b      	negs	r3, r3
 8003f58:	4553      	cmp	r3, sl
 8003f5a:	dc01      	bgt.n	8003f60 <_printf_float+0x288>
 8003f5c:	464b      	mov	r3, r9
 8003f5e:	e794      	b.n	8003e8a <_printf_float+0x1b2>
 8003f60:	2301      	movs	r3, #1
 8003f62:	465a      	mov	r2, fp
 8003f64:	4631      	mov	r1, r6
 8003f66:	4628      	mov	r0, r5
 8003f68:	47b8      	blx	r7
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	f43f af00 	beq.w	8003d70 <_printf_float+0x98>
 8003f70:	f10a 0a01 	add.w	sl, sl, #1
 8003f74:	e7ee      	b.n	8003f54 <_printf_float+0x27c>
 8003f76:	bf00      	nop
 8003f78:	ffffffff 	.word	0xffffffff
 8003f7c:	7fefffff 	.word	0x7fefffff
 8003f80:	08006790 	.word	0x08006790
 8003f84:	08006794 	.word	0x08006794
 8003f88:	08006798 	.word	0x08006798
 8003f8c:	0800679c 	.word	0x0800679c
 8003f90:	080067a0 	.word	0x080067a0
 8003f94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003f9a:	4553      	cmp	r3, sl
 8003f9c:	bfa8      	it	ge
 8003f9e:	4653      	movge	r3, sl
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	4699      	mov	r9, r3
 8003fa4:	dc37      	bgt.n	8004016 <_printf_float+0x33e>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9307      	str	r3, [sp, #28]
 8003faa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fae:	f104 021a 	add.w	r2, r4, #26
 8003fb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fb4:	9907      	ldr	r1, [sp, #28]
 8003fb6:	9306      	str	r3, [sp, #24]
 8003fb8:	eba3 0309 	sub.w	r3, r3, r9
 8003fbc:	428b      	cmp	r3, r1
 8003fbe:	dc31      	bgt.n	8004024 <_printf_float+0x34c>
 8003fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fc2:	459a      	cmp	sl, r3
 8003fc4:	dc3b      	bgt.n	800403e <_printf_float+0x366>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	07da      	lsls	r2, r3, #31
 8003fca:	d438      	bmi.n	800403e <_printf_float+0x366>
 8003fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fce:	ebaa 0903 	sub.w	r9, sl, r3
 8003fd2:	9b06      	ldr	r3, [sp, #24]
 8003fd4:	ebaa 0303 	sub.w	r3, sl, r3
 8003fd8:	4599      	cmp	r9, r3
 8003fda:	bfa8      	it	ge
 8003fdc:	4699      	movge	r9, r3
 8003fde:	f1b9 0f00 	cmp.w	r9, #0
 8003fe2:	dc34      	bgt.n	800404e <_printf_float+0x376>
 8003fe4:	f04f 0800 	mov.w	r8, #0
 8003fe8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fec:	f104 0b1a 	add.w	fp, r4, #26
 8003ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ff2:	ebaa 0303 	sub.w	r3, sl, r3
 8003ff6:	eba3 0309 	sub.w	r3, r3, r9
 8003ffa:	4543      	cmp	r3, r8
 8003ffc:	f77f af76 	ble.w	8003eec <_printf_float+0x214>
 8004000:	2301      	movs	r3, #1
 8004002:	465a      	mov	r2, fp
 8004004:	4631      	mov	r1, r6
 8004006:	4628      	mov	r0, r5
 8004008:	47b8      	blx	r7
 800400a:	3001      	adds	r0, #1
 800400c:	f43f aeb0 	beq.w	8003d70 <_printf_float+0x98>
 8004010:	f108 0801 	add.w	r8, r8, #1
 8004014:	e7ec      	b.n	8003ff0 <_printf_float+0x318>
 8004016:	4642      	mov	r2, r8
 8004018:	4631      	mov	r1, r6
 800401a:	4628      	mov	r0, r5
 800401c:	47b8      	blx	r7
 800401e:	3001      	adds	r0, #1
 8004020:	d1c1      	bne.n	8003fa6 <_printf_float+0x2ce>
 8004022:	e6a5      	b.n	8003d70 <_printf_float+0x98>
 8004024:	2301      	movs	r3, #1
 8004026:	4631      	mov	r1, r6
 8004028:	4628      	mov	r0, r5
 800402a:	9206      	str	r2, [sp, #24]
 800402c:	47b8      	blx	r7
 800402e:	3001      	adds	r0, #1
 8004030:	f43f ae9e 	beq.w	8003d70 <_printf_float+0x98>
 8004034:	9b07      	ldr	r3, [sp, #28]
 8004036:	9a06      	ldr	r2, [sp, #24]
 8004038:	3301      	adds	r3, #1
 800403a:	9307      	str	r3, [sp, #28]
 800403c:	e7b9      	b.n	8003fb2 <_printf_float+0x2da>
 800403e:	9b05      	ldr	r3, [sp, #20]
 8004040:	465a      	mov	r2, fp
 8004042:	4631      	mov	r1, r6
 8004044:	4628      	mov	r0, r5
 8004046:	47b8      	blx	r7
 8004048:	3001      	adds	r0, #1
 800404a:	d1bf      	bne.n	8003fcc <_printf_float+0x2f4>
 800404c:	e690      	b.n	8003d70 <_printf_float+0x98>
 800404e:	9a06      	ldr	r2, [sp, #24]
 8004050:	464b      	mov	r3, r9
 8004052:	4442      	add	r2, r8
 8004054:	4631      	mov	r1, r6
 8004056:	4628      	mov	r0, r5
 8004058:	47b8      	blx	r7
 800405a:	3001      	adds	r0, #1
 800405c:	d1c2      	bne.n	8003fe4 <_printf_float+0x30c>
 800405e:	e687      	b.n	8003d70 <_printf_float+0x98>
 8004060:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8004064:	f1b9 0f01 	cmp.w	r9, #1
 8004068:	dc01      	bgt.n	800406e <_printf_float+0x396>
 800406a:	07db      	lsls	r3, r3, #31
 800406c:	d536      	bpl.n	80040dc <_printf_float+0x404>
 800406e:	2301      	movs	r3, #1
 8004070:	4642      	mov	r2, r8
 8004072:	4631      	mov	r1, r6
 8004074:	4628      	mov	r0, r5
 8004076:	47b8      	blx	r7
 8004078:	3001      	adds	r0, #1
 800407a:	f43f ae79 	beq.w	8003d70 <_printf_float+0x98>
 800407e:	9b05      	ldr	r3, [sp, #20]
 8004080:	465a      	mov	r2, fp
 8004082:	4631      	mov	r1, r6
 8004084:	4628      	mov	r0, r5
 8004086:	47b8      	blx	r7
 8004088:	3001      	adds	r0, #1
 800408a:	f43f ae71 	beq.w	8003d70 <_printf_float+0x98>
 800408e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004092:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800409e:	d018      	beq.n	80040d2 <_printf_float+0x3fa>
 80040a0:	464b      	mov	r3, r9
 80040a2:	f108 0201 	add.w	r2, r8, #1
 80040a6:	4631      	mov	r1, r6
 80040a8:	4628      	mov	r0, r5
 80040aa:	47b8      	blx	r7
 80040ac:	3001      	adds	r0, #1
 80040ae:	d10c      	bne.n	80040ca <_printf_float+0x3f2>
 80040b0:	e65e      	b.n	8003d70 <_printf_float+0x98>
 80040b2:	2301      	movs	r3, #1
 80040b4:	465a      	mov	r2, fp
 80040b6:	4631      	mov	r1, r6
 80040b8:	4628      	mov	r0, r5
 80040ba:	47b8      	blx	r7
 80040bc:	3001      	adds	r0, #1
 80040be:	f43f ae57 	beq.w	8003d70 <_printf_float+0x98>
 80040c2:	f108 0801 	add.w	r8, r8, #1
 80040c6:	45c8      	cmp	r8, r9
 80040c8:	dbf3      	blt.n	80040b2 <_printf_float+0x3da>
 80040ca:	4653      	mov	r3, sl
 80040cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80040d0:	e6dc      	b.n	8003e8c <_printf_float+0x1b4>
 80040d2:	f04f 0800 	mov.w	r8, #0
 80040d6:	f104 0b1a 	add.w	fp, r4, #26
 80040da:	e7f4      	b.n	80040c6 <_printf_float+0x3ee>
 80040dc:	2301      	movs	r3, #1
 80040de:	4642      	mov	r2, r8
 80040e0:	e7e1      	b.n	80040a6 <_printf_float+0x3ce>
 80040e2:	2301      	movs	r3, #1
 80040e4:	464a      	mov	r2, r9
 80040e6:	4631      	mov	r1, r6
 80040e8:	4628      	mov	r0, r5
 80040ea:	47b8      	blx	r7
 80040ec:	3001      	adds	r0, #1
 80040ee:	f43f ae3f 	beq.w	8003d70 <_printf_float+0x98>
 80040f2:	f108 0801 	add.w	r8, r8, #1
 80040f6:	68e3      	ldr	r3, [r4, #12]
 80040f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80040fa:	1a5b      	subs	r3, r3, r1
 80040fc:	4543      	cmp	r3, r8
 80040fe:	dcf0      	bgt.n	80040e2 <_printf_float+0x40a>
 8004100:	e6f8      	b.n	8003ef4 <_printf_float+0x21c>
 8004102:	f04f 0800 	mov.w	r8, #0
 8004106:	f104 0919 	add.w	r9, r4, #25
 800410a:	e7f4      	b.n	80040f6 <_printf_float+0x41e>

0800410c <_printf_common>:
 800410c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004110:	4616      	mov	r6, r2
 8004112:	4698      	mov	r8, r3
 8004114:	688a      	ldr	r2, [r1, #8]
 8004116:	690b      	ldr	r3, [r1, #16]
 8004118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800411c:	4293      	cmp	r3, r2
 800411e:	bfb8      	it	lt
 8004120:	4613      	movlt	r3, r2
 8004122:	6033      	str	r3, [r6, #0]
 8004124:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004128:	4607      	mov	r7, r0
 800412a:	460c      	mov	r4, r1
 800412c:	b10a      	cbz	r2, 8004132 <_printf_common+0x26>
 800412e:	3301      	adds	r3, #1
 8004130:	6033      	str	r3, [r6, #0]
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	0699      	lsls	r1, r3, #26
 8004136:	bf42      	ittt	mi
 8004138:	6833      	ldrmi	r3, [r6, #0]
 800413a:	3302      	addmi	r3, #2
 800413c:	6033      	strmi	r3, [r6, #0]
 800413e:	6825      	ldr	r5, [r4, #0]
 8004140:	f015 0506 	ands.w	r5, r5, #6
 8004144:	d106      	bne.n	8004154 <_printf_common+0x48>
 8004146:	f104 0a19 	add.w	sl, r4, #25
 800414a:	68e3      	ldr	r3, [r4, #12]
 800414c:	6832      	ldr	r2, [r6, #0]
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	42ab      	cmp	r3, r5
 8004152:	dc26      	bgt.n	80041a2 <_printf_common+0x96>
 8004154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004158:	6822      	ldr	r2, [r4, #0]
 800415a:	3b00      	subs	r3, #0
 800415c:	bf18      	it	ne
 800415e:	2301      	movne	r3, #1
 8004160:	0692      	lsls	r2, r2, #26
 8004162:	d42b      	bmi.n	80041bc <_printf_common+0xb0>
 8004164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004168:	4641      	mov	r1, r8
 800416a:	4638      	mov	r0, r7
 800416c:	47c8      	blx	r9
 800416e:	3001      	adds	r0, #1
 8004170:	d01e      	beq.n	80041b0 <_printf_common+0xa4>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	6922      	ldr	r2, [r4, #16]
 8004176:	f003 0306 	and.w	r3, r3, #6
 800417a:	2b04      	cmp	r3, #4
 800417c:	bf02      	ittt	eq
 800417e:	68e5      	ldreq	r5, [r4, #12]
 8004180:	6833      	ldreq	r3, [r6, #0]
 8004182:	1aed      	subeq	r5, r5, r3
 8004184:	68a3      	ldr	r3, [r4, #8]
 8004186:	bf0c      	ite	eq
 8004188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800418c:	2500      	movne	r5, #0
 800418e:	4293      	cmp	r3, r2
 8004190:	bfc4      	itt	gt
 8004192:	1a9b      	subgt	r3, r3, r2
 8004194:	18ed      	addgt	r5, r5, r3
 8004196:	2600      	movs	r6, #0
 8004198:	341a      	adds	r4, #26
 800419a:	42b5      	cmp	r5, r6
 800419c:	d11a      	bne.n	80041d4 <_printf_common+0xc8>
 800419e:	2000      	movs	r0, #0
 80041a0:	e008      	b.n	80041b4 <_printf_common+0xa8>
 80041a2:	2301      	movs	r3, #1
 80041a4:	4652      	mov	r2, sl
 80041a6:	4641      	mov	r1, r8
 80041a8:	4638      	mov	r0, r7
 80041aa:	47c8      	blx	r9
 80041ac:	3001      	adds	r0, #1
 80041ae:	d103      	bne.n	80041b8 <_printf_common+0xac>
 80041b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b8:	3501      	adds	r5, #1
 80041ba:	e7c6      	b.n	800414a <_printf_common+0x3e>
 80041bc:	18e1      	adds	r1, r4, r3
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	2030      	movs	r0, #48	@ 0x30
 80041c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041c6:	4422      	add	r2, r4
 80041c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041d0:	3302      	adds	r3, #2
 80041d2:	e7c7      	b.n	8004164 <_printf_common+0x58>
 80041d4:	2301      	movs	r3, #1
 80041d6:	4622      	mov	r2, r4
 80041d8:	4641      	mov	r1, r8
 80041da:	4638      	mov	r0, r7
 80041dc:	47c8      	blx	r9
 80041de:	3001      	adds	r0, #1
 80041e0:	d0e6      	beq.n	80041b0 <_printf_common+0xa4>
 80041e2:	3601      	adds	r6, #1
 80041e4:	e7d9      	b.n	800419a <_printf_common+0x8e>
	...

080041e8 <_printf_i>:
 80041e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041ec:	7e0f      	ldrb	r7, [r1, #24]
 80041ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041f0:	2f78      	cmp	r7, #120	@ 0x78
 80041f2:	4691      	mov	r9, r2
 80041f4:	4680      	mov	r8, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	469a      	mov	sl, r3
 80041fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041fe:	d807      	bhi.n	8004210 <_printf_i+0x28>
 8004200:	2f62      	cmp	r7, #98	@ 0x62
 8004202:	d80a      	bhi.n	800421a <_printf_i+0x32>
 8004204:	2f00      	cmp	r7, #0
 8004206:	f000 80d2 	beq.w	80043ae <_printf_i+0x1c6>
 800420a:	2f58      	cmp	r7, #88	@ 0x58
 800420c:	f000 80b9 	beq.w	8004382 <_printf_i+0x19a>
 8004210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004218:	e03a      	b.n	8004290 <_printf_i+0xa8>
 800421a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800421e:	2b15      	cmp	r3, #21
 8004220:	d8f6      	bhi.n	8004210 <_printf_i+0x28>
 8004222:	a101      	add	r1, pc, #4	@ (adr r1, 8004228 <_printf_i+0x40>)
 8004224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004228:	08004281 	.word	0x08004281
 800422c:	08004295 	.word	0x08004295
 8004230:	08004211 	.word	0x08004211
 8004234:	08004211 	.word	0x08004211
 8004238:	08004211 	.word	0x08004211
 800423c:	08004211 	.word	0x08004211
 8004240:	08004295 	.word	0x08004295
 8004244:	08004211 	.word	0x08004211
 8004248:	08004211 	.word	0x08004211
 800424c:	08004211 	.word	0x08004211
 8004250:	08004211 	.word	0x08004211
 8004254:	08004395 	.word	0x08004395
 8004258:	080042bf 	.word	0x080042bf
 800425c:	0800434f 	.word	0x0800434f
 8004260:	08004211 	.word	0x08004211
 8004264:	08004211 	.word	0x08004211
 8004268:	080043b7 	.word	0x080043b7
 800426c:	08004211 	.word	0x08004211
 8004270:	080042bf 	.word	0x080042bf
 8004274:	08004211 	.word	0x08004211
 8004278:	08004211 	.word	0x08004211
 800427c:	08004357 	.word	0x08004357
 8004280:	6833      	ldr	r3, [r6, #0]
 8004282:	1d1a      	adds	r2, r3, #4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6032      	str	r2, [r6, #0]
 8004288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800428c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004290:	2301      	movs	r3, #1
 8004292:	e09d      	b.n	80043d0 <_printf_i+0x1e8>
 8004294:	6833      	ldr	r3, [r6, #0]
 8004296:	6820      	ldr	r0, [r4, #0]
 8004298:	1d19      	adds	r1, r3, #4
 800429a:	6031      	str	r1, [r6, #0]
 800429c:	0606      	lsls	r6, r0, #24
 800429e:	d501      	bpl.n	80042a4 <_printf_i+0xbc>
 80042a0:	681d      	ldr	r5, [r3, #0]
 80042a2:	e003      	b.n	80042ac <_printf_i+0xc4>
 80042a4:	0645      	lsls	r5, r0, #25
 80042a6:	d5fb      	bpl.n	80042a0 <_printf_i+0xb8>
 80042a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	da03      	bge.n	80042b8 <_printf_i+0xd0>
 80042b0:	232d      	movs	r3, #45	@ 0x2d
 80042b2:	426d      	negs	r5, r5
 80042b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042b8:	4859      	ldr	r0, [pc, #356]	@ (8004420 <_printf_i+0x238>)
 80042ba:	230a      	movs	r3, #10
 80042bc:	e011      	b.n	80042e2 <_printf_i+0xfa>
 80042be:	6821      	ldr	r1, [r4, #0]
 80042c0:	6833      	ldr	r3, [r6, #0]
 80042c2:	0608      	lsls	r0, r1, #24
 80042c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80042c8:	d402      	bmi.n	80042d0 <_printf_i+0xe8>
 80042ca:	0649      	lsls	r1, r1, #25
 80042cc:	bf48      	it	mi
 80042ce:	b2ad      	uxthmi	r5, r5
 80042d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80042d2:	4853      	ldr	r0, [pc, #332]	@ (8004420 <_printf_i+0x238>)
 80042d4:	6033      	str	r3, [r6, #0]
 80042d6:	bf14      	ite	ne
 80042d8:	230a      	movne	r3, #10
 80042da:	2308      	moveq	r3, #8
 80042dc:	2100      	movs	r1, #0
 80042de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042e2:	6866      	ldr	r6, [r4, #4]
 80042e4:	60a6      	str	r6, [r4, #8]
 80042e6:	2e00      	cmp	r6, #0
 80042e8:	bfa2      	ittt	ge
 80042ea:	6821      	ldrge	r1, [r4, #0]
 80042ec:	f021 0104 	bicge.w	r1, r1, #4
 80042f0:	6021      	strge	r1, [r4, #0]
 80042f2:	b90d      	cbnz	r5, 80042f8 <_printf_i+0x110>
 80042f4:	2e00      	cmp	r6, #0
 80042f6:	d04b      	beq.n	8004390 <_printf_i+0x1a8>
 80042f8:	4616      	mov	r6, r2
 80042fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80042fe:	fb03 5711 	mls	r7, r3, r1, r5
 8004302:	5dc7      	ldrb	r7, [r0, r7]
 8004304:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004308:	462f      	mov	r7, r5
 800430a:	42bb      	cmp	r3, r7
 800430c:	460d      	mov	r5, r1
 800430e:	d9f4      	bls.n	80042fa <_printf_i+0x112>
 8004310:	2b08      	cmp	r3, #8
 8004312:	d10b      	bne.n	800432c <_printf_i+0x144>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	07df      	lsls	r7, r3, #31
 8004318:	d508      	bpl.n	800432c <_printf_i+0x144>
 800431a:	6923      	ldr	r3, [r4, #16]
 800431c:	6861      	ldr	r1, [r4, #4]
 800431e:	4299      	cmp	r1, r3
 8004320:	bfde      	ittt	le
 8004322:	2330      	movle	r3, #48	@ 0x30
 8004324:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004328:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800432c:	1b92      	subs	r2, r2, r6
 800432e:	6122      	str	r2, [r4, #16]
 8004330:	f8cd a000 	str.w	sl, [sp]
 8004334:	464b      	mov	r3, r9
 8004336:	aa03      	add	r2, sp, #12
 8004338:	4621      	mov	r1, r4
 800433a:	4640      	mov	r0, r8
 800433c:	f7ff fee6 	bl	800410c <_printf_common>
 8004340:	3001      	adds	r0, #1
 8004342:	d14a      	bne.n	80043da <_printf_i+0x1f2>
 8004344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004348:	b004      	add	sp, #16
 800434a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	f043 0320 	orr.w	r3, r3, #32
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	4833      	ldr	r0, [pc, #204]	@ (8004424 <_printf_i+0x23c>)
 8004358:	2778      	movs	r7, #120	@ 0x78
 800435a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	6831      	ldr	r1, [r6, #0]
 8004362:	061f      	lsls	r7, r3, #24
 8004364:	f851 5b04 	ldr.w	r5, [r1], #4
 8004368:	d402      	bmi.n	8004370 <_printf_i+0x188>
 800436a:	065f      	lsls	r7, r3, #25
 800436c:	bf48      	it	mi
 800436e:	b2ad      	uxthmi	r5, r5
 8004370:	6031      	str	r1, [r6, #0]
 8004372:	07d9      	lsls	r1, r3, #31
 8004374:	bf44      	itt	mi
 8004376:	f043 0320 	orrmi.w	r3, r3, #32
 800437a:	6023      	strmi	r3, [r4, #0]
 800437c:	b11d      	cbz	r5, 8004386 <_printf_i+0x19e>
 800437e:	2310      	movs	r3, #16
 8004380:	e7ac      	b.n	80042dc <_printf_i+0xf4>
 8004382:	4827      	ldr	r0, [pc, #156]	@ (8004420 <_printf_i+0x238>)
 8004384:	e7e9      	b.n	800435a <_printf_i+0x172>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	f023 0320 	bic.w	r3, r3, #32
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	e7f6      	b.n	800437e <_printf_i+0x196>
 8004390:	4616      	mov	r6, r2
 8004392:	e7bd      	b.n	8004310 <_printf_i+0x128>
 8004394:	6833      	ldr	r3, [r6, #0]
 8004396:	6825      	ldr	r5, [r4, #0]
 8004398:	6961      	ldr	r1, [r4, #20]
 800439a:	1d18      	adds	r0, r3, #4
 800439c:	6030      	str	r0, [r6, #0]
 800439e:	062e      	lsls	r6, r5, #24
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	d501      	bpl.n	80043a8 <_printf_i+0x1c0>
 80043a4:	6019      	str	r1, [r3, #0]
 80043a6:	e002      	b.n	80043ae <_printf_i+0x1c6>
 80043a8:	0668      	lsls	r0, r5, #25
 80043aa:	d5fb      	bpl.n	80043a4 <_printf_i+0x1bc>
 80043ac:	8019      	strh	r1, [r3, #0]
 80043ae:	2300      	movs	r3, #0
 80043b0:	6123      	str	r3, [r4, #16]
 80043b2:	4616      	mov	r6, r2
 80043b4:	e7bc      	b.n	8004330 <_printf_i+0x148>
 80043b6:	6833      	ldr	r3, [r6, #0]
 80043b8:	1d1a      	adds	r2, r3, #4
 80043ba:	6032      	str	r2, [r6, #0]
 80043bc:	681e      	ldr	r6, [r3, #0]
 80043be:	6862      	ldr	r2, [r4, #4]
 80043c0:	2100      	movs	r1, #0
 80043c2:	4630      	mov	r0, r6
 80043c4:	f7fb ff3c 	bl	8000240 <memchr>
 80043c8:	b108      	cbz	r0, 80043ce <_printf_i+0x1e6>
 80043ca:	1b80      	subs	r0, r0, r6
 80043cc:	6060      	str	r0, [r4, #4]
 80043ce:	6863      	ldr	r3, [r4, #4]
 80043d0:	6123      	str	r3, [r4, #16]
 80043d2:	2300      	movs	r3, #0
 80043d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043d8:	e7aa      	b.n	8004330 <_printf_i+0x148>
 80043da:	6923      	ldr	r3, [r4, #16]
 80043dc:	4632      	mov	r2, r6
 80043de:	4649      	mov	r1, r9
 80043e0:	4640      	mov	r0, r8
 80043e2:	47d0      	blx	sl
 80043e4:	3001      	adds	r0, #1
 80043e6:	d0ad      	beq.n	8004344 <_printf_i+0x15c>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	079b      	lsls	r3, r3, #30
 80043ec:	d413      	bmi.n	8004416 <_printf_i+0x22e>
 80043ee:	68e0      	ldr	r0, [r4, #12]
 80043f0:	9b03      	ldr	r3, [sp, #12]
 80043f2:	4298      	cmp	r0, r3
 80043f4:	bfb8      	it	lt
 80043f6:	4618      	movlt	r0, r3
 80043f8:	e7a6      	b.n	8004348 <_printf_i+0x160>
 80043fa:	2301      	movs	r3, #1
 80043fc:	4632      	mov	r2, r6
 80043fe:	4649      	mov	r1, r9
 8004400:	4640      	mov	r0, r8
 8004402:	47d0      	blx	sl
 8004404:	3001      	adds	r0, #1
 8004406:	d09d      	beq.n	8004344 <_printf_i+0x15c>
 8004408:	3501      	adds	r5, #1
 800440a:	68e3      	ldr	r3, [r4, #12]
 800440c:	9903      	ldr	r1, [sp, #12]
 800440e:	1a5b      	subs	r3, r3, r1
 8004410:	42ab      	cmp	r3, r5
 8004412:	dcf2      	bgt.n	80043fa <_printf_i+0x212>
 8004414:	e7eb      	b.n	80043ee <_printf_i+0x206>
 8004416:	2500      	movs	r5, #0
 8004418:	f104 0619 	add.w	r6, r4, #25
 800441c:	e7f5      	b.n	800440a <_printf_i+0x222>
 800441e:	bf00      	nop
 8004420:	080067a2 	.word	0x080067a2
 8004424:	080067b3 	.word	0x080067b3

08004428 <siprintf>:
 8004428:	b40e      	push	{r1, r2, r3}
 800442a:	b500      	push	{lr}
 800442c:	b09c      	sub	sp, #112	@ 0x70
 800442e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004430:	9002      	str	r0, [sp, #8]
 8004432:	9006      	str	r0, [sp, #24]
 8004434:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004438:	4809      	ldr	r0, [pc, #36]	@ (8004460 <siprintf+0x38>)
 800443a:	9107      	str	r1, [sp, #28]
 800443c:	9104      	str	r1, [sp, #16]
 800443e:	4909      	ldr	r1, [pc, #36]	@ (8004464 <siprintf+0x3c>)
 8004440:	f853 2b04 	ldr.w	r2, [r3], #4
 8004444:	9105      	str	r1, [sp, #20]
 8004446:	6800      	ldr	r0, [r0, #0]
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	a902      	add	r1, sp, #8
 800444c:	f000 ff42 	bl	80052d4 <_svfiprintf_r>
 8004450:	9b02      	ldr	r3, [sp, #8]
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	b01c      	add	sp, #112	@ 0x70
 8004458:	f85d eb04 	ldr.w	lr, [sp], #4
 800445c:	b003      	add	sp, #12
 800445e:	4770      	bx	lr
 8004460:	20000018 	.word	0x20000018
 8004464:	ffff0208 	.word	0xffff0208

08004468 <std>:
 8004468:	2300      	movs	r3, #0
 800446a:	b510      	push	{r4, lr}
 800446c:	4604      	mov	r4, r0
 800446e:	e9c0 3300 	strd	r3, r3, [r0]
 8004472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004476:	6083      	str	r3, [r0, #8]
 8004478:	8181      	strh	r1, [r0, #12]
 800447a:	6643      	str	r3, [r0, #100]	@ 0x64
 800447c:	81c2      	strh	r2, [r0, #14]
 800447e:	6183      	str	r3, [r0, #24]
 8004480:	4619      	mov	r1, r3
 8004482:	2208      	movs	r2, #8
 8004484:	305c      	adds	r0, #92	@ 0x5c
 8004486:	f000 f8b1 	bl	80045ec <memset>
 800448a:	4b0d      	ldr	r3, [pc, #52]	@ (80044c0 <std+0x58>)
 800448c:	6263      	str	r3, [r4, #36]	@ 0x24
 800448e:	4b0d      	ldr	r3, [pc, #52]	@ (80044c4 <std+0x5c>)
 8004490:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004492:	4b0d      	ldr	r3, [pc, #52]	@ (80044c8 <std+0x60>)
 8004494:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004496:	4b0d      	ldr	r3, [pc, #52]	@ (80044cc <std+0x64>)
 8004498:	6323      	str	r3, [r4, #48]	@ 0x30
 800449a:	4b0d      	ldr	r3, [pc, #52]	@ (80044d0 <std+0x68>)
 800449c:	6224      	str	r4, [r4, #32]
 800449e:	429c      	cmp	r4, r3
 80044a0:	d006      	beq.n	80044b0 <std+0x48>
 80044a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80044a6:	4294      	cmp	r4, r2
 80044a8:	d002      	beq.n	80044b0 <std+0x48>
 80044aa:	33d0      	adds	r3, #208	@ 0xd0
 80044ac:	429c      	cmp	r4, r3
 80044ae:	d105      	bne.n	80044bc <std+0x54>
 80044b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80044b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b8:	f000 b8ce 	b.w	8004658 <__retarget_lock_init_recursive>
 80044bc:	bd10      	pop	{r4, pc}
 80044be:	bf00      	nop
 80044c0:	08005e95 	.word	0x08005e95
 80044c4:	08005eb7 	.word	0x08005eb7
 80044c8:	08005eef 	.word	0x08005eef
 80044cc:	08005f13 	.word	0x08005f13
 80044d0:	20000348 	.word	0x20000348

080044d4 <stdio_exit_handler>:
 80044d4:	4a02      	ldr	r2, [pc, #8]	@ (80044e0 <stdio_exit_handler+0xc>)
 80044d6:	4903      	ldr	r1, [pc, #12]	@ (80044e4 <stdio_exit_handler+0x10>)
 80044d8:	4803      	ldr	r0, [pc, #12]	@ (80044e8 <stdio_exit_handler+0x14>)
 80044da:	f000 b869 	b.w	80045b0 <_fwalk_sglue>
 80044de:	bf00      	nop
 80044e0:	2000000c 	.word	0x2000000c
 80044e4:	08005729 	.word	0x08005729
 80044e8:	2000001c 	.word	0x2000001c

080044ec <cleanup_stdio>:
 80044ec:	6841      	ldr	r1, [r0, #4]
 80044ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004520 <cleanup_stdio+0x34>)
 80044f0:	4299      	cmp	r1, r3
 80044f2:	b510      	push	{r4, lr}
 80044f4:	4604      	mov	r4, r0
 80044f6:	d001      	beq.n	80044fc <cleanup_stdio+0x10>
 80044f8:	f001 f916 	bl	8005728 <_fflush_r>
 80044fc:	68a1      	ldr	r1, [r4, #8]
 80044fe:	4b09      	ldr	r3, [pc, #36]	@ (8004524 <cleanup_stdio+0x38>)
 8004500:	4299      	cmp	r1, r3
 8004502:	d002      	beq.n	800450a <cleanup_stdio+0x1e>
 8004504:	4620      	mov	r0, r4
 8004506:	f001 f90f 	bl	8005728 <_fflush_r>
 800450a:	68e1      	ldr	r1, [r4, #12]
 800450c:	4b06      	ldr	r3, [pc, #24]	@ (8004528 <cleanup_stdio+0x3c>)
 800450e:	4299      	cmp	r1, r3
 8004510:	d004      	beq.n	800451c <cleanup_stdio+0x30>
 8004512:	4620      	mov	r0, r4
 8004514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004518:	f001 b906 	b.w	8005728 <_fflush_r>
 800451c:	bd10      	pop	{r4, pc}
 800451e:	bf00      	nop
 8004520:	20000348 	.word	0x20000348
 8004524:	200003b0 	.word	0x200003b0
 8004528:	20000418 	.word	0x20000418

0800452c <global_stdio_init.part.0>:
 800452c:	b510      	push	{r4, lr}
 800452e:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <global_stdio_init.part.0+0x30>)
 8004530:	4c0b      	ldr	r4, [pc, #44]	@ (8004560 <global_stdio_init.part.0+0x34>)
 8004532:	4a0c      	ldr	r2, [pc, #48]	@ (8004564 <global_stdio_init.part.0+0x38>)
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	4620      	mov	r0, r4
 8004538:	2200      	movs	r2, #0
 800453a:	2104      	movs	r1, #4
 800453c:	f7ff ff94 	bl	8004468 <std>
 8004540:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004544:	2201      	movs	r2, #1
 8004546:	2109      	movs	r1, #9
 8004548:	f7ff ff8e 	bl	8004468 <std>
 800454c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004550:	2202      	movs	r2, #2
 8004552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004556:	2112      	movs	r1, #18
 8004558:	f7ff bf86 	b.w	8004468 <std>
 800455c:	20000480 	.word	0x20000480
 8004560:	20000348 	.word	0x20000348
 8004564:	080044d5 	.word	0x080044d5

08004568 <__sfp_lock_acquire>:
 8004568:	4801      	ldr	r0, [pc, #4]	@ (8004570 <__sfp_lock_acquire+0x8>)
 800456a:	f000 b876 	b.w	800465a <__retarget_lock_acquire_recursive>
 800456e:	bf00      	nop
 8004570:	20000485 	.word	0x20000485

08004574 <__sfp_lock_release>:
 8004574:	4801      	ldr	r0, [pc, #4]	@ (800457c <__sfp_lock_release+0x8>)
 8004576:	f000 b871 	b.w	800465c <__retarget_lock_release_recursive>
 800457a:	bf00      	nop
 800457c:	20000485 	.word	0x20000485

08004580 <__sinit>:
 8004580:	b510      	push	{r4, lr}
 8004582:	4604      	mov	r4, r0
 8004584:	f7ff fff0 	bl	8004568 <__sfp_lock_acquire>
 8004588:	6a23      	ldr	r3, [r4, #32]
 800458a:	b11b      	cbz	r3, 8004594 <__sinit+0x14>
 800458c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004590:	f7ff bff0 	b.w	8004574 <__sfp_lock_release>
 8004594:	4b04      	ldr	r3, [pc, #16]	@ (80045a8 <__sinit+0x28>)
 8004596:	6223      	str	r3, [r4, #32]
 8004598:	4b04      	ldr	r3, [pc, #16]	@ (80045ac <__sinit+0x2c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f5      	bne.n	800458c <__sinit+0xc>
 80045a0:	f7ff ffc4 	bl	800452c <global_stdio_init.part.0>
 80045a4:	e7f2      	b.n	800458c <__sinit+0xc>
 80045a6:	bf00      	nop
 80045a8:	080044ed 	.word	0x080044ed
 80045ac:	20000480 	.word	0x20000480

080045b0 <_fwalk_sglue>:
 80045b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045b4:	4607      	mov	r7, r0
 80045b6:	4688      	mov	r8, r1
 80045b8:	4614      	mov	r4, r2
 80045ba:	2600      	movs	r6, #0
 80045bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045c0:	f1b9 0901 	subs.w	r9, r9, #1
 80045c4:	d505      	bpl.n	80045d2 <_fwalk_sglue+0x22>
 80045c6:	6824      	ldr	r4, [r4, #0]
 80045c8:	2c00      	cmp	r4, #0
 80045ca:	d1f7      	bne.n	80045bc <_fwalk_sglue+0xc>
 80045cc:	4630      	mov	r0, r6
 80045ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045d2:	89ab      	ldrh	r3, [r5, #12]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d907      	bls.n	80045e8 <_fwalk_sglue+0x38>
 80045d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045dc:	3301      	adds	r3, #1
 80045de:	d003      	beq.n	80045e8 <_fwalk_sglue+0x38>
 80045e0:	4629      	mov	r1, r5
 80045e2:	4638      	mov	r0, r7
 80045e4:	47c0      	blx	r8
 80045e6:	4306      	orrs	r6, r0
 80045e8:	3568      	adds	r5, #104	@ 0x68
 80045ea:	e7e9      	b.n	80045c0 <_fwalk_sglue+0x10>

080045ec <memset>:
 80045ec:	4402      	add	r2, r0
 80045ee:	4603      	mov	r3, r0
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d100      	bne.n	80045f6 <memset+0xa>
 80045f4:	4770      	bx	lr
 80045f6:	f803 1b01 	strb.w	r1, [r3], #1
 80045fa:	e7f9      	b.n	80045f0 <memset+0x4>

080045fc <_localeconv_r>:
 80045fc:	4800      	ldr	r0, [pc, #0]	@ (8004600 <_localeconv_r+0x4>)
 80045fe:	4770      	bx	lr
 8004600:	20000158 	.word	0x20000158

08004604 <__errno>:
 8004604:	4b01      	ldr	r3, [pc, #4]	@ (800460c <__errno+0x8>)
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000018 	.word	0x20000018

08004610 <__libc_init_array>:
 8004610:	b570      	push	{r4, r5, r6, lr}
 8004612:	4d0d      	ldr	r5, [pc, #52]	@ (8004648 <__libc_init_array+0x38>)
 8004614:	4c0d      	ldr	r4, [pc, #52]	@ (800464c <__libc_init_array+0x3c>)
 8004616:	1b64      	subs	r4, r4, r5
 8004618:	10a4      	asrs	r4, r4, #2
 800461a:	2600      	movs	r6, #0
 800461c:	42a6      	cmp	r6, r4
 800461e:	d109      	bne.n	8004634 <__libc_init_array+0x24>
 8004620:	4d0b      	ldr	r5, [pc, #44]	@ (8004650 <__libc_init_array+0x40>)
 8004622:	4c0c      	ldr	r4, [pc, #48]	@ (8004654 <__libc_init_array+0x44>)
 8004624:	f002 f880 	bl	8006728 <_init>
 8004628:	1b64      	subs	r4, r4, r5
 800462a:	10a4      	asrs	r4, r4, #2
 800462c:	2600      	movs	r6, #0
 800462e:	42a6      	cmp	r6, r4
 8004630:	d105      	bne.n	800463e <__libc_init_array+0x2e>
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	f855 3b04 	ldr.w	r3, [r5], #4
 8004638:	4798      	blx	r3
 800463a:	3601      	adds	r6, #1
 800463c:	e7ee      	b.n	800461c <__libc_init_array+0xc>
 800463e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004642:	4798      	blx	r3
 8004644:	3601      	adds	r6, #1
 8004646:	e7f2      	b.n	800462e <__libc_init_array+0x1e>
 8004648:	08006b08 	.word	0x08006b08
 800464c:	08006b08 	.word	0x08006b08
 8004650:	08006b08 	.word	0x08006b08
 8004654:	08006b0c 	.word	0x08006b0c

08004658 <__retarget_lock_init_recursive>:
 8004658:	4770      	bx	lr

0800465a <__retarget_lock_acquire_recursive>:
 800465a:	4770      	bx	lr

0800465c <__retarget_lock_release_recursive>:
 800465c:	4770      	bx	lr

0800465e <quorem>:
 800465e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004662:	6903      	ldr	r3, [r0, #16]
 8004664:	690c      	ldr	r4, [r1, #16]
 8004666:	42a3      	cmp	r3, r4
 8004668:	4607      	mov	r7, r0
 800466a:	db7e      	blt.n	800476a <quorem+0x10c>
 800466c:	3c01      	subs	r4, #1
 800466e:	f101 0814 	add.w	r8, r1, #20
 8004672:	00a3      	lsls	r3, r4, #2
 8004674:	f100 0514 	add.w	r5, r0, #20
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004684:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004688:	3301      	adds	r3, #1
 800468a:	429a      	cmp	r2, r3
 800468c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004690:	fbb2 f6f3 	udiv	r6, r2, r3
 8004694:	d32e      	bcc.n	80046f4 <quorem+0x96>
 8004696:	f04f 0a00 	mov.w	sl, #0
 800469a:	46c4      	mov	ip, r8
 800469c:	46ae      	mov	lr, r5
 800469e:	46d3      	mov	fp, sl
 80046a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80046a4:	b298      	uxth	r0, r3
 80046a6:	fb06 a000 	mla	r0, r6, r0, sl
 80046aa:	0c02      	lsrs	r2, r0, #16
 80046ac:	0c1b      	lsrs	r3, r3, #16
 80046ae:	fb06 2303 	mla	r3, r6, r3, r2
 80046b2:	f8de 2000 	ldr.w	r2, [lr]
 80046b6:	b280      	uxth	r0, r0
 80046b8:	b292      	uxth	r2, r2
 80046ba:	1a12      	subs	r2, r2, r0
 80046bc:	445a      	add	r2, fp
 80046be:	f8de 0000 	ldr.w	r0, [lr]
 80046c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80046cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80046d0:	b292      	uxth	r2, r2
 80046d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80046d6:	45e1      	cmp	r9, ip
 80046d8:	f84e 2b04 	str.w	r2, [lr], #4
 80046dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80046e0:	d2de      	bcs.n	80046a0 <quorem+0x42>
 80046e2:	9b00      	ldr	r3, [sp, #0]
 80046e4:	58eb      	ldr	r3, [r5, r3]
 80046e6:	b92b      	cbnz	r3, 80046f4 <quorem+0x96>
 80046e8:	9b01      	ldr	r3, [sp, #4]
 80046ea:	3b04      	subs	r3, #4
 80046ec:	429d      	cmp	r5, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	d32f      	bcc.n	8004752 <quorem+0xf4>
 80046f2:	613c      	str	r4, [r7, #16]
 80046f4:	4638      	mov	r0, r7
 80046f6:	f001 fac5 	bl	8005c84 <__mcmp>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	db25      	blt.n	800474a <quorem+0xec>
 80046fe:	4629      	mov	r1, r5
 8004700:	2000      	movs	r0, #0
 8004702:	f858 2b04 	ldr.w	r2, [r8], #4
 8004706:	f8d1 c000 	ldr.w	ip, [r1]
 800470a:	fa1f fe82 	uxth.w	lr, r2
 800470e:	fa1f f38c 	uxth.w	r3, ip
 8004712:	eba3 030e 	sub.w	r3, r3, lr
 8004716:	4403      	add	r3, r0
 8004718:	0c12      	lsrs	r2, r2, #16
 800471a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800471e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004722:	b29b      	uxth	r3, r3
 8004724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004728:	45c1      	cmp	r9, r8
 800472a:	f841 3b04 	str.w	r3, [r1], #4
 800472e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004732:	d2e6      	bcs.n	8004702 <quorem+0xa4>
 8004734:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004738:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800473c:	b922      	cbnz	r2, 8004748 <quorem+0xea>
 800473e:	3b04      	subs	r3, #4
 8004740:	429d      	cmp	r5, r3
 8004742:	461a      	mov	r2, r3
 8004744:	d30b      	bcc.n	800475e <quorem+0x100>
 8004746:	613c      	str	r4, [r7, #16]
 8004748:	3601      	adds	r6, #1
 800474a:	4630      	mov	r0, r6
 800474c:	b003      	add	sp, #12
 800474e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	3b04      	subs	r3, #4
 8004756:	2a00      	cmp	r2, #0
 8004758:	d1cb      	bne.n	80046f2 <quorem+0x94>
 800475a:	3c01      	subs	r4, #1
 800475c:	e7c6      	b.n	80046ec <quorem+0x8e>
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	3b04      	subs	r3, #4
 8004762:	2a00      	cmp	r2, #0
 8004764:	d1ef      	bne.n	8004746 <quorem+0xe8>
 8004766:	3c01      	subs	r4, #1
 8004768:	e7ea      	b.n	8004740 <quorem+0xe2>
 800476a:	2000      	movs	r0, #0
 800476c:	e7ee      	b.n	800474c <quorem+0xee>
	...

08004770 <_dtoa_r>:
 8004770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004774:	ed2d 8b02 	vpush	{d8}
 8004778:	69c7      	ldr	r7, [r0, #28]
 800477a:	b091      	sub	sp, #68	@ 0x44
 800477c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004780:	ec55 4b10 	vmov	r4, r5, d0
 8004784:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8004786:	9107      	str	r1, [sp, #28]
 8004788:	4681      	mov	r9, r0
 800478a:	9209      	str	r2, [sp, #36]	@ 0x24
 800478c:	930d      	str	r3, [sp, #52]	@ 0x34
 800478e:	b97f      	cbnz	r7, 80047b0 <_dtoa_r+0x40>
 8004790:	2010      	movs	r0, #16
 8004792:	f000 fe9b 	bl	80054cc <malloc>
 8004796:	4602      	mov	r2, r0
 8004798:	f8c9 001c 	str.w	r0, [r9, #28]
 800479c:	b920      	cbnz	r0, 80047a8 <_dtoa_r+0x38>
 800479e:	4ba0      	ldr	r3, [pc, #640]	@ (8004a20 <_dtoa_r+0x2b0>)
 80047a0:	21ef      	movs	r1, #239	@ 0xef
 80047a2:	48a0      	ldr	r0, [pc, #640]	@ (8004a24 <_dtoa_r+0x2b4>)
 80047a4:	f001 fc66 	bl	8006074 <__assert_func>
 80047a8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80047ac:	6007      	str	r7, [r0, #0]
 80047ae:	60c7      	str	r7, [r0, #12]
 80047b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80047b4:	6819      	ldr	r1, [r3, #0]
 80047b6:	b159      	cbz	r1, 80047d0 <_dtoa_r+0x60>
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	604a      	str	r2, [r1, #4]
 80047bc:	2301      	movs	r3, #1
 80047be:	4093      	lsls	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
 80047c2:	4648      	mov	r0, r9
 80047c4:	f001 f824 	bl	8005810 <_Bfree>
 80047c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	1e2b      	subs	r3, r5, #0
 80047d2:	bfbb      	ittet	lt
 80047d4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80047d8:	9303      	strlt	r3, [sp, #12]
 80047da:	2300      	movge	r3, #0
 80047dc:	2201      	movlt	r2, #1
 80047de:	bfac      	ite	ge
 80047e0:	6033      	strge	r3, [r6, #0]
 80047e2:	6032      	strlt	r2, [r6, #0]
 80047e4:	4b90      	ldr	r3, [pc, #576]	@ (8004a28 <_dtoa_r+0x2b8>)
 80047e6:	9e03      	ldr	r6, [sp, #12]
 80047e8:	43b3      	bics	r3, r6
 80047ea:	d110      	bne.n	800480e <_dtoa_r+0x9e>
 80047ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80047ee:	f242 730f 	movw	r3, #9999	@ 0x270f
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80047f8:	4323      	orrs	r3, r4
 80047fa:	f000 84de 	beq.w	80051ba <_dtoa_r+0xa4a>
 80047fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004800:	4f8a      	ldr	r7, [pc, #552]	@ (8004a2c <_dtoa_r+0x2bc>)
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 84e0 	beq.w	80051c8 <_dtoa_r+0xa58>
 8004808:	1cfb      	adds	r3, r7, #3
 800480a:	f000 bcdb 	b.w	80051c4 <_dtoa_r+0xa54>
 800480e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8004812:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481a:	d10a      	bne.n	8004832 <_dtoa_r+0xc2>
 800481c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800481e:	2301      	movs	r3, #1
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004824:	b113      	cbz	r3, 800482c <_dtoa_r+0xbc>
 8004826:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8004828:	4b81      	ldr	r3, [pc, #516]	@ (8004a30 <_dtoa_r+0x2c0>)
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4f81      	ldr	r7, [pc, #516]	@ (8004a34 <_dtoa_r+0x2c4>)
 800482e:	f000 bccb 	b.w	80051c8 <_dtoa_r+0xa58>
 8004832:	aa0e      	add	r2, sp, #56	@ 0x38
 8004834:	a90f      	add	r1, sp, #60	@ 0x3c
 8004836:	4648      	mov	r0, r9
 8004838:	eeb0 0b48 	vmov.f64	d0, d8
 800483c:	f001 fad2 	bl	8005de4 <__d2b>
 8004840:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8004844:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004846:	9001      	str	r0, [sp, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d045      	beq.n	80048d8 <_dtoa_r+0x168>
 800484c:	eeb0 7b48 	vmov.f64	d7, d8
 8004850:	ee18 1a90 	vmov	r1, s17
 8004854:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004858:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800485c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8004860:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8004864:	2500      	movs	r5, #0
 8004866:	ee07 1a90 	vmov	s15, r1
 800486a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800486e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8004a08 <_dtoa_r+0x298>
 8004872:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004876:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8004a10 <_dtoa_r+0x2a0>
 800487a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800487e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8004a18 <_dtoa_r+0x2a8>
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800488a:	eeb0 7b46 	vmov.f64	d7, d6
 800488e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004892:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004896:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800489a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489e:	ee16 8a90 	vmov	r8, s13
 80048a2:	d508      	bpl.n	80048b6 <_dtoa_r+0x146>
 80048a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80048a8:	eeb4 6b47 	vcmp.f64	d6, d7
 80048ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b0:	bf18      	it	ne
 80048b2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 80048b6:	f1b8 0f16 	cmp.w	r8, #22
 80048ba:	d82b      	bhi.n	8004914 <_dtoa_r+0x1a4>
 80048bc:	495e      	ldr	r1, [pc, #376]	@ (8004a38 <_dtoa_r+0x2c8>)
 80048be:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80048c2:	ed91 7b00 	vldr	d7, [r1]
 80048c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80048ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ce:	d501      	bpl.n	80048d4 <_dtoa_r+0x164>
 80048d0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80048d4:	2100      	movs	r1, #0
 80048d6:	e01e      	b.n	8004916 <_dtoa_r+0x1a6>
 80048d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80048da:	4413      	add	r3, r2
 80048dc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80048e0:	2920      	cmp	r1, #32
 80048e2:	bfc1      	itttt	gt
 80048e4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80048e8:	408e      	lslgt	r6, r1
 80048ea:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80048ee:	fa24 f101 	lsrgt.w	r1, r4, r1
 80048f2:	bfd6      	itet	le
 80048f4:	f1c1 0120 	rsble	r1, r1, #32
 80048f8:	4331      	orrgt	r1, r6
 80048fa:	fa04 f101 	lslle.w	r1, r4, r1
 80048fe:	ee07 1a90 	vmov	s15, r1
 8004902:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004906:	3b01      	subs	r3, #1
 8004908:	ee17 1a90 	vmov	r1, s15
 800490c:	2501      	movs	r5, #1
 800490e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8004912:	e7a8      	b.n	8004866 <_dtoa_r+0xf6>
 8004914:	2101      	movs	r1, #1
 8004916:	1ad2      	subs	r2, r2, r3
 8004918:	1e53      	subs	r3, r2, #1
 800491a:	9306      	str	r3, [sp, #24]
 800491c:	bf45      	ittet	mi
 800491e:	f1c2 0301 	rsbmi	r3, r2, #1
 8004922:	9305      	strmi	r3, [sp, #20]
 8004924:	2300      	movpl	r3, #0
 8004926:	2300      	movmi	r3, #0
 8004928:	bf4c      	ite	mi
 800492a:	9306      	strmi	r3, [sp, #24]
 800492c:	9305      	strpl	r3, [sp, #20]
 800492e:	f1b8 0f00 	cmp.w	r8, #0
 8004932:	910c      	str	r1, [sp, #48]	@ 0x30
 8004934:	db18      	blt.n	8004968 <_dtoa_r+0x1f8>
 8004936:	9b06      	ldr	r3, [sp, #24]
 8004938:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800493c:	4443      	add	r3, r8
 800493e:	9306      	str	r3, [sp, #24]
 8004940:	2300      	movs	r3, #0
 8004942:	9a07      	ldr	r2, [sp, #28]
 8004944:	2a09      	cmp	r2, #9
 8004946:	d849      	bhi.n	80049dc <_dtoa_r+0x26c>
 8004948:	2a05      	cmp	r2, #5
 800494a:	bfc4      	itt	gt
 800494c:	3a04      	subgt	r2, #4
 800494e:	9207      	strgt	r2, [sp, #28]
 8004950:	9a07      	ldr	r2, [sp, #28]
 8004952:	f1a2 0202 	sub.w	r2, r2, #2
 8004956:	bfcc      	ite	gt
 8004958:	2400      	movgt	r4, #0
 800495a:	2401      	movle	r4, #1
 800495c:	2a03      	cmp	r2, #3
 800495e:	d848      	bhi.n	80049f2 <_dtoa_r+0x282>
 8004960:	e8df f002 	tbb	[pc, r2]
 8004964:	3a2c2e0b 	.word	0x3a2c2e0b
 8004968:	9b05      	ldr	r3, [sp, #20]
 800496a:	2200      	movs	r2, #0
 800496c:	eba3 0308 	sub.w	r3, r3, r8
 8004970:	9305      	str	r3, [sp, #20]
 8004972:	920a      	str	r2, [sp, #40]	@ 0x28
 8004974:	f1c8 0300 	rsb	r3, r8, #0
 8004978:	e7e3      	b.n	8004942 <_dtoa_r+0x1d2>
 800497a:	2200      	movs	r2, #0
 800497c:	9208      	str	r2, [sp, #32]
 800497e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004980:	2a00      	cmp	r2, #0
 8004982:	dc39      	bgt.n	80049f8 <_dtoa_r+0x288>
 8004984:	f04f 0b01 	mov.w	fp, #1
 8004988:	46da      	mov	sl, fp
 800498a:	465a      	mov	r2, fp
 800498c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8004990:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8004994:	2100      	movs	r1, #0
 8004996:	2004      	movs	r0, #4
 8004998:	f100 0614 	add.w	r6, r0, #20
 800499c:	4296      	cmp	r6, r2
 800499e:	d930      	bls.n	8004a02 <_dtoa_r+0x292>
 80049a0:	6079      	str	r1, [r7, #4]
 80049a2:	4648      	mov	r0, r9
 80049a4:	9304      	str	r3, [sp, #16]
 80049a6:	f000 fef3 	bl	8005790 <_Balloc>
 80049aa:	9b04      	ldr	r3, [sp, #16]
 80049ac:	4607      	mov	r7, r0
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d146      	bne.n	8004a40 <_dtoa_r+0x2d0>
 80049b2:	4b22      	ldr	r3, [pc, #136]	@ (8004a3c <_dtoa_r+0x2cc>)
 80049b4:	4602      	mov	r2, r0
 80049b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80049ba:	e6f2      	b.n	80047a2 <_dtoa_r+0x32>
 80049bc:	2201      	movs	r2, #1
 80049be:	e7dd      	b.n	800497c <_dtoa_r+0x20c>
 80049c0:	2200      	movs	r2, #0
 80049c2:	9208      	str	r2, [sp, #32]
 80049c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049c6:	eb08 0b02 	add.w	fp, r8, r2
 80049ca:	f10b 0a01 	add.w	sl, fp, #1
 80049ce:	4652      	mov	r2, sl
 80049d0:	2a01      	cmp	r2, #1
 80049d2:	bfb8      	it	lt
 80049d4:	2201      	movlt	r2, #1
 80049d6:	e7db      	b.n	8004990 <_dtoa_r+0x220>
 80049d8:	2201      	movs	r2, #1
 80049da:	e7f2      	b.n	80049c2 <_dtoa_r+0x252>
 80049dc:	2401      	movs	r4, #1
 80049de:	2200      	movs	r2, #0
 80049e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80049e4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80049e8:	2100      	movs	r1, #0
 80049ea:	46da      	mov	sl, fp
 80049ec:	2212      	movs	r2, #18
 80049ee:	9109      	str	r1, [sp, #36]	@ 0x24
 80049f0:	e7ce      	b.n	8004990 <_dtoa_r+0x220>
 80049f2:	2201      	movs	r2, #1
 80049f4:	9208      	str	r2, [sp, #32]
 80049f6:	e7f5      	b.n	80049e4 <_dtoa_r+0x274>
 80049f8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80049fc:	46da      	mov	sl, fp
 80049fe:	465a      	mov	r2, fp
 8004a00:	e7c6      	b.n	8004990 <_dtoa_r+0x220>
 8004a02:	3101      	adds	r1, #1
 8004a04:	0040      	lsls	r0, r0, #1
 8004a06:	e7c7      	b.n	8004998 <_dtoa_r+0x228>
 8004a08:	636f4361 	.word	0x636f4361
 8004a0c:	3fd287a7 	.word	0x3fd287a7
 8004a10:	8b60c8b3 	.word	0x8b60c8b3
 8004a14:	3fc68a28 	.word	0x3fc68a28
 8004a18:	509f79fb 	.word	0x509f79fb
 8004a1c:	3fd34413 	.word	0x3fd34413
 8004a20:	080067d1 	.word	0x080067d1
 8004a24:	080067e8 	.word	0x080067e8
 8004a28:	7ff00000 	.word	0x7ff00000
 8004a2c:	080067cd 	.word	0x080067cd
 8004a30:	080067a1 	.word	0x080067a1
 8004a34:	080067a0 	.word	0x080067a0
 8004a38:	080068f0 	.word	0x080068f0
 8004a3c:	08006840 	.word	0x08006840
 8004a40:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8004a44:	f1ba 0f0e 	cmp.w	sl, #14
 8004a48:	6010      	str	r0, [r2, #0]
 8004a4a:	d86f      	bhi.n	8004b2c <_dtoa_r+0x3bc>
 8004a4c:	2c00      	cmp	r4, #0
 8004a4e:	d06d      	beq.n	8004b2c <_dtoa_r+0x3bc>
 8004a50:	f1b8 0f00 	cmp.w	r8, #0
 8004a54:	f340 80c2 	ble.w	8004bdc <_dtoa_r+0x46c>
 8004a58:	4aca      	ldr	r2, [pc, #808]	@ (8004d84 <_dtoa_r+0x614>)
 8004a5a:	f008 010f 	and.w	r1, r8, #15
 8004a5e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004a62:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8004a66:	ed92 7b00 	vldr	d7, [r2]
 8004a6a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8004a6e:	f000 80a9 	beq.w	8004bc4 <_dtoa_r+0x454>
 8004a72:	4ac5      	ldr	r2, [pc, #788]	@ (8004d88 <_dtoa_r+0x618>)
 8004a74:	ed92 6b08 	vldr	d6, [r2, #32]
 8004a78:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8004a7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004a80:	f001 010f 	and.w	r1, r1, #15
 8004a84:	2203      	movs	r2, #3
 8004a86:	48c0      	ldr	r0, [pc, #768]	@ (8004d88 <_dtoa_r+0x618>)
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	f040 809d 	bne.w	8004bc8 <_dtoa_r+0x458>
 8004a8e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004a92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004a96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004a9a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004a9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004aa0:	2900      	cmp	r1, #0
 8004aa2:	f000 80c1 	beq.w	8004c28 <_dtoa_r+0x4b8>
 8004aa6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8004aaa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab2:	f140 80b9 	bpl.w	8004c28 <_dtoa_r+0x4b8>
 8004ab6:	f1ba 0f00 	cmp.w	sl, #0
 8004aba:	f000 80b5 	beq.w	8004c28 <_dtoa_r+0x4b8>
 8004abe:	f1bb 0f00 	cmp.w	fp, #0
 8004ac2:	dd31      	ble.n	8004b28 <_dtoa_r+0x3b8>
 8004ac4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8004ac8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004acc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ad0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8004ad4:	9104      	str	r1, [sp, #16]
 8004ad6:	3201      	adds	r2, #1
 8004ad8:	465c      	mov	r4, fp
 8004ada:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004ade:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8004ae2:	ee07 2a90 	vmov	s15, r2
 8004ae6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004aea:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004aee:	ee15 2a90 	vmov	r2, s11
 8004af2:	ec51 0b15 	vmov	r0, r1, d5
 8004af6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8004afa:	2c00      	cmp	r4, #0
 8004afc:	f040 8098 	bne.w	8004c30 <_dtoa_r+0x4c0>
 8004b00:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8004b04:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004b08:	ec41 0b17 	vmov	d7, r0, r1
 8004b0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b14:	f300 8261 	bgt.w	8004fda <_dtoa_r+0x86a>
 8004b18:	eeb1 7b47 	vneg.f64	d7, d7
 8004b1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b24:	f100 80f5 	bmi.w	8004d12 <_dtoa_r+0x5a2>
 8004b28:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004b2c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004b2e:	2a00      	cmp	r2, #0
 8004b30:	f2c0 812c 	blt.w	8004d8c <_dtoa_r+0x61c>
 8004b34:	f1b8 0f0e 	cmp.w	r8, #14
 8004b38:	f300 8128 	bgt.w	8004d8c <_dtoa_r+0x61c>
 8004b3c:	4b91      	ldr	r3, [pc, #580]	@ (8004d84 <_dtoa_r+0x614>)
 8004b3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004b42:	ed93 6b00 	vldr	d6, [r3]
 8004b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	da03      	bge.n	8004b54 <_dtoa_r+0x3e4>
 8004b4c:	f1ba 0f00 	cmp.w	sl, #0
 8004b50:	f340 80d2 	ble.w	8004cf8 <_dtoa_r+0x588>
 8004b54:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8004b58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b5c:	463e      	mov	r6, r7
 8004b5e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004b62:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004b66:	ee15 3a10 	vmov	r3, s10
 8004b6a:	3330      	adds	r3, #48	@ 0x30
 8004b6c:	f806 3b01 	strb.w	r3, [r6], #1
 8004b70:	1bf3      	subs	r3, r6, r7
 8004b72:	459a      	cmp	sl, r3
 8004b74:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004b78:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004b7c:	f040 80f8 	bne.w	8004d70 <_dtoa_r+0x600>
 8004b80:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004b84:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8c:	f300 80dd 	bgt.w	8004d4a <_dtoa_r+0x5da>
 8004b90:	eeb4 7b46 	vcmp.f64	d7, d6
 8004b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b98:	d104      	bne.n	8004ba4 <_dtoa_r+0x434>
 8004b9a:	ee15 3a10 	vmov	r3, s10
 8004b9e:	07db      	lsls	r3, r3, #31
 8004ba0:	f100 80d3 	bmi.w	8004d4a <_dtoa_r+0x5da>
 8004ba4:	9901      	ldr	r1, [sp, #4]
 8004ba6:	4648      	mov	r0, r9
 8004ba8:	f000 fe32 	bl	8005810 <_Bfree>
 8004bac:	2300      	movs	r3, #0
 8004bae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004bb0:	7033      	strb	r3, [r6, #0]
 8004bb2:	f108 0301 	add.w	r3, r8, #1
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 8304 	beq.w	80051c8 <_dtoa_r+0xa58>
 8004bc0:	601e      	str	r6, [r3, #0]
 8004bc2:	e301      	b.n	80051c8 <_dtoa_r+0xa58>
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	e75e      	b.n	8004a86 <_dtoa_r+0x316>
 8004bc8:	07cc      	lsls	r4, r1, #31
 8004bca:	d504      	bpl.n	8004bd6 <_dtoa_r+0x466>
 8004bcc:	ed90 6b00 	vldr	d6, [r0]
 8004bd0:	3201      	adds	r2, #1
 8004bd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004bd6:	1049      	asrs	r1, r1, #1
 8004bd8:	3008      	adds	r0, #8
 8004bda:	e755      	b.n	8004a88 <_dtoa_r+0x318>
 8004bdc:	d022      	beq.n	8004c24 <_dtoa_r+0x4b4>
 8004bde:	f1c8 0100 	rsb	r1, r8, #0
 8004be2:	4a68      	ldr	r2, [pc, #416]	@ (8004d84 <_dtoa_r+0x614>)
 8004be4:	f001 000f 	and.w	r0, r1, #15
 8004be8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004bec:	ed92 7b00 	vldr	d7, [r2]
 8004bf0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004bf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004bf8:	4863      	ldr	r0, [pc, #396]	@ (8004d88 <_dtoa_r+0x618>)
 8004bfa:	1109      	asrs	r1, r1, #4
 8004bfc:	2400      	movs	r4, #0
 8004bfe:	2202      	movs	r2, #2
 8004c00:	b929      	cbnz	r1, 8004c0e <_dtoa_r+0x49e>
 8004c02:	2c00      	cmp	r4, #0
 8004c04:	f43f af49 	beq.w	8004a9a <_dtoa_r+0x32a>
 8004c08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004c0c:	e745      	b.n	8004a9a <_dtoa_r+0x32a>
 8004c0e:	07ce      	lsls	r6, r1, #31
 8004c10:	d505      	bpl.n	8004c1e <_dtoa_r+0x4ae>
 8004c12:	ed90 6b00 	vldr	d6, [r0]
 8004c16:	3201      	adds	r2, #1
 8004c18:	2401      	movs	r4, #1
 8004c1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004c1e:	1049      	asrs	r1, r1, #1
 8004c20:	3008      	adds	r0, #8
 8004c22:	e7ed      	b.n	8004c00 <_dtoa_r+0x490>
 8004c24:	2202      	movs	r2, #2
 8004c26:	e738      	b.n	8004a9a <_dtoa_r+0x32a>
 8004c28:	f8cd 8010 	str.w	r8, [sp, #16]
 8004c2c:	4654      	mov	r4, sl
 8004c2e:	e754      	b.n	8004ada <_dtoa_r+0x36a>
 8004c30:	4a54      	ldr	r2, [pc, #336]	@ (8004d84 <_dtoa_r+0x614>)
 8004c32:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8004c36:	ed12 4b02 	vldr	d4, [r2, #-8]
 8004c3a:	9a08      	ldr	r2, [sp, #32]
 8004c3c:	ec41 0b17 	vmov	d7, r0, r1
 8004c40:	443c      	add	r4, r7
 8004c42:	b34a      	cbz	r2, 8004c98 <_dtoa_r+0x528>
 8004c44:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8004c48:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8004c4c:	463e      	mov	r6, r7
 8004c4e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8004c52:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8004c56:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004c5a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004c5e:	ee14 2a90 	vmov	r2, s9
 8004c62:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004c66:	3230      	adds	r2, #48	@ 0x30
 8004c68:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004c6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c74:	f806 2b01 	strb.w	r2, [r6], #1
 8004c78:	d438      	bmi.n	8004cec <_dtoa_r+0x57c>
 8004c7a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004c7e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c86:	d462      	bmi.n	8004d4e <_dtoa_r+0x5de>
 8004c88:	42a6      	cmp	r6, r4
 8004c8a:	f43f af4d 	beq.w	8004b28 <_dtoa_r+0x3b8>
 8004c8e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004c92:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004c96:	e7e0      	b.n	8004c5a <_dtoa_r+0x4ea>
 8004c98:	4621      	mov	r1, r4
 8004c9a:	463e      	mov	r6, r7
 8004c9c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004ca0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8004ca4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004ca8:	ee14 2a90 	vmov	r2, s9
 8004cac:	3230      	adds	r2, #48	@ 0x30
 8004cae:	f806 2b01 	strb.w	r2, [r6], #1
 8004cb2:	42a6      	cmp	r6, r4
 8004cb4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004cb8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004cbc:	d119      	bne.n	8004cf2 <_dtoa_r+0x582>
 8004cbe:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8004cc2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8004cc6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cce:	dc3e      	bgt.n	8004d4e <_dtoa_r+0x5de>
 8004cd0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004cd4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8004cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cdc:	f57f af24 	bpl.w	8004b28 <_dtoa_r+0x3b8>
 8004ce0:	460e      	mov	r6, r1
 8004ce2:	3901      	subs	r1, #1
 8004ce4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004ce8:	2b30      	cmp	r3, #48	@ 0x30
 8004cea:	d0f9      	beq.n	8004ce0 <_dtoa_r+0x570>
 8004cec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004cf0:	e758      	b.n	8004ba4 <_dtoa_r+0x434>
 8004cf2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004cf6:	e7d5      	b.n	8004ca4 <_dtoa_r+0x534>
 8004cf8:	d10b      	bne.n	8004d12 <_dtoa_r+0x5a2>
 8004cfa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8004cfe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004d02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0e:	f2c0 8161 	blt.w	8004fd4 <_dtoa_r+0x864>
 8004d12:	2400      	movs	r4, #0
 8004d14:	4625      	mov	r5, r4
 8004d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	9304      	str	r3, [sp, #16]
 8004d1c:	463e      	mov	r6, r7
 8004d1e:	f04f 0800 	mov.w	r8, #0
 8004d22:	4621      	mov	r1, r4
 8004d24:	4648      	mov	r0, r9
 8004d26:	f000 fd73 	bl	8005810 <_Bfree>
 8004d2a:	2d00      	cmp	r5, #0
 8004d2c:	d0de      	beq.n	8004cec <_dtoa_r+0x57c>
 8004d2e:	f1b8 0f00 	cmp.w	r8, #0
 8004d32:	d005      	beq.n	8004d40 <_dtoa_r+0x5d0>
 8004d34:	45a8      	cmp	r8, r5
 8004d36:	d003      	beq.n	8004d40 <_dtoa_r+0x5d0>
 8004d38:	4641      	mov	r1, r8
 8004d3a:	4648      	mov	r0, r9
 8004d3c:	f000 fd68 	bl	8005810 <_Bfree>
 8004d40:	4629      	mov	r1, r5
 8004d42:	4648      	mov	r0, r9
 8004d44:	f000 fd64 	bl	8005810 <_Bfree>
 8004d48:	e7d0      	b.n	8004cec <_dtoa_r+0x57c>
 8004d4a:	f8cd 8010 	str.w	r8, [sp, #16]
 8004d4e:	4633      	mov	r3, r6
 8004d50:	461e      	mov	r6, r3
 8004d52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d56:	2a39      	cmp	r2, #57	@ 0x39
 8004d58:	d106      	bne.n	8004d68 <_dtoa_r+0x5f8>
 8004d5a:	429f      	cmp	r7, r3
 8004d5c:	d1f8      	bne.n	8004d50 <_dtoa_r+0x5e0>
 8004d5e:	9a04      	ldr	r2, [sp, #16]
 8004d60:	3201      	adds	r2, #1
 8004d62:	9204      	str	r2, [sp, #16]
 8004d64:	2230      	movs	r2, #48	@ 0x30
 8004d66:	703a      	strb	r2, [r7, #0]
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	3201      	adds	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e7bd      	b.n	8004cec <_dtoa_r+0x57c>
 8004d70:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004d74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7c:	f47f aeef 	bne.w	8004b5e <_dtoa_r+0x3ee>
 8004d80:	e710      	b.n	8004ba4 <_dtoa_r+0x434>
 8004d82:	bf00      	nop
 8004d84:	080068f0 	.word	0x080068f0
 8004d88:	080068c8 	.word	0x080068c8
 8004d8c:	9908      	ldr	r1, [sp, #32]
 8004d8e:	2900      	cmp	r1, #0
 8004d90:	f000 80e3 	beq.w	8004f5a <_dtoa_r+0x7ea>
 8004d94:	9907      	ldr	r1, [sp, #28]
 8004d96:	2901      	cmp	r1, #1
 8004d98:	f300 80c8 	bgt.w	8004f2c <_dtoa_r+0x7bc>
 8004d9c:	2d00      	cmp	r5, #0
 8004d9e:	f000 80c1 	beq.w	8004f24 <_dtoa_r+0x7b4>
 8004da2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004da6:	9e05      	ldr	r6, [sp, #20]
 8004da8:	461c      	mov	r4, r3
 8004daa:	9304      	str	r3, [sp, #16]
 8004dac:	9b05      	ldr	r3, [sp, #20]
 8004dae:	4413      	add	r3, r2
 8004db0:	9305      	str	r3, [sp, #20]
 8004db2:	9b06      	ldr	r3, [sp, #24]
 8004db4:	2101      	movs	r1, #1
 8004db6:	4413      	add	r3, r2
 8004db8:	4648      	mov	r0, r9
 8004dba:	9306      	str	r3, [sp, #24]
 8004dbc:	f000 fddc 	bl	8005978 <__i2b>
 8004dc0:	9b04      	ldr	r3, [sp, #16]
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	b166      	cbz	r6, 8004de0 <_dtoa_r+0x670>
 8004dc6:	9a06      	ldr	r2, [sp, #24]
 8004dc8:	2a00      	cmp	r2, #0
 8004dca:	dd09      	ble.n	8004de0 <_dtoa_r+0x670>
 8004dcc:	42b2      	cmp	r2, r6
 8004dce:	9905      	ldr	r1, [sp, #20]
 8004dd0:	bfa8      	it	ge
 8004dd2:	4632      	movge	r2, r6
 8004dd4:	1a89      	subs	r1, r1, r2
 8004dd6:	9105      	str	r1, [sp, #20]
 8004dd8:	9906      	ldr	r1, [sp, #24]
 8004dda:	1ab6      	subs	r6, r6, r2
 8004ddc:	1a8a      	subs	r2, r1, r2
 8004dde:	9206      	str	r2, [sp, #24]
 8004de0:	b1fb      	cbz	r3, 8004e22 <_dtoa_r+0x6b2>
 8004de2:	9a08      	ldr	r2, [sp, #32]
 8004de4:	2a00      	cmp	r2, #0
 8004de6:	f000 80bc 	beq.w	8004f62 <_dtoa_r+0x7f2>
 8004dea:	b19c      	cbz	r4, 8004e14 <_dtoa_r+0x6a4>
 8004dec:	4629      	mov	r1, r5
 8004dee:	4622      	mov	r2, r4
 8004df0:	4648      	mov	r0, r9
 8004df2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004df4:	f000 fe80 	bl	8005af8 <__pow5mult>
 8004df8:	9a01      	ldr	r2, [sp, #4]
 8004dfa:	4601      	mov	r1, r0
 8004dfc:	4605      	mov	r5, r0
 8004dfe:	4648      	mov	r0, r9
 8004e00:	f000 fdd0 	bl	80059a4 <__multiply>
 8004e04:	9901      	ldr	r1, [sp, #4]
 8004e06:	9004      	str	r0, [sp, #16]
 8004e08:	4648      	mov	r0, r9
 8004e0a:	f000 fd01 	bl	8005810 <_Bfree>
 8004e0e:	9a04      	ldr	r2, [sp, #16]
 8004e10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e12:	9201      	str	r2, [sp, #4]
 8004e14:	1b1a      	subs	r2, r3, r4
 8004e16:	d004      	beq.n	8004e22 <_dtoa_r+0x6b2>
 8004e18:	9901      	ldr	r1, [sp, #4]
 8004e1a:	4648      	mov	r0, r9
 8004e1c:	f000 fe6c 	bl	8005af8 <__pow5mult>
 8004e20:	9001      	str	r0, [sp, #4]
 8004e22:	2101      	movs	r1, #1
 8004e24:	4648      	mov	r0, r9
 8004e26:	f000 fda7 	bl	8005978 <__i2b>
 8004e2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 81d0 	beq.w	80051d4 <_dtoa_r+0xa64>
 8004e34:	461a      	mov	r2, r3
 8004e36:	4601      	mov	r1, r0
 8004e38:	4648      	mov	r0, r9
 8004e3a:	f000 fe5d 	bl	8005af8 <__pow5mult>
 8004e3e:	9b07      	ldr	r3, [sp, #28]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	4604      	mov	r4, r0
 8004e44:	f300 8095 	bgt.w	8004f72 <_dtoa_r+0x802>
 8004e48:	9b02      	ldr	r3, [sp, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f040 808b 	bne.w	8004f66 <_dtoa_r+0x7f6>
 8004e50:	9b03      	ldr	r3, [sp, #12]
 8004e52:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004e56:	2a00      	cmp	r2, #0
 8004e58:	f040 8087 	bne.w	8004f6a <_dtoa_r+0x7fa>
 8004e5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e60:	0d12      	lsrs	r2, r2, #20
 8004e62:	0512      	lsls	r2, r2, #20
 8004e64:	2a00      	cmp	r2, #0
 8004e66:	f000 8082 	beq.w	8004f6e <_dtoa_r+0x7fe>
 8004e6a:	9b05      	ldr	r3, [sp, #20]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	9305      	str	r3, [sp, #20]
 8004e70:	9b06      	ldr	r3, [sp, #24]
 8004e72:	3301      	adds	r3, #1
 8004e74:	9306      	str	r3, [sp, #24]
 8004e76:	2301      	movs	r3, #1
 8004e78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 81af 	beq.w	80051e0 <_dtoa_r+0xa70>
 8004e82:	6922      	ldr	r2, [r4, #16]
 8004e84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004e88:	6910      	ldr	r0, [r2, #16]
 8004e8a:	f000 fd29 	bl	80058e0 <__hi0bits>
 8004e8e:	f1c0 0020 	rsb	r0, r0, #32
 8004e92:	9b06      	ldr	r3, [sp, #24]
 8004e94:	4418      	add	r0, r3
 8004e96:	f010 001f 	ands.w	r0, r0, #31
 8004e9a:	d076      	beq.n	8004f8a <_dtoa_r+0x81a>
 8004e9c:	f1c0 0220 	rsb	r2, r0, #32
 8004ea0:	2a04      	cmp	r2, #4
 8004ea2:	dd69      	ble.n	8004f78 <_dtoa_r+0x808>
 8004ea4:	9b05      	ldr	r3, [sp, #20]
 8004ea6:	f1c0 001c 	rsb	r0, r0, #28
 8004eaa:	4403      	add	r3, r0
 8004eac:	9305      	str	r3, [sp, #20]
 8004eae:	9b06      	ldr	r3, [sp, #24]
 8004eb0:	4406      	add	r6, r0
 8004eb2:	4403      	add	r3, r0
 8004eb4:	9306      	str	r3, [sp, #24]
 8004eb6:	9b05      	ldr	r3, [sp, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	dd05      	ble.n	8004ec8 <_dtoa_r+0x758>
 8004ebc:	9901      	ldr	r1, [sp, #4]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	4648      	mov	r0, r9
 8004ec2:	f000 fe73 	bl	8005bac <__lshift>
 8004ec6:	9001      	str	r0, [sp, #4]
 8004ec8:	9b06      	ldr	r3, [sp, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	dd05      	ble.n	8004eda <_dtoa_r+0x76a>
 8004ece:	4621      	mov	r1, r4
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4648      	mov	r0, r9
 8004ed4:	f000 fe6a 	bl	8005bac <__lshift>
 8004ed8:	4604      	mov	r4, r0
 8004eda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d056      	beq.n	8004f8e <_dtoa_r+0x81e>
 8004ee0:	9801      	ldr	r0, [sp, #4]
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	f000 fece 	bl	8005c84 <__mcmp>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	da50      	bge.n	8004f8e <_dtoa_r+0x81e>
 8004eec:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8004ef0:	9304      	str	r3, [sp, #16]
 8004ef2:	9901      	ldr	r1, [sp, #4]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	220a      	movs	r2, #10
 8004ef8:	4648      	mov	r0, r9
 8004efa:	f000 fcab 	bl	8005854 <__multadd>
 8004efe:	9b08      	ldr	r3, [sp, #32]
 8004f00:	9001      	str	r0, [sp, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 816e 	beq.w	80051e4 <_dtoa_r+0xa74>
 8004f08:	4629      	mov	r1, r5
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	220a      	movs	r2, #10
 8004f0e:	4648      	mov	r0, r9
 8004f10:	f000 fca0 	bl	8005854 <__multadd>
 8004f14:	f1bb 0f00 	cmp.w	fp, #0
 8004f18:	4605      	mov	r5, r0
 8004f1a:	dc64      	bgt.n	8004fe6 <_dtoa_r+0x876>
 8004f1c:	9b07      	ldr	r3, [sp, #28]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	dc3e      	bgt.n	8004fa0 <_dtoa_r+0x830>
 8004f22:	e060      	b.n	8004fe6 <_dtoa_r+0x876>
 8004f24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f26:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004f2a:	e73c      	b.n	8004da6 <_dtoa_r+0x636>
 8004f2c:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8004f30:	42a3      	cmp	r3, r4
 8004f32:	bfbf      	itttt	lt
 8004f34:	1ae2      	sublt	r2, r4, r3
 8004f36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004f38:	189b      	addlt	r3, r3, r2
 8004f3a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8004f3c:	bfae      	itee	ge
 8004f3e:	1b1c      	subge	r4, r3, r4
 8004f40:	4623      	movlt	r3, r4
 8004f42:	2400      	movlt	r4, #0
 8004f44:	f1ba 0f00 	cmp.w	sl, #0
 8004f48:	bfb5      	itete	lt
 8004f4a:	9a05      	ldrlt	r2, [sp, #20]
 8004f4c:	9e05      	ldrge	r6, [sp, #20]
 8004f4e:	eba2 060a 	sublt.w	r6, r2, sl
 8004f52:	4652      	movge	r2, sl
 8004f54:	bfb8      	it	lt
 8004f56:	2200      	movlt	r2, #0
 8004f58:	e727      	b.n	8004daa <_dtoa_r+0x63a>
 8004f5a:	9e05      	ldr	r6, [sp, #20]
 8004f5c:	9d08      	ldr	r5, [sp, #32]
 8004f5e:	461c      	mov	r4, r3
 8004f60:	e730      	b.n	8004dc4 <_dtoa_r+0x654>
 8004f62:	461a      	mov	r2, r3
 8004f64:	e758      	b.n	8004e18 <_dtoa_r+0x6a8>
 8004f66:	2300      	movs	r3, #0
 8004f68:	e786      	b.n	8004e78 <_dtoa_r+0x708>
 8004f6a:	9b02      	ldr	r3, [sp, #8]
 8004f6c:	e784      	b.n	8004e78 <_dtoa_r+0x708>
 8004f6e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004f70:	e783      	b.n	8004e7a <_dtoa_r+0x70a>
 8004f72:	2300      	movs	r3, #0
 8004f74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f76:	e784      	b.n	8004e82 <_dtoa_r+0x712>
 8004f78:	d09d      	beq.n	8004eb6 <_dtoa_r+0x746>
 8004f7a:	9b05      	ldr	r3, [sp, #20]
 8004f7c:	321c      	adds	r2, #28
 8004f7e:	4413      	add	r3, r2
 8004f80:	9305      	str	r3, [sp, #20]
 8004f82:	9b06      	ldr	r3, [sp, #24]
 8004f84:	4416      	add	r6, r2
 8004f86:	4413      	add	r3, r2
 8004f88:	e794      	b.n	8004eb4 <_dtoa_r+0x744>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	e7f5      	b.n	8004f7a <_dtoa_r+0x80a>
 8004f8e:	f1ba 0f00 	cmp.w	sl, #0
 8004f92:	f8cd 8010 	str.w	r8, [sp, #16]
 8004f96:	46d3      	mov	fp, sl
 8004f98:	dc21      	bgt.n	8004fde <_dtoa_r+0x86e>
 8004f9a:	9b07      	ldr	r3, [sp, #28]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	dd1e      	ble.n	8004fde <_dtoa_r+0x86e>
 8004fa0:	f1bb 0f00 	cmp.w	fp, #0
 8004fa4:	f47f aeb7 	bne.w	8004d16 <_dtoa_r+0x5a6>
 8004fa8:	4621      	mov	r1, r4
 8004faa:	465b      	mov	r3, fp
 8004fac:	2205      	movs	r2, #5
 8004fae:	4648      	mov	r0, r9
 8004fb0:	f000 fc50 	bl	8005854 <__multadd>
 8004fb4:	4601      	mov	r1, r0
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	9801      	ldr	r0, [sp, #4]
 8004fba:	f000 fe63 	bl	8005c84 <__mcmp>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	f77f aea9 	ble.w	8004d16 <_dtoa_r+0x5a6>
 8004fc4:	463e      	mov	r6, r7
 8004fc6:	2331      	movs	r3, #49	@ 0x31
 8004fc8:	f806 3b01 	strb.w	r3, [r6], #1
 8004fcc:	9b04      	ldr	r3, [sp, #16]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	9304      	str	r3, [sp, #16]
 8004fd2:	e6a4      	b.n	8004d1e <_dtoa_r+0x5ae>
 8004fd4:	f8cd 8010 	str.w	r8, [sp, #16]
 8004fd8:	4654      	mov	r4, sl
 8004fda:	4625      	mov	r5, r4
 8004fdc:	e7f2      	b.n	8004fc4 <_dtoa_r+0x854>
 8004fde:	9b08      	ldr	r3, [sp, #32]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8103 	beq.w	80051ec <_dtoa_r+0xa7c>
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	dd05      	ble.n	8004ff6 <_dtoa_r+0x886>
 8004fea:	4629      	mov	r1, r5
 8004fec:	4632      	mov	r2, r6
 8004fee:	4648      	mov	r0, r9
 8004ff0:	f000 fddc 	bl	8005bac <__lshift>
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d058      	beq.n	80050ae <_dtoa_r+0x93e>
 8004ffc:	6869      	ldr	r1, [r5, #4]
 8004ffe:	4648      	mov	r0, r9
 8005000:	f000 fbc6 	bl	8005790 <_Balloc>
 8005004:	4606      	mov	r6, r0
 8005006:	b928      	cbnz	r0, 8005014 <_dtoa_r+0x8a4>
 8005008:	4b82      	ldr	r3, [pc, #520]	@ (8005214 <_dtoa_r+0xaa4>)
 800500a:	4602      	mov	r2, r0
 800500c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005010:	f7ff bbc7 	b.w	80047a2 <_dtoa_r+0x32>
 8005014:	692a      	ldr	r2, [r5, #16]
 8005016:	3202      	adds	r2, #2
 8005018:	0092      	lsls	r2, r2, #2
 800501a:	f105 010c 	add.w	r1, r5, #12
 800501e:	300c      	adds	r0, #12
 8005020:	f001 f81a 	bl	8006058 <memcpy>
 8005024:	2201      	movs	r2, #1
 8005026:	4631      	mov	r1, r6
 8005028:	4648      	mov	r0, r9
 800502a:	f000 fdbf 	bl	8005bac <__lshift>
 800502e:	1c7b      	adds	r3, r7, #1
 8005030:	9305      	str	r3, [sp, #20]
 8005032:	eb07 030b 	add.w	r3, r7, fp
 8005036:	9309      	str	r3, [sp, #36]	@ 0x24
 8005038:	9b02      	ldr	r3, [sp, #8]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	46a8      	mov	r8, r5
 8005040:	9308      	str	r3, [sp, #32]
 8005042:	4605      	mov	r5, r0
 8005044:	9b05      	ldr	r3, [sp, #20]
 8005046:	9801      	ldr	r0, [sp, #4]
 8005048:	4621      	mov	r1, r4
 800504a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800504e:	f7ff fb06 	bl	800465e <quorem>
 8005052:	4641      	mov	r1, r8
 8005054:	9002      	str	r0, [sp, #8]
 8005056:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800505a:	9801      	ldr	r0, [sp, #4]
 800505c:	f000 fe12 	bl	8005c84 <__mcmp>
 8005060:	462a      	mov	r2, r5
 8005062:	9006      	str	r0, [sp, #24]
 8005064:	4621      	mov	r1, r4
 8005066:	4648      	mov	r0, r9
 8005068:	f000 fe28 	bl	8005cbc <__mdiff>
 800506c:	68c2      	ldr	r2, [r0, #12]
 800506e:	4606      	mov	r6, r0
 8005070:	b9fa      	cbnz	r2, 80050b2 <_dtoa_r+0x942>
 8005072:	4601      	mov	r1, r0
 8005074:	9801      	ldr	r0, [sp, #4]
 8005076:	f000 fe05 	bl	8005c84 <__mcmp>
 800507a:	4602      	mov	r2, r0
 800507c:	4631      	mov	r1, r6
 800507e:	4648      	mov	r0, r9
 8005080:	920a      	str	r2, [sp, #40]	@ 0x28
 8005082:	f000 fbc5 	bl	8005810 <_Bfree>
 8005086:	9b07      	ldr	r3, [sp, #28]
 8005088:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800508a:	9e05      	ldr	r6, [sp, #20]
 800508c:	ea43 0102 	orr.w	r1, r3, r2
 8005090:	9b08      	ldr	r3, [sp, #32]
 8005092:	4319      	orrs	r1, r3
 8005094:	d10f      	bne.n	80050b6 <_dtoa_r+0x946>
 8005096:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800509a:	d028      	beq.n	80050ee <_dtoa_r+0x97e>
 800509c:	9b06      	ldr	r3, [sp, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	dd02      	ble.n	80050a8 <_dtoa_r+0x938>
 80050a2:	9b02      	ldr	r3, [sp, #8]
 80050a4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80050a8:	f88b a000 	strb.w	sl, [fp]
 80050ac:	e639      	b.n	8004d22 <_dtoa_r+0x5b2>
 80050ae:	4628      	mov	r0, r5
 80050b0:	e7bd      	b.n	800502e <_dtoa_r+0x8be>
 80050b2:	2201      	movs	r2, #1
 80050b4:	e7e2      	b.n	800507c <_dtoa_r+0x90c>
 80050b6:	9b06      	ldr	r3, [sp, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	db04      	blt.n	80050c6 <_dtoa_r+0x956>
 80050bc:	9907      	ldr	r1, [sp, #28]
 80050be:	430b      	orrs	r3, r1
 80050c0:	9908      	ldr	r1, [sp, #32]
 80050c2:	430b      	orrs	r3, r1
 80050c4:	d120      	bne.n	8005108 <_dtoa_r+0x998>
 80050c6:	2a00      	cmp	r2, #0
 80050c8:	ddee      	ble.n	80050a8 <_dtoa_r+0x938>
 80050ca:	9901      	ldr	r1, [sp, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	4648      	mov	r0, r9
 80050d0:	f000 fd6c 	bl	8005bac <__lshift>
 80050d4:	4621      	mov	r1, r4
 80050d6:	9001      	str	r0, [sp, #4]
 80050d8:	f000 fdd4 	bl	8005c84 <__mcmp>
 80050dc:	2800      	cmp	r0, #0
 80050de:	dc03      	bgt.n	80050e8 <_dtoa_r+0x978>
 80050e0:	d1e2      	bne.n	80050a8 <_dtoa_r+0x938>
 80050e2:	f01a 0f01 	tst.w	sl, #1
 80050e6:	d0df      	beq.n	80050a8 <_dtoa_r+0x938>
 80050e8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80050ec:	d1d9      	bne.n	80050a2 <_dtoa_r+0x932>
 80050ee:	2339      	movs	r3, #57	@ 0x39
 80050f0:	f88b 3000 	strb.w	r3, [fp]
 80050f4:	4633      	mov	r3, r6
 80050f6:	461e      	mov	r6, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80050fe:	2a39      	cmp	r2, #57	@ 0x39
 8005100:	d053      	beq.n	80051aa <_dtoa_r+0xa3a>
 8005102:	3201      	adds	r2, #1
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	e60c      	b.n	8004d22 <_dtoa_r+0x5b2>
 8005108:	2a00      	cmp	r2, #0
 800510a:	dd07      	ble.n	800511c <_dtoa_r+0x9ac>
 800510c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005110:	d0ed      	beq.n	80050ee <_dtoa_r+0x97e>
 8005112:	f10a 0301 	add.w	r3, sl, #1
 8005116:	f88b 3000 	strb.w	r3, [fp]
 800511a:	e602      	b.n	8004d22 <_dtoa_r+0x5b2>
 800511c:	9b05      	ldr	r3, [sp, #20]
 800511e:	9a05      	ldr	r2, [sp, #20]
 8005120:	f803 ac01 	strb.w	sl, [r3, #-1]
 8005124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005126:	4293      	cmp	r3, r2
 8005128:	d029      	beq.n	800517e <_dtoa_r+0xa0e>
 800512a:	9901      	ldr	r1, [sp, #4]
 800512c:	2300      	movs	r3, #0
 800512e:	220a      	movs	r2, #10
 8005130:	4648      	mov	r0, r9
 8005132:	f000 fb8f 	bl	8005854 <__multadd>
 8005136:	45a8      	cmp	r8, r5
 8005138:	9001      	str	r0, [sp, #4]
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	f04f 020a 	mov.w	r2, #10
 8005142:	4641      	mov	r1, r8
 8005144:	4648      	mov	r0, r9
 8005146:	d107      	bne.n	8005158 <_dtoa_r+0x9e8>
 8005148:	f000 fb84 	bl	8005854 <__multadd>
 800514c:	4680      	mov	r8, r0
 800514e:	4605      	mov	r5, r0
 8005150:	9b05      	ldr	r3, [sp, #20]
 8005152:	3301      	adds	r3, #1
 8005154:	9305      	str	r3, [sp, #20]
 8005156:	e775      	b.n	8005044 <_dtoa_r+0x8d4>
 8005158:	f000 fb7c 	bl	8005854 <__multadd>
 800515c:	4629      	mov	r1, r5
 800515e:	4680      	mov	r8, r0
 8005160:	2300      	movs	r3, #0
 8005162:	220a      	movs	r2, #10
 8005164:	4648      	mov	r0, r9
 8005166:	f000 fb75 	bl	8005854 <__multadd>
 800516a:	4605      	mov	r5, r0
 800516c:	e7f0      	b.n	8005150 <_dtoa_r+0x9e0>
 800516e:	f1bb 0f00 	cmp.w	fp, #0
 8005172:	bfcc      	ite	gt
 8005174:	465e      	movgt	r6, fp
 8005176:	2601      	movle	r6, #1
 8005178:	443e      	add	r6, r7
 800517a:	f04f 0800 	mov.w	r8, #0
 800517e:	9901      	ldr	r1, [sp, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	4648      	mov	r0, r9
 8005184:	f000 fd12 	bl	8005bac <__lshift>
 8005188:	4621      	mov	r1, r4
 800518a:	9001      	str	r0, [sp, #4]
 800518c:	f000 fd7a 	bl	8005c84 <__mcmp>
 8005190:	2800      	cmp	r0, #0
 8005192:	dcaf      	bgt.n	80050f4 <_dtoa_r+0x984>
 8005194:	d102      	bne.n	800519c <_dtoa_r+0xa2c>
 8005196:	f01a 0f01 	tst.w	sl, #1
 800519a:	d1ab      	bne.n	80050f4 <_dtoa_r+0x984>
 800519c:	4633      	mov	r3, r6
 800519e:	461e      	mov	r6, r3
 80051a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051a4:	2a30      	cmp	r2, #48	@ 0x30
 80051a6:	d0fa      	beq.n	800519e <_dtoa_r+0xa2e>
 80051a8:	e5bb      	b.n	8004d22 <_dtoa_r+0x5b2>
 80051aa:	429f      	cmp	r7, r3
 80051ac:	d1a3      	bne.n	80050f6 <_dtoa_r+0x986>
 80051ae:	9b04      	ldr	r3, [sp, #16]
 80051b0:	3301      	adds	r3, #1
 80051b2:	9304      	str	r3, [sp, #16]
 80051b4:	2331      	movs	r3, #49	@ 0x31
 80051b6:	703b      	strb	r3, [r7, #0]
 80051b8:	e5b3      	b.n	8004d22 <_dtoa_r+0x5b2>
 80051ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80051bc:	4f16      	ldr	r7, [pc, #88]	@ (8005218 <_dtoa_r+0xaa8>)
 80051be:	b11b      	cbz	r3, 80051c8 <_dtoa_r+0xa58>
 80051c0:	f107 0308 	add.w	r3, r7, #8
 80051c4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	4638      	mov	r0, r7
 80051ca:	b011      	add	sp, #68	@ 0x44
 80051cc:	ecbd 8b02 	vpop	{d8}
 80051d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d4:	9b07      	ldr	r3, [sp, #28]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	f77f ae36 	ble.w	8004e48 <_dtoa_r+0x6d8>
 80051dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051e0:	2001      	movs	r0, #1
 80051e2:	e656      	b.n	8004e92 <_dtoa_r+0x722>
 80051e4:	f1bb 0f00 	cmp.w	fp, #0
 80051e8:	f77f aed7 	ble.w	8004f9a <_dtoa_r+0x82a>
 80051ec:	463e      	mov	r6, r7
 80051ee:	9801      	ldr	r0, [sp, #4]
 80051f0:	4621      	mov	r1, r4
 80051f2:	f7ff fa34 	bl	800465e <quorem>
 80051f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80051fa:	f806 ab01 	strb.w	sl, [r6], #1
 80051fe:	1bf2      	subs	r2, r6, r7
 8005200:	4593      	cmp	fp, r2
 8005202:	ddb4      	ble.n	800516e <_dtoa_r+0x9fe>
 8005204:	9901      	ldr	r1, [sp, #4]
 8005206:	2300      	movs	r3, #0
 8005208:	220a      	movs	r2, #10
 800520a:	4648      	mov	r0, r9
 800520c:	f000 fb22 	bl	8005854 <__multadd>
 8005210:	9001      	str	r0, [sp, #4]
 8005212:	e7ec      	b.n	80051ee <_dtoa_r+0xa7e>
 8005214:	08006840 	.word	0x08006840
 8005218:	080067c4 	.word	0x080067c4

0800521c <__ssputs_r>:
 800521c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005220:	688e      	ldr	r6, [r1, #8]
 8005222:	461f      	mov	r7, r3
 8005224:	42be      	cmp	r6, r7
 8005226:	680b      	ldr	r3, [r1, #0]
 8005228:	4682      	mov	sl, r0
 800522a:	460c      	mov	r4, r1
 800522c:	4690      	mov	r8, r2
 800522e:	d82d      	bhi.n	800528c <__ssputs_r+0x70>
 8005230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005234:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005238:	d026      	beq.n	8005288 <__ssputs_r+0x6c>
 800523a:	6965      	ldr	r5, [r4, #20]
 800523c:	6909      	ldr	r1, [r1, #16]
 800523e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005242:	eba3 0901 	sub.w	r9, r3, r1
 8005246:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800524a:	1c7b      	adds	r3, r7, #1
 800524c:	444b      	add	r3, r9
 800524e:	106d      	asrs	r5, r5, #1
 8005250:	429d      	cmp	r5, r3
 8005252:	bf38      	it	cc
 8005254:	461d      	movcc	r5, r3
 8005256:	0553      	lsls	r3, r2, #21
 8005258:	d527      	bpl.n	80052aa <__ssputs_r+0x8e>
 800525a:	4629      	mov	r1, r5
 800525c:	f000 f960 	bl	8005520 <_malloc_r>
 8005260:	4606      	mov	r6, r0
 8005262:	b360      	cbz	r0, 80052be <__ssputs_r+0xa2>
 8005264:	6921      	ldr	r1, [r4, #16]
 8005266:	464a      	mov	r2, r9
 8005268:	f000 fef6 	bl	8006058 <memcpy>
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005276:	81a3      	strh	r3, [r4, #12]
 8005278:	6126      	str	r6, [r4, #16]
 800527a:	6165      	str	r5, [r4, #20]
 800527c:	444e      	add	r6, r9
 800527e:	eba5 0509 	sub.w	r5, r5, r9
 8005282:	6026      	str	r6, [r4, #0]
 8005284:	60a5      	str	r5, [r4, #8]
 8005286:	463e      	mov	r6, r7
 8005288:	42be      	cmp	r6, r7
 800528a:	d900      	bls.n	800528e <__ssputs_r+0x72>
 800528c:	463e      	mov	r6, r7
 800528e:	6820      	ldr	r0, [r4, #0]
 8005290:	4632      	mov	r2, r6
 8005292:	4641      	mov	r1, r8
 8005294:	f000 fe6f 	bl	8005f76 <memmove>
 8005298:	68a3      	ldr	r3, [r4, #8]
 800529a:	1b9b      	subs	r3, r3, r6
 800529c:	60a3      	str	r3, [r4, #8]
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	4433      	add	r3, r6
 80052a2:	6023      	str	r3, [r4, #0]
 80052a4:	2000      	movs	r0, #0
 80052a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052aa:	462a      	mov	r2, r5
 80052ac:	f000 fe35 	bl	8005f1a <_realloc_r>
 80052b0:	4606      	mov	r6, r0
 80052b2:	2800      	cmp	r0, #0
 80052b4:	d1e0      	bne.n	8005278 <__ssputs_r+0x5c>
 80052b6:	6921      	ldr	r1, [r4, #16]
 80052b8:	4650      	mov	r0, sl
 80052ba:	f000 ff0d 	bl	80060d8 <_free_r>
 80052be:	230c      	movs	r3, #12
 80052c0:	f8ca 3000 	str.w	r3, [sl]
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ca:	81a3      	strh	r3, [r4, #12]
 80052cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052d0:	e7e9      	b.n	80052a6 <__ssputs_r+0x8a>
	...

080052d4 <_svfiprintf_r>:
 80052d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d8:	4698      	mov	r8, r3
 80052da:	898b      	ldrh	r3, [r1, #12]
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	b09d      	sub	sp, #116	@ 0x74
 80052e0:	4607      	mov	r7, r0
 80052e2:	460d      	mov	r5, r1
 80052e4:	4614      	mov	r4, r2
 80052e6:	d510      	bpl.n	800530a <_svfiprintf_r+0x36>
 80052e8:	690b      	ldr	r3, [r1, #16]
 80052ea:	b973      	cbnz	r3, 800530a <_svfiprintf_r+0x36>
 80052ec:	2140      	movs	r1, #64	@ 0x40
 80052ee:	f000 f917 	bl	8005520 <_malloc_r>
 80052f2:	6028      	str	r0, [r5, #0]
 80052f4:	6128      	str	r0, [r5, #16]
 80052f6:	b930      	cbnz	r0, 8005306 <_svfiprintf_r+0x32>
 80052f8:	230c      	movs	r3, #12
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005300:	b01d      	add	sp, #116	@ 0x74
 8005302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005306:	2340      	movs	r3, #64	@ 0x40
 8005308:	616b      	str	r3, [r5, #20]
 800530a:	2300      	movs	r3, #0
 800530c:	9309      	str	r3, [sp, #36]	@ 0x24
 800530e:	2320      	movs	r3, #32
 8005310:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005314:	f8cd 800c 	str.w	r8, [sp, #12]
 8005318:	2330      	movs	r3, #48	@ 0x30
 800531a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80054b8 <_svfiprintf_r+0x1e4>
 800531e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005322:	f04f 0901 	mov.w	r9, #1
 8005326:	4623      	mov	r3, r4
 8005328:	469a      	mov	sl, r3
 800532a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800532e:	b10a      	cbz	r2, 8005334 <_svfiprintf_r+0x60>
 8005330:	2a25      	cmp	r2, #37	@ 0x25
 8005332:	d1f9      	bne.n	8005328 <_svfiprintf_r+0x54>
 8005334:	ebba 0b04 	subs.w	fp, sl, r4
 8005338:	d00b      	beq.n	8005352 <_svfiprintf_r+0x7e>
 800533a:	465b      	mov	r3, fp
 800533c:	4622      	mov	r2, r4
 800533e:	4629      	mov	r1, r5
 8005340:	4638      	mov	r0, r7
 8005342:	f7ff ff6b 	bl	800521c <__ssputs_r>
 8005346:	3001      	adds	r0, #1
 8005348:	f000 80a7 	beq.w	800549a <_svfiprintf_r+0x1c6>
 800534c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800534e:	445a      	add	r2, fp
 8005350:	9209      	str	r2, [sp, #36]	@ 0x24
 8005352:	f89a 3000 	ldrb.w	r3, [sl]
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 809f 	beq.w	800549a <_svfiprintf_r+0x1c6>
 800535c:	2300      	movs	r3, #0
 800535e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005366:	f10a 0a01 	add.w	sl, sl, #1
 800536a:	9304      	str	r3, [sp, #16]
 800536c:	9307      	str	r3, [sp, #28]
 800536e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005372:	931a      	str	r3, [sp, #104]	@ 0x68
 8005374:	4654      	mov	r4, sl
 8005376:	2205      	movs	r2, #5
 8005378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800537c:	484e      	ldr	r0, [pc, #312]	@ (80054b8 <_svfiprintf_r+0x1e4>)
 800537e:	f7fa ff5f 	bl	8000240 <memchr>
 8005382:	9a04      	ldr	r2, [sp, #16]
 8005384:	b9d8      	cbnz	r0, 80053be <_svfiprintf_r+0xea>
 8005386:	06d0      	lsls	r0, r2, #27
 8005388:	bf44      	itt	mi
 800538a:	2320      	movmi	r3, #32
 800538c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005390:	0711      	lsls	r1, r2, #28
 8005392:	bf44      	itt	mi
 8005394:	232b      	movmi	r3, #43	@ 0x2b
 8005396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800539a:	f89a 3000 	ldrb.w	r3, [sl]
 800539e:	2b2a      	cmp	r3, #42	@ 0x2a
 80053a0:	d015      	beq.n	80053ce <_svfiprintf_r+0xfa>
 80053a2:	9a07      	ldr	r2, [sp, #28]
 80053a4:	4654      	mov	r4, sl
 80053a6:	2000      	movs	r0, #0
 80053a8:	f04f 0c0a 	mov.w	ip, #10
 80053ac:	4621      	mov	r1, r4
 80053ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053b2:	3b30      	subs	r3, #48	@ 0x30
 80053b4:	2b09      	cmp	r3, #9
 80053b6:	d94b      	bls.n	8005450 <_svfiprintf_r+0x17c>
 80053b8:	b1b0      	cbz	r0, 80053e8 <_svfiprintf_r+0x114>
 80053ba:	9207      	str	r2, [sp, #28]
 80053bc:	e014      	b.n	80053e8 <_svfiprintf_r+0x114>
 80053be:	eba0 0308 	sub.w	r3, r0, r8
 80053c2:	fa09 f303 	lsl.w	r3, r9, r3
 80053c6:	4313      	orrs	r3, r2
 80053c8:	9304      	str	r3, [sp, #16]
 80053ca:	46a2      	mov	sl, r4
 80053cc:	e7d2      	b.n	8005374 <_svfiprintf_r+0xa0>
 80053ce:	9b03      	ldr	r3, [sp, #12]
 80053d0:	1d19      	adds	r1, r3, #4
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	9103      	str	r1, [sp, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bfbb      	ittet	lt
 80053da:	425b      	neglt	r3, r3
 80053dc:	f042 0202 	orrlt.w	r2, r2, #2
 80053e0:	9307      	strge	r3, [sp, #28]
 80053e2:	9307      	strlt	r3, [sp, #28]
 80053e4:	bfb8      	it	lt
 80053e6:	9204      	strlt	r2, [sp, #16]
 80053e8:	7823      	ldrb	r3, [r4, #0]
 80053ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80053ec:	d10a      	bne.n	8005404 <_svfiprintf_r+0x130>
 80053ee:	7863      	ldrb	r3, [r4, #1]
 80053f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80053f2:	d132      	bne.n	800545a <_svfiprintf_r+0x186>
 80053f4:	9b03      	ldr	r3, [sp, #12]
 80053f6:	1d1a      	adds	r2, r3, #4
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	9203      	str	r2, [sp, #12]
 80053fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005400:	3402      	adds	r4, #2
 8005402:	9305      	str	r3, [sp, #20]
 8005404:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80054c8 <_svfiprintf_r+0x1f4>
 8005408:	7821      	ldrb	r1, [r4, #0]
 800540a:	2203      	movs	r2, #3
 800540c:	4650      	mov	r0, sl
 800540e:	f7fa ff17 	bl	8000240 <memchr>
 8005412:	b138      	cbz	r0, 8005424 <_svfiprintf_r+0x150>
 8005414:	9b04      	ldr	r3, [sp, #16]
 8005416:	eba0 000a 	sub.w	r0, r0, sl
 800541a:	2240      	movs	r2, #64	@ 0x40
 800541c:	4082      	lsls	r2, r0
 800541e:	4313      	orrs	r3, r2
 8005420:	3401      	adds	r4, #1
 8005422:	9304      	str	r3, [sp, #16]
 8005424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005428:	4824      	ldr	r0, [pc, #144]	@ (80054bc <_svfiprintf_r+0x1e8>)
 800542a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800542e:	2206      	movs	r2, #6
 8005430:	f7fa ff06 	bl	8000240 <memchr>
 8005434:	2800      	cmp	r0, #0
 8005436:	d036      	beq.n	80054a6 <_svfiprintf_r+0x1d2>
 8005438:	4b21      	ldr	r3, [pc, #132]	@ (80054c0 <_svfiprintf_r+0x1ec>)
 800543a:	bb1b      	cbnz	r3, 8005484 <_svfiprintf_r+0x1b0>
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	3307      	adds	r3, #7
 8005440:	f023 0307 	bic.w	r3, r3, #7
 8005444:	3308      	adds	r3, #8
 8005446:	9303      	str	r3, [sp, #12]
 8005448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800544a:	4433      	add	r3, r6
 800544c:	9309      	str	r3, [sp, #36]	@ 0x24
 800544e:	e76a      	b.n	8005326 <_svfiprintf_r+0x52>
 8005450:	fb0c 3202 	mla	r2, ip, r2, r3
 8005454:	460c      	mov	r4, r1
 8005456:	2001      	movs	r0, #1
 8005458:	e7a8      	b.n	80053ac <_svfiprintf_r+0xd8>
 800545a:	2300      	movs	r3, #0
 800545c:	3401      	adds	r4, #1
 800545e:	9305      	str	r3, [sp, #20]
 8005460:	4619      	mov	r1, r3
 8005462:	f04f 0c0a 	mov.w	ip, #10
 8005466:	4620      	mov	r0, r4
 8005468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800546c:	3a30      	subs	r2, #48	@ 0x30
 800546e:	2a09      	cmp	r2, #9
 8005470:	d903      	bls.n	800547a <_svfiprintf_r+0x1a6>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0c6      	beq.n	8005404 <_svfiprintf_r+0x130>
 8005476:	9105      	str	r1, [sp, #20]
 8005478:	e7c4      	b.n	8005404 <_svfiprintf_r+0x130>
 800547a:	fb0c 2101 	mla	r1, ip, r1, r2
 800547e:	4604      	mov	r4, r0
 8005480:	2301      	movs	r3, #1
 8005482:	e7f0      	b.n	8005466 <_svfiprintf_r+0x192>
 8005484:	ab03      	add	r3, sp, #12
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	462a      	mov	r2, r5
 800548a:	4b0e      	ldr	r3, [pc, #56]	@ (80054c4 <_svfiprintf_r+0x1f0>)
 800548c:	a904      	add	r1, sp, #16
 800548e:	4638      	mov	r0, r7
 8005490:	f7fe fc22 	bl	8003cd8 <_printf_float>
 8005494:	1c42      	adds	r2, r0, #1
 8005496:	4606      	mov	r6, r0
 8005498:	d1d6      	bne.n	8005448 <_svfiprintf_r+0x174>
 800549a:	89ab      	ldrh	r3, [r5, #12]
 800549c:	065b      	lsls	r3, r3, #25
 800549e:	f53f af2d 	bmi.w	80052fc <_svfiprintf_r+0x28>
 80054a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054a4:	e72c      	b.n	8005300 <_svfiprintf_r+0x2c>
 80054a6:	ab03      	add	r3, sp, #12
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	462a      	mov	r2, r5
 80054ac:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <_svfiprintf_r+0x1f0>)
 80054ae:	a904      	add	r1, sp, #16
 80054b0:	4638      	mov	r0, r7
 80054b2:	f7fe fe99 	bl	80041e8 <_printf_i>
 80054b6:	e7ed      	b.n	8005494 <_svfiprintf_r+0x1c0>
 80054b8:	08006851 	.word	0x08006851
 80054bc:	0800685b 	.word	0x0800685b
 80054c0:	08003cd9 	.word	0x08003cd9
 80054c4:	0800521d 	.word	0x0800521d
 80054c8:	08006857 	.word	0x08006857

080054cc <malloc>:
 80054cc:	4b02      	ldr	r3, [pc, #8]	@ (80054d8 <malloc+0xc>)
 80054ce:	4601      	mov	r1, r0
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	f000 b825 	b.w	8005520 <_malloc_r>
 80054d6:	bf00      	nop
 80054d8:	20000018 	.word	0x20000018

080054dc <sbrk_aligned>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	4e0f      	ldr	r6, [pc, #60]	@ (800551c <sbrk_aligned+0x40>)
 80054e0:	460c      	mov	r4, r1
 80054e2:	6831      	ldr	r1, [r6, #0]
 80054e4:	4605      	mov	r5, r0
 80054e6:	b911      	cbnz	r1, 80054ee <sbrk_aligned+0x12>
 80054e8:	f000 fd94 	bl	8006014 <_sbrk_r>
 80054ec:	6030      	str	r0, [r6, #0]
 80054ee:	4621      	mov	r1, r4
 80054f0:	4628      	mov	r0, r5
 80054f2:	f000 fd8f 	bl	8006014 <_sbrk_r>
 80054f6:	1c43      	adds	r3, r0, #1
 80054f8:	d103      	bne.n	8005502 <sbrk_aligned+0x26>
 80054fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80054fe:	4620      	mov	r0, r4
 8005500:	bd70      	pop	{r4, r5, r6, pc}
 8005502:	1cc4      	adds	r4, r0, #3
 8005504:	f024 0403 	bic.w	r4, r4, #3
 8005508:	42a0      	cmp	r0, r4
 800550a:	d0f8      	beq.n	80054fe <sbrk_aligned+0x22>
 800550c:	1a21      	subs	r1, r4, r0
 800550e:	4628      	mov	r0, r5
 8005510:	f000 fd80 	bl	8006014 <_sbrk_r>
 8005514:	3001      	adds	r0, #1
 8005516:	d1f2      	bne.n	80054fe <sbrk_aligned+0x22>
 8005518:	e7ef      	b.n	80054fa <sbrk_aligned+0x1e>
 800551a:	bf00      	nop
 800551c:	20000488 	.word	0x20000488

08005520 <_malloc_r>:
 8005520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005524:	1ccd      	adds	r5, r1, #3
 8005526:	f025 0503 	bic.w	r5, r5, #3
 800552a:	3508      	adds	r5, #8
 800552c:	2d0c      	cmp	r5, #12
 800552e:	bf38      	it	cc
 8005530:	250c      	movcc	r5, #12
 8005532:	2d00      	cmp	r5, #0
 8005534:	4606      	mov	r6, r0
 8005536:	db01      	blt.n	800553c <_malloc_r+0x1c>
 8005538:	42a9      	cmp	r1, r5
 800553a:	d904      	bls.n	8005546 <_malloc_r+0x26>
 800553c:	230c      	movs	r3, #12
 800553e:	6033      	str	r3, [r6, #0]
 8005540:	2000      	movs	r0, #0
 8005542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005546:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800561c <_malloc_r+0xfc>
 800554a:	f000 f915 	bl	8005778 <__malloc_lock>
 800554e:	f8d8 3000 	ldr.w	r3, [r8]
 8005552:	461c      	mov	r4, r3
 8005554:	bb44      	cbnz	r4, 80055a8 <_malloc_r+0x88>
 8005556:	4629      	mov	r1, r5
 8005558:	4630      	mov	r0, r6
 800555a:	f7ff ffbf 	bl	80054dc <sbrk_aligned>
 800555e:	1c43      	adds	r3, r0, #1
 8005560:	4604      	mov	r4, r0
 8005562:	d158      	bne.n	8005616 <_malloc_r+0xf6>
 8005564:	f8d8 4000 	ldr.w	r4, [r8]
 8005568:	4627      	mov	r7, r4
 800556a:	2f00      	cmp	r7, #0
 800556c:	d143      	bne.n	80055f6 <_malloc_r+0xd6>
 800556e:	2c00      	cmp	r4, #0
 8005570:	d04b      	beq.n	800560a <_malloc_r+0xea>
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	4639      	mov	r1, r7
 8005576:	4630      	mov	r0, r6
 8005578:	eb04 0903 	add.w	r9, r4, r3
 800557c:	f000 fd4a 	bl	8006014 <_sbrk_r>
 8005580:	4581      	cmp	r9, r0
 8005582:	d142      	bne.n	800560a <_malloc_r+0xea>
 8005584:	6821      	ldr	r1, [r4, #0]
 8005586:	1a6d      	subs	r5, r5, r1
 8005588:	4629      	mov	r1, r5
 800558a:	4630      	mov	r0, r6
 800558c:	f7ff ffa6 	bl	80054dc <sbrk_aligned>
 8005590:	3001      	adds	r0, #1
 8005592:	d03a      	beq.n	800560a <_malloc_r+0xea>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	442b      	add	r3, r5
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	f8d8 3000 	ldr.w	r3, [r8]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	bb62      	cbnz	r2, 80055fc <_malloc_r+0xdc>
 80055a2:	f8c8 7000 	str.w	r7, [r8]
 80055a6:	e00f      	b.n	80055c8 <_malloc_r+0xa8>
 80055a8:	6822      	ldr	r2, [r4, #0]
 80055aa:	1b52      	subs	r2, r2, r5
 80055ac:	d420      	bmi.n	80055f0 <_malloc_r+0xd0>
 80055ae:	2a0b      	cmp	r2, #11
 80055b0:	d917      	bls.n	80055e2 <_malloc_r+0xc2>
 80055b2:	1961      	adds	r1, r4, r5
 80055b4:	42a3      	cmp	r3, r4
 80055b6:	6025      	str	r5, [r4, #0]
 80055b8:	bf18      	it	ne
 80055ba:	6059      	strne	r1, [r3, #4]
 80055bc:	6863      	ldr	r3, [r4, #4]
 80055be:	bf08      	it	eq
 80055c0:	f8c8 1000 	streq.w	r1, [r8]
 80055c4:	5162      	str	r2, [r4, r5]
 80055c6:	604b      	str	r3, [r1, #4]
 80055c8:	4630      	mov	r0, r6
 80055ca:	f000 f8db 	bl	8005784 <__malloc_unlock>
 80055ce:	f104 000b 	add.w	r0, r4, #11
 80055d2:	1d23      	adds	r3, r4, #4
 80055d4:	f020 0007 	bic.w	r0, r0, #7
 80055d8:	1ac2      	subs	r2, r0, r3
 80055da:	bf1c      	itt	ne
 80055dc:	1a1b      	subne	r3, r3, r0
 80055de:	50a3      	strne	r3, [r4, r2]
 80055e0:	e7af      	b.n	8005542 <_malloc_r+0x22>
 80055e2:	6862      	ldr	r2, [r4, #4]
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	bf0c      	ite	eq
 80055e8:	f8c8 2000 	streq.w	r2, [r8]
 80055ec:	605a      	strne	r2, [r3, #4]
 80055ee:	e7eb      	b.n	80055c8 <_malloc_r+0xa8>
 80055f0:	4623      	mov	r3, r4
 80055f2:	6864      	ldr	r4, [r4, #4]
 80055f4:	e7ae      	b.n	8005554 <_malloc_r+0x34>
 80055f6:	463c      	mov	r4, r7
 80055f8:	687f      	ldr	r7, [r7, #4]
 80055fa:	e7b6      	b.n	800556a <_malloc_r+0x4a>
 80055fc:	461a      	mov	r2, r3
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	42a3      	cmp	r3, r4
 8005602:	d1fb      	bne.n	80055fc <_malloc_r+0xdc>
 8005604:	2300      	movs	r3, #0
 8005606:	6053      	str	r3, [r2, #4]
 8005608:	e7de      	b.n	80055c8 <_malloc_r+0xa8>
 800560a:	230c      	movs	r3, #12
 800560c:	6033      	str	r3, [r6, #0]
 800560e:	4630      	mov	r0, r6
 8005610:	f000 f8b8 	bl	8005784 <__malloc_unlock>
 8005614:	e794      	b.n	8005540 <_malloc_r+0x20>
 8005616:	6005      	str	r5, [r0, #0]
 8005618:	e7d6      	b.n	80055c8 <_malloc_r+0xa8>
 800561a:	bf00      	nop
 800561c:	2000048c 	.word	0x2000048c

08005620 <__sflush_r>:
 8005620:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005628:	0716      	lsls	r6, r2, #28
 800562a:	4605      	mov	r5, r0
 800562c:	460c      	mov	r4, r1
 800562e:	d454      	bmi.n	80056da <__sflush_r+0xba>
 8005630:	684b      	ldr	r3, [r1, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	dc02      	bgt.n	800563c <__sflush_r+0x1c>
 8005636:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005638:	2b00      	cmp	r3, #0
 800563a:	dd48      	ble.n	80056ce <__sflush_r+0xae>
 800563c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800563e:	2e00      	cmp	r6, #0
 8005640:	d045      	beq.n	80056ce <__sflush_r+0xae>
 8005642:	2300      	movs	r3, #0
 8005644:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005648:	682f      	ldr	r7, [r5, #0]
 800564a:	6a21      	ldr	r1, [r4, #32]
 800564c:	602b      	str	r3, [r5, #0]
 800564e:	d030      	beq.n	80056b2 <__sflush_r+0x92>
 8005650:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	0759      	lsls	r1, r3, #29
 8005656:	d505      	bpl.n	8005664 <__sflush_r+0x44>
 8005658:	6863      	ldr	r3, [r4, #4]
 800565a:	1ad2      	subs	r2, r2, r3
 800565c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800565e:	b10b      	cbz	r3, 8005664 <__sflush_r+0x44>
 8005660:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005662:	1ad2      	subs	r2, r2, r3
 8005664:	2300      	movs	r3, #0
 8005666:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005668:	6a21      	ldr	r1, [r4, #32]
 800566a:	4628      	mov	r0, r5
 800566c:	47b0      	blx	r6
 800566e:	1c43      	adds	r3, r0, #1
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	d106      	bne.n	8005682 <__sflush_r+0x62>
 8005674:	6829      	ldr	r1, [r5, #0]
 8005676:	291d      	cmp	r1, #29
 8005678:	d82b      	bhi.n	80056d2 <__sflush_r+0xb2>
 800567a:	4a2a      	ldr	r2, [pc, #168]	@ (8005724 <__sflush_r+0x104>)
 800567c:	410a      	asrs	r2, r1
 800567e:	07d6      	lsls	r6, r2, #31
 8005680:	d427      	bmi.n	80056d2 <__sflush_r+0xb2>
 8005682:	2200      	movs	r2, #0
 8005684:	6062      	str	r2, [r4, #4]
 8005686:	04d9      	lsls	r1, r3, #19
 8005688:	6922      	ldr	r2, [r4, #16]
 800568a:	6022      	str	r2, [r4, #0]
 800568c:	d504      	bpl.n	8005698 <__sflush_r+0x78>
 800568e:	1c42      	adds	r2, r0, #1
 8005690:	d101      	bne.n	8005696 <__sflush_r+0x76>
 8005692:	682b      	ldr	r3, [r5, #0]
 8005694:	b903      	cbnz	r3, 8005698 <__sflush_r+0x78>
 8005696:	6560      	str	r0, [r4, #84]	@ 0x54
 8005698:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800569a:	602f      	str	r7, [r5, #0]
 800569c:	b1b9      	cbz	r1, 80056ce <__sflush_r+0xae>
 800569e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056a2:	4299      	cmp	r1, r3
 80056a4:	d002      	beq.n	80056ac <__sflush_r+0x8c>
 80056a6:	4628      	mov	r0, r5
 80056a8:	f000 fd16 	bl	80060d8 <_free_r>
 80056ac:	2300      	movs	r3, #0
 80056ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80056b0:	e00d      	b.n	80056ce <__sflush_r+0xae>
 80056b2:	2301      	movs	r3, #1
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b0      	blx	r6
 80056b8:	4602      	mov	r2, r0
 80056ba:	1c50      	adds	r0, r2, #1
 80056bc:	d1c9      	bne.n	8005652 <__sflush_r+0x32>
 80056be:	682b      	ldr	r3, [r5, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0c6      	beq.n	8005652 <__sflush_r+0x32>
 80056c4:	2b1d      	cmp	r3, #29
 80056c6:	d001      	beq.n	80056cc <__sflush_r+0xac>
 80056c8:	2b16      	cmp	r3, #22
 80056ca:	d11e      	bne.n	800570a <__sflush_r+0xea>
 80056cc:	602f      	str	r7, [r5, #0]
 80056ce:	2000      	movs	r0, #0
 80056d0:	e022      	b.n	8005718 <__sflush_r+0xf8>
 80056d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056d6:	b21b      	sxth	r3, r3
 80056d8:	e01b      	b.n	8005712 <__sflush_r+0xf2>
 80056da:	690f      	ldr	r7, [r1, #16]
 80056dc:	2f00      	cmp	r7, #0
 80056de:	d0f6      	beq.n	80056ce <__sflush_r+0xae>
 80056e0:	0793      	lsls	r3, r2, #30
 80056e2:	680e      	ldr	r6, [r1, #0]
 80056e4:	bf08      	it	eq
 80056e6:	694b      	ldreq	r3, [r1, #20]
 80056e8:	600f      	str	r7, [r1, #0]
 80056ea:	bf18      	it	ne
 80056ec:	2300      	movne	r3, #0
 80056ee:	eba6 0807 	sub.w	r8, r6, r7
 80056f2:	608b      	str	r3, [r1, #8]
 80056f4:	f1b8 0f00 	cmp.w	r8, #0
 80056f8:	dde9      	ble.n	80056ce <__sflush_r+0xae>
 80056fa:	6a21      	ldr	r1, [r4, #32]
 80056fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80056fe:	4643      	mov	r3, r8
 8005700:	463a      	mov	r2, r7
 8005702:	4628      	mov	r0, r5
 8005704:	47b0      	blx	r6
 8005706:	2800      	cmp	r0, #0
 8005708:	dc08      	bgt.n	800571c <__sflush_r+0xfc>
 800570a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800570e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005712:	81a3      	strh	r3, [r4, #12]
 8005714:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800571c:	4407      	add	r7, r0
 800571e:	eba8 0800 	sub.w	r8, r8, r0
 8005722:	e7e7      	b.n	80056f4 <__sflush_r+0xd4>
 8005724:	dfbffffe 	.word	0xdfbffffe

08005728 <_fflush_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	690b      	ldr	r3, [r1, #16]
 800572c:	4605      	mov	r5, r0
 800572e:	460c      	mov	r4, r1
 8005730:	b913      	cbnz	r3, 8005738 <_fflush_r+0x10>
 8005732:	2500      	movs	r5, #0
 8005734:	4628      	mov	r0, r5
 8005736:	bd38      	pop	{r3, r4, r5, pc}
 8005738:	b118      	cbz	r0, 8005742 <_fflush_r+0x1a>
 800573a:	6a03      	ldr	r3, [r0, #32]
 800573c:	b90b      	cbnz	r3, 8005742 <_fflush_r+0x1a>
 800573e:	f7fe ff1f 	bl	8004580 <__sinit>
 8005742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f3      	beq.n	8005732 <_fflush_r+0xa>
 800574a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800574c:	07d0      	lsls	r0, r2, #31
 800574e:	d404      	bmi.n	800575a <_fflush_r+0x32>
 8005750:	0599      	lsls	r1, r3, #22
 8005752:	d402      	bmi.n	800575a <_fflush_r+0x32>
 8005754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005756:	f7fe ff80 	bl	800465a <__retarget_lock_acquire_recursive>
 800575a:	4628      	mov	r0, r5
 800575c:	4621      	mov	r1, r4
 800575e:	f7ff ff5f 	bl	8005620 <__sflush_r>
 8005762:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005764:	07da      	lsls	r2, r3, #31
 8005766:	4605      	mov	r5, r0
 8005768:	d4e4      	bmi.n	8005734 <_fflush_r+0xc>
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	059b      	lsls	r3, r3, #22
 800576e:	d4e1      	bmi.n	8005734 <_fflush_r+0xc>
 8005770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005772:	f7fe ff73 	bl	800465c <__retarget_lock_release_recursive>
 8005776:	e7dd      	b.n	8005734 <_fflush_r+0xc>

08005778 <__malloc_lock>:
 8005778:	4801      	ldr	r0, [pc, #4]	@ (8005780 <__malloc_lock+0x8>)
 800577a:	f7fe bf6e 	b.w	800465a <__retarget_lock_acquire_recursive>
 800577e:	bf00      	nop
 8005780:	20000484 	.word	0x20000484

08005784 <__malloc_unlock>:
 8005784:	4801      	ldr	r0, [pc, #4]	@ (800578c <__malloc_unlock+0x8>)
 8005786:	f7fe bf69 	b.w	800465c <__retarget_lock_release_recursive>
 800578a:	bf00      	nop
 800578c:	20000484 	.word	0x20000484

08005790 <_Balloc>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	69c6      	ldr	r6, [r0, #28]
 8005794:	4604      	mov	r4, r0
 8005796:	460d      	mov	r5, r1
 8005798:	b976      	cbnz	r6, 80057b8 <_Balloc+0x28>
 800579a:	2010      	movs	r0, #16
 800579c:	f7ff fe96 	bl	80054cc <malloc>
 80057a0:	4602      	mov	r2, r0
 80057a2:	61e0      	str	r0, [r4, #28]
 80057a4:	b920      	cbnz	r0, 80057b0 <_Balloc+0x20>
 80057a6:	4b18      	ldr	r3, [pc, #96]	@ (8005808 <_Balloc+0x78>)
 80057a8:	4818      	ldr	r0, [pc, #96]	@ (800580c <_Balloc+0x7c>)
 80057aa:	216b      	movs	r1, #107	@ 0x6b
 80057ac:	f000 fc62 	bl	8006074 <__assert_func>
 80057b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057b4:	6006      	str	r6, [r0, #0]
 80057b6:	60c6      	str	r6, [r0, #12]
 80057b8:	69e6      	ldr	r6, [r4, #28]
 80057ba:	68f3      	ldr	r3, [r6, #12]
 80057bc:	b183      	cbz	r3, 80057e0 <_Balloc+0x50>
 80057be:	69e3      	ldr	r3, [r4, #28]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80057c6:	b9b8      	cbnz	r0, 80057f8 <_Balloc+0x68>
 80057c8:	2101      	movs	r1, #1
 80057ca:	fa01 f605 	lsl.w	r6, r1, r5
 80057ce:	1d72      	adds	r2, r6, #5
 80057d0:	0092      	lsls	r2, r2, #2
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 fc6c 	bl	80060b0 <_calloc_r>
 80057d8:	b160      	cbz	r0, 80057f4 <_Balloc+0x64>
 80057da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80057de:	e00e      	b.n	80057fe <_Balloc+0x6e>
 80057e0:	2221      	movs	r2, #33	@ 0x21
 80057e2:	2104      	movs	r1, #4
 80057e4:	4620      	mov	r0, r4
 80057e6:	f000 fc63 	bl	80060b0 <_calloc_r>
 80057ea:	69e3      	ldr	r3, [r4, #28]
 80057ec:	60f0      	str	r0, [r6, #12]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e4      	bne.n	80057be <_Balloc+0x2e>
 80057f4:	2000      	movs	r0, #0
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	6802      	ldr	r2, [r0, #0]
 80057fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80057fe:	2300      	movs	r3, #0
 8005800:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005804:	e7f7      	b.n	80057f6 <_Balloc+0x66>
 8005806:	bf00      	nop
 8005808:	080067d1 	.word	0x080067d1
 800580c:	08006862 	.word	0x08006862

08005810 <_Bfree>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	69c6      	ldr	r6, [r0, #28]
 8005814:	4605      	mov	r5, r0
 8005816:	460c      	mov	r4, r1
 8005818:	b976      	cbnz	r6, 8005838 <_Bfree+0x28>
 800581a:	2010      	movs	r0, #16
 800581c:	f7ff fe56 	bl	80054cc <malloc>
 8005820:	4602      	mov	r2, r0
 8005822:	61e8      	str	r0, [r5, #28]
 8005824:	b920      	cbnz	r0, 8005830 <_Bfree+0x20>
 8005826:	4b09      	ldr	r3, [pc, #36]	@ (800584c <_Bfree+0x3c>)
 8005828:	4809      	ldr	r0, [pc, #36]	@ (8005850 <_Bfree+0x40>)
 800582a:	218f      	movs	r1, #143	@ 0x8f
 800582c:	f000 fc22 	bl	8006074 <__assert_func>
 8005830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005834:	6006      	str	r6, [r0, #0]
 8005836:	60c6      	str	r6, [r0, #12]
 8005838:	b13c      	cbz	r4, 800584a <_Bfree+0x3a>
 800583a:	69eb      	ldr	r3, [r5, #28]
 800583c:	6862      	ldr	r2, [r4, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005844:	6021      	str	r1, [r4, #0]
 8005846:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	080067d1 	.word	0x080067d1
 8005850:	08006862 	.word	0x08006862

08005854 <__multadd>:
 8005854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005858:	690d      	ldr	r5, [r1, #16]
 800585a:	4607      	mov	r7, r0
 800585c:	460c      	mov	r4, r1
 800585e:	461e      	mov	r6, r3
 8005860:	f101 0c14 	add.w	ip, r1, #20
 8005864:	2000      	movs	r0, #0
 8005866:	f8dc 3000 	ldr.w	r3, [ip]
 800586a:	b299      	uxth	r1, r3
 800586c:	fb02 6101 	mla	r1, r2, r1, r6
 8005870:	0c1e      	lsrs	r6, r3, #16
 8005872:	0c0b      	lsrs	r3, r1, #16
 8005874:	fb02 3306 	mla	r3, r2, r6, r3
 8005878:	b289      	uxth	r1, r1
 800587a:	3001      	adds	r0, #1
 800587c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005880:	4285      	cmp	r5, r0
 8005882:	f84c 1b04 	str.w	r1, [ip], #4
 8005886:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800588a:	dcec      	bgt.n	8005866 <__multadd+0x12>
 800588c:	b30e      	cbz	r6, 80058d2 <__multadd+0x7e>
 800588e:	68a3      	ldr	r3, [r4, #8]
 8005890:	42ab      	cmp	r3, r5
 8005892:	dc19      	bgt.n	80058c8 <__multadd+0x74>
 8005894:	6861      	ldr	r1, [r4, #4]
 8005896:	4638      	mov	r0, r7
 8005898:	3101      	adds	r1, #1
 800589a:	f7ff ff79 	bl	8005790 <_Balloc>
 800589e:	4680      	mov	r8, r0
 80058a0:	b928      	cbnz	r0, 80058ae <__multadd+0x5a>
 80058a2:	4602      	mov	r2, r0
 80058a4:	4b0c      	ldr	r3, [pc, #48]	@ (80058d8 <__multadd+0x84>)
 80058a6:	480d      	ldr	r0, [pc, #52]	@ (80058dc <__multadd+0x88>)
 80058a8:	21ba      	movs	r1, #186	@ 0xba
 80058aa:	f000 fbe3 	bl	8006074 <__assert_func>
 80058ae:	6922      	ldr	r2, [r4, #16]
 80058b0:	3202      	adds	r2, #2
 80058b2:	f104 010c 	add.w	r1, r4, #12
 80058b6:	0092      	lsls	r2, r2, #2
 80058b8:	300c      	adds	r0, #12
 80058ba:	f000 fbcd 	bl	8006058 <memcpy>
 80058be:	4621      	mov	r1, r4
 80058c0:	4638      	mov	r0, r7
 80058c2:	f7ff ffa5 	bl	8005810 <_Bfree>
 80058c6:	4644      	mov	r4, r8
 80058c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80058cc:	3501      	adds	r5, #1
 80058ce:	615e      	str	r6, [r3, #20]
 80058d0:	6125      	str	r5, [r4, #16]
 80058d2:	4620      	mov	r0, r4
 80058d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d8:	08006840 	.word	0x08006840
 80058dc:	08006862 	.word	0x08006862

080058e0 <__hi0bits>:
 80058e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80058e4:	4603      	mov	r3, r0
 80058e6:	bf36      	itet	cc
 80058e8:	0403      	lslcc	r3, r0, #16
 80058ea:	2000      	movcs	r0, #0
 80058ec:	2010      	movcc	r0, #16
 80058ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058f2:	bf3c      	itt	cc
 80058f4:	021b      	lslcc	r3, r3, #8
 80058f6:	3008      	addcc	r0, #8
 80058f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058fc:	bf3c      	itt	cc
 80058fe:	011b      	lslcc	r3, r3, #4
 8005900:	3004      	addcc	r0, #4
 8005902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005906:	bf3c      	itt	cc
 8005908:	009b      	lslcc	r3, r3, #2
 800590a:	3002      	addcc	r0, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	db05      	blt.n	800591c <__hi0bits+0x3c>
 8005910:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005914:	f100 0001 	add.w	r0, r0, #1
 8005918:	bf08      	it	eq
 800591a:	2020      	moveq	r0, #32
 800591c:	4770      	bx	lr

0800591e <__lo0bits>:
 800591e:	6803      	ldr	r3, [r0, #0]
 8005920:	4602      	mov	r2, r0
 8005922:	f013 0007 	ands.w	r0, r3, #7
 8005926:	d00b      	beq.n	8005940 <__lo0bits+0x22>
 8005928:	07d9      	lsls	r1, r3, #31
 800592a:	d421      	bmi.n	8005970 <__lo0bits+0x52>
 800592c:	0798      	lsls	r0, r3, #30
 800592e:	bf49      	itett	mi
 8005930:	085b      	lsrmi	r3, r3, #1
 8005932:	089b      	lsrpl	r3, r3, #2
 8005934:	2001      	movmi	r0, #1
 8005936:	6013      	strmi	r3, [r2, #0]
 8005938:	bf5c      	itt	pl
 800593a:	6013      	strpl	r3, [r2, #0]
 800593c:	2002      	movpl	r0, #2
 800593e:	4770      	bx	lr
 8005940:	b299      	uxth	r1, r3
 8005942:	b909      	cbnz	r1, 8005948 <__lo0bits+0x2a>
 8005944:	0c1b      	lsrs	r3, r3, #16
 8005946:	2010      	movs	r0, #16
 8005948:	b2d9      	uxtb	r1, r3
 800594a:	b909      	cbnz	r1, 8005950 <__lo0bits+0x32>
 800594c:	3008      	adds	r0, #8
 800594e:	0a1b      	lsrs	r3, r3, #8
 8005950:	0719      	lsls	r1, r3, #28
 8005952:	bf04      	itt	eq
 8005954:	091b      	lsreq	r3, r3, #4
 8005956:	3004      	addeq	r0, #4
 8005958:	0799      	lsls	r1, r3, #30
 800595a:	bf04      	itt	eq
 800595c:	089b      	lsreq	r3, r3, #2
 800595e:	3002      	addeq	r0, #2
 8005960:	07d9      	lsls	r1, r3, #31
 8005962:	d403      	bmi.n	800596c <__lo0bits+0x4e>
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	f100 0001 	add.w	r0, r0, #1
 800596a:	d003      	beq.n	8005974 <__lo0bits+0x56>
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	4770      	bx	lr
 8005970:	2000      	movs	r0, #0
 8005972:	4770      	bx	lr
 8005974:	2020      	movs	r0, #32
 8005976:	4770      	bx	lr

08005978 <__i2b>:
 8005978:	b510      	push	{r4, lr}
 800597a:	460c      	mov	r4, r1
 800597c:	2101      	movs	r1, #1
 800597e:	f7ff ff07 	bl	8005790 <_Balloc>
 8005982:	4602      	mov	r2, r0
 8005984:	b928      	cbnz	r0, 8005992 <__i2b+0x1a>
 8005986:	4b05      	ldr	r3, [pc, #20]	@ (800599c <__i2b+0x24>)
 8005988:	4805      	ldr	r0, [pc, #20]	@ (80059a0 <__i2b+0x28>)
 800598a:	f240 1145 	movw	r1, #325	@ 0x145
 800598e:	f000 fb71 	bl	8006074 <__assert_func>
 8005992:	2301      	movs	r3, #1
 8005994:	6144      	str	r4, [r0, #20]
 8005996:	6103      	str	r3, [r0, #16]
 8005998:	bd10      	pop	{r4, pc}
 800599a:	bf00      	nop
 800599c:	08006840 	.word	0x08006840
 80059a0:	08006862 	.word	0x08006862

080059a4 <__multiply>:
 80059a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a8:	4614      	mov	r4, r2
 80059aa:	690a      	ldr	r2, [r1, #16]
 80059ac:	6923      	ldr	r3, [r4, #16]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	bfa8      	it	ge
 80059b2:	4623      	movge	r3, r4
 80059b4:	460f      	mov	r7, r1
 80059b6:	bfa4      	itt	ge
 80059b8:	460c      	movge	r4, r1
 80059ba:	461f      	movge	r7, r3
 80059bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80059c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80059c4:	68a3      	ldr	r3, [r4, #8]
 80059c6:	6861      	ldr	r1, [r4, #4]
 80059c8:	eb0a 0609 	add.w	r6, sl, r9
 80059cc:	42b3      	cmp	r3, r6
 80059ce:	b085      	sub	sp, #20
 80059d0:	bfb8      	it	lt
 80059d2:	3101      	addlt	r1, #1
 80059d4:	f7ff fedc 	bl	8005790 <_Balloc>
 80059d8:	b930      	cbnz	r0, 80059e8 <__multiply+0x44>
 80059da:	4602      	mov	r2, r0
 80059dc:	4b44      	ldr	r3, [pc, #272]	@ (8005af0 <__multiply+0x14c>)
 80059de:	4845      	ldr	r0, [pc, #276]	@ (8005af4 <__multiply+0x150>)
 80059e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80059e4:	f000 fb46 	bl	8006074 <__assert_func>
 80059e8:	f100 0514 	add.w	r5, r0, #20
 80059ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80059f0:	462b      	mov	r3, r5
 80059f2:	2200      	movs	r2, #0
 80059f4:	4543      	cmp	r3, r8
 80059f6:	d321      	bcc.n	8005a3c <__multiply+0x98>
 80059f8:	f107 0114 	add.w	r1, r7, #20
 80059fc:	f104 0214 	add.w	r2, r4, #20
 8005a00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005a04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005a08:	9302      	str	r3, [sp, #8]
 8005a0a:	1b13      	subs	r3, r2, r4
 8005a0c:	3b15      	subs	r3, #21
 8005a0e:	f023 0303 	bic.w	r3, r3, #3
 8005a12:	3304      	adds	r3, #4
 8005a14:	f104 0715 	add.w	r7, r4, #21
 8005a18:	42ba      	cmp	r2, r7
 8005a1a:	bf38      	it	cc
 8005a1c:	2304      	movcc	r3, #4
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	9b02      	ldr	r3, [sp, #8]
 8005a22:	9103      	str	r1, [sp, #12]
 8005a24:	428b      	cmp	r3, r1
 8005a26:	d80c      	bhi.n	8005a42 <__multiply+0x9e>
 8005a28:	2e00      	cmp	r6, #0
 8005a2a:	dd03      	ble.n	8005a34 <__multiply+0x90>
 8005a2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d05b      	beq.n	8005aec <__multiply+0x148>
 8005a34:	6106      	str	r6, [r0, #16]
 8005a36:	b005      	add	sp, #20
 8005a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3c:	f843 2b04 	str.w	r2, [r3], #4
 8005a40:	e7d8      	b.n	80059f4 <__multiply+0x50>
 8005a42:	f8b1 a000 	ldrh.w	sl, [r1]
 8005a46:	f1ba 0f00 	cmp.w	sl, #0
 8005a4a:	d024      	beq.n	8005a96 <__multiply+0xf2>
 8005a4c:	f104 0e14 	add.w	lr, r4, #20
 8005a50:	46a9      	mov	r9, r5
 8005a52:	f04f 0c00 	mov.w	ip, #0
 8005a56:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005a5a:	f8d9 3000 	ldr.w	r3, [r9]
 8005a5e:	fa1f fb87 	uxth.w	fp, r7
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	fb0a 330b 	mla	r3, sl, fp, r3
 8005a68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005a6c:	f8d9 7000 	ldr.w	r7, [r9]
 8005a70:	4463      	add	r3, ip
 8005a72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005a76:	fb0a c70b 	mla	r7, sl, fp, ip
 8005a7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005a84:	4572      	cmp	r2, lr
 8005a86:	f849 3b04 	str.w	r3, [r9], #4
 8005a8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005a8e:	d8e2      	bhi.n	8005a56 <__multiply+0xb2>
 8005a90:	9b01      	ldr	r3, [sp, #4]
 8005a92:	f845 c003 	str.w	ip, [r5, r3]
 8005a96:	9b03      	ldr	r3, [sp, #12]
 8005a98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005a9c:	3104      	adds	r1, #4
 8005a9e:	f1b9 0f00 	cmp.w	r9, #0
 8005aa2:	d021      	beq.n	8005ae8 <__multiply+0x144>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	f104 0c14 	add.w	ip, r4, #20
 8005aaa:	46ae      	mov	lr, r5
 8005aac:	f04f 0a00 	mov.w	sl, #0
 8005ab0:	f8bc b000 	ldrh.w	fp, [ip]
 8005ab4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005ab8:	fb09 770b 	mla	r7, r9, fp, r7
 8005abc:	4457      	add	r7, sl
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ac4:	f84e 3b04 	str.w	r3, [lr], #4
 8005ac8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005acc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ad0:	f8be 3000 	ldrh.w	r3, [lr]
 8005ad4:	fb09 330a 	mla	r3, r9, sl, r3
 8005ad8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005adc:	4562      	cmp	r2, ip
 8005ade:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ae2:	d8e5      	bhi.n	8005ab0 <__multiply+0x10c>
 8005ae4:	9f01      	ldr	r7, [sp, #4]
 8005ae6:	51eb      	str	r3, [r5, r7]
 8005ae8:	3504      	adds	r5, #4
 8005aea:	e799      	b.n	8005a20 <__multiply+0x7c>
 8005aec:	3e01      	subs	r6, #1
 8005aee:	e79b      	b.n	8005a28 <__multiply+0x84>
 8005af0:	08006840 	.word	0x08006840
 8005af4:	08006862 	.word	0x08006862

08005af8 <__pow5mult>:
 8005af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005afc:	4615      	mov	r5, r2
 8005afe:	f012 0203 	ands.w	r2, r2, #3
 8005b02:	4607      	mov	r7, r0
 8005b04:	460e      	mov	r6, r1
 8005b06:	d007      	beq.n	8005b18 <__pow5mult+0x20>
 8005b08:	4c25      	ldr	r4, [pc, #148]	@ (8005ba0 <__pow5mult+0xa8>)
 8005b0a:	3a01      	subs	r2, #1
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b12:	f7ff fe9f 	bl	8005854 <__multadd>
 8005b16:	4606      	mov	r6, r0
 8005b18:	10ad      	asrs	r5, r5, #2
 8005b1a:	d03d      	beq.n	8005b98 <__pow5mult+0xa0>
 8005b1c:	69fc      	ldr	r4, [r7, #28]
 8005b1e:	b97c      	cbnz	r4, 8005b40 <__pow5mult+0x48>
 8005b20:	2010      	movs	r0, #16
 8005b22:	f7ff fcd3 	bl	80054cc <malloc>
 8005b26:	4602      	mov	r2, r0
 8005b28:	61f8      	str	r0, [r7, #28]
 8005b2a:	b928      	cbnz	r0, 8005b38 <__pow5mult+0x40>
 8005b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba4 <__pow5mult+0xac>)
 8005b2e:	481e      	ldr	r0, [pc, #120]	@ (8005ba8 <__pow5mult+0xb0>)
 8005b30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005b34:	f000 fa9e 	bl	8006074 <__assert_func>
 8005b38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b3c:	6004      	str	r4, [r0, #0]
 8005b3e:	60c4      	str	r4, [r0, #12]
 8005b40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005b44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b48:	b94c      	cbnz	r4, 8005b5e <__pow5mult+0x66>
 8005b4a:	f240 2171 	movw	r1, #625	@ 0x271
 8005b4e:	4638      	mov	r0, r7
 8005b50:	f7ff ff12 	bl	8005978 <__i2b>
 8005b54:	2300      	movs	r3, #0
 8005b56:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	6003      	str	r3, [r0, #0]
 8005b5e:	f04f 0900 	mov.w	r9, #0
 8005b62:	07eb      	lsls	r3, r5, #31
 8005b64:	d50a      	bpl.n	8005b7c <__pow5mult+0x84>
 8005b66:	4631      	mov	r1, r6
 8005b68:	4622      	mov	r2, r4
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	f7ff ff1a 	bl	80059a4 <__multiply>
 8005b70:	4631      	mov	r1, r6
 8005b72:	4680      	mov	r8, r0
 8005b74:	4638      	mov	r0, r7
 8005b76:	f7ff fe4b 	bl	8005810 <_Bfree>
 8005b7a:	4646      	mov	r6, r8
 8005b7c:	106d      	asrs	r5, r5, #1
 8005b7e:	d00b      	beq.n	8005b98 <__pow5mult+0xa0>
 8005b80:	6820      	ldr	r0, [r4, #0]
 8005b82:	b938      	cbnz	r0, 8005b94 <__pow5mult+0x9c>
 8005b84:	4622      	mov	r2, r4
 8005b86:	4621      	mov	r1, r4
 8005b88:	4638      	mov	r0, r7
 8005b8a:	f7ff ff0b 	bl	80059a4 <__multiply>
 8005b8e:	6020      	str	r0, [r4, #0]
 8005b90:	f8c0 9000 	str.w	r9, [r0]
 8005b94:	4604      	mov	r4, r0
 8005b96:	e7e4      	b.n	8005b62 <__pow5mult+0x6a>
 8005b98:	4630      	mov	r0, r6
 8005b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b9e:	bf00      	nop
 8005ba0:	080068bc 	.word	0x080068bc
 8005ba4:	080067d1 	.word	0x080067d1
 8005ba8:	08006862 	.word	0x08006862

08005bac <__lshift>:
 8005bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	6849      	ldr	r1, [r1, #4]
 8005bb4:	6923      	ldr	r3, [r4, #16]
 8005bb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005bba:	68a3      	ldr	r3, [r4, #8]
 8005bbc:	4607      	mov	r7, r0
 8005bbe:	4691      	mov	r9, r2
 8005bc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005bc4:	f108 0601 	add.w	r6, r8, #1
 8005bc8:	42b3      	cmp	r3, r6
 8005bca:	db0b      	blt.n	8005be4 <__lshift+0x38>
 8005bcc:	4638      	mov	r0, r7
 8005bce:	f7ff fddf 	bl	8005790 <_Balloc>
 8005bd2:	4605      	mov	r5, r0
 8005bd4:	b948      	cbnz	r0, 8005bea <__lshift+0x3e>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	4b28      	ldr	r3, [pc, #160]	@ (8005c7c <__lshift+0xd0>)
 8005bda:	4829      	ldr	r0, [pc, #164]	@ (8005c80 <__lshift+0xd4>)
 8005bdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005be0:	f000 fa48 	bl	8006074 <__assert_func>
 8005be4:	3101      	adds	r1, #1
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	e7ee      	b.n	8005bc8 <__lshift+0x1c>
 8005bea:	2300      	movs	r3, #0
 8005bec:	f100 0114 	add.w	r1, r0, #20
 8005bf0:	f100 0210 	add.w	r2, r0, #16
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	4553      	cmp	r3, sl
 8005bf8:	db33      	blt.n	8005c62 <__lshift+0xb6>
 8005bfa:	6920      	ldr	r0, [r4, #16]
 8005bfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c00:	f104 0314 	add.w	r3, r4, #20
 8005c04:	f019 091f 	ands.w	r9, r9, #31
 8005c08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c10:	d02b      	beq.n	8005c6a <__lshift+0xbe>
 8005c12:	f1c9 0e20 	rsb	lr, r9, #32
 8005c16:	468a      	mov	sl, r1
 8005c18:	2200      	movs	r2, #0
 8005c1a:	6818      	ldr	r0, [r3, #0]
 8005c1c:	fa00 f009 	lsl.w	r0, r0, r9
 8005c20:	4310      	orrs	r0, r2
 8005c22:	f84a 0b04 	str.w	r0, [sl], #4
 8005c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c2a:	459c      	cmp	ip, r3
 8005c2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005c30:	d8f3      	bhi.n	8005c1a <__lshift+0x6e>
 8005c32:	ebac 0304 	sub.w	r3, ip, r4
 8005c36:	3b15      	subs	r3, #21
 8005c38:	f023 0303 	bic.w	r3, r3, #3
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	f104 0015 	add.w	r0, r4, #21
 8005c42:	4584      	cmp	ip, r0
 8005c44:	bf38      	it	cc
 8005c46:	2304      	movcc	r3, #4
 8005c48:	50ca      	str	r2, [r1, r3]
 8005c4a:	b10a      	cbz	r2, 8005c50 <__lshift+0xa4>
 8005c4c:	f108 0602 	add.w	r6, r8, #2
 8005c50:	3e01      	subs	r6, #1
 8005c52:	4638      	mov	r0, r7
 8005c54:	612e      	str	r6, [r5, #16]
 8005c56:	4621      	mov	r1, r4
 8005c58:	f7ff fdda 	bl	8005810 <_Bfree>
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c62:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c66:	3301      	adds	r3, #1
 8005c68:	e7c5      	b.n	8005bf6 <__lshift+0x4a>
 8005c6a:	3904      	subs	r1, #4
 8005c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c70:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c74:	459c      	cmp	ip, r3
 8005c76:	d8f9      	bhi.n	8005c6c <__lshift+0xc0>
 8005c78:	e7ea      	b.n	8005c50 <__lshift+0xa4>
 8005c7a:	bf00      	nop
 8005c7c:	08006840 	.word	0x08006840
 8005c80:	08006862 	.word	0x08006862

08005c84 <__mcmp>:
 8005c84:	690a      	ldr	r2, [r1, #16]
 8005c86:	4603      	mov	r3, r0
 8005c88:	6900      	ldr	r0, [r0, #16]
 8005c8a:	1a80      	subs	r0, r0, r2
 8005c8c:	b530      	push	{r4, r5, lr}
 8005c8e:	d10e      	bne.n	8005cae <__mcmp+0x2a>
 8005c90:	3314      	adds	r3, #20
 8005c92:	3114      	adds	r1, #20
 8005c94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005c98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005c9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ca0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ca4:	4295      	cmp	r5, r2
 8005ca6:	d003      	beq.n	8005cb0 <__mcmp+0x2c>
 8005ca8:	d205      	bcs.n	8005cb6 <__mcmp+0x32>
 8005caa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cae:	bd30      	pop	{r4, r5, pc}
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	d3f3      	bcc.n	8005c9c <__mcmp+0x18>
 8005cb4:	e7fb      	b.n	8005cae <__mcmp+0x2a>
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	e7f9      	b.n	8005cae <__mcmp+0x2a>
	...

08005cbc <__mdiff>:
 8005cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	4689      	mov	r9, r1
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	4648      	mov	r0, r9
 8005cc8:	4614      	mov	r4, r2
 8005cca:	f7ff ffdb 	bl	8005c84 <__mcmp>
 8005cce:	1e05      	subs	r5, r0, #0
 8005cd0:	d112      	bne.n	8005cf8 <__mdiff+0x3c>
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	f7ff fd5b 	bl	8005790 <_Balloc>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	b928      	cbnz	r0, 8005cea <__mdiff+0x2e>
 8005cde:	4b3f      	ldr	r3, [pc, #252]	@ (8005ddc <__mdiff+0x120>)
 8005ce0:	f240 2137 	movw	r1, #567	@ 0x237
 8005ce4:	483e      	ldr	r0, [pc, #248]	@ (8005de0 <__mdiff+0x124>)
 8005ce6:	f000 f9c5 	bl	8006074 <__assert_func>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	b003      	add	sp, #12
 8005cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf8:	bfbc      	itt	lt
 8005cfa:	464b      	movlt	r3, r9
 8005cfc:	46a1      	movlt	r9, r4
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005d04:	bfba      	itte	lt
 8005d06:	461c      	movlt	r4, r3
 8005d08:	2501      	movlt	r5, #1
 8005d0a:	2500      	movge	r5, #0
 8005d0c:	f7ff fd40 	bl	8005790 <_Balloc>
 8005d10:	4602      	mov	r2, r0
 8005d12:	b918      	cbnz	r0, 8005d1c <__mdiff+0x60>
 8005d14:	4b31      	ldr	r3, [pc, #196]	@ (8005ddc <__mdiff+0x120>)
 8005d16:	f240 2145 	movw	r1, #581	@ 0x245
 8005d1a:	e7e3      	b.n	8005ce4 <__mdiff+0x28>
 8005d1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005d20:	6926      	ldr	r6, [r4, #16]
 8005d22:	60c5      	str	r5, [r0, #12]
 8005d24:	f109 0310 	add.w	r3, r9, #16
 8005d28:	f109 0514 	add.w	r5, r9, #20
 8005d2c:	f104 0e14 	add.w	lr, r4, #20
 8005d30:	f100 0b14 	add.w	fp, r0, #20
 8005d34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005d38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	46d9      	mov	r9, fp
 8005d40:	f04f 0c00 	mov.w	ip, #0
 8005d44:	9b01      	ldr	r3, [sp, #4]
 8005d46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005d4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	fa1f f38a 	uxth.w	r3, sl
 8005d54:	4619      	mov	r1, r3
 8005d56:	b283      	uxth	r3, r0
 8005d58:	1acb      	subs	r3, r1, r3
 8005d5a:	0c00      	lsrs	r0, r0, #16
 8005d5c:	4463      	add	r3, ip
 8005d5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005d62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005d6c:	4576      	cmp	r6, lr
 8005d6e:	f849 3b04 	str.w	r3, [r9], #4
 8005d72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005d76:	d8e5      	bhi.n	8005d44 <__mdiff+0x88>
 8005d78:	1b33      	subs	r3, r6, r4
 8005d7a:	3b15      	subs	r3, #21
 8005d7c:	f023 0303 	bic.w	r3, r3, #3
 8005d80:	3415      	adds	r4, #21
 8005d82:	3304      	adds	r3, #4
 8005d84:	42a6      	cmp	r6, r4
 8005d86:	bf38      	it	cc
 8005d88:	2304      	movcc	r3, #4
 8005d8a:	441d      	add	r5, r3
 8005d8c:	445b      	add	r3, fp
 8005d8e:	461e      	mov	r6, r3
 8005d90:	462c      	mov	r4, r5
 8005d92:	4544      	cmp	r4, r8
 8005d94:	d30e      	bcc.n	8005db4 <__mdiff+0xf8>
 8005d96:	f108 0103 	add.w	r1, r8, #3
 8005d9a:	1b49      	subs	r1, r1, r5
 8005d9c:	f021 0103 	bic.w	r1, r1, #3
 8005da0:	3d03      	subs	r5, #3
 8005da2:	45a8      	cmp	r8, r5
 8005da4:	bf38      	it	cc
 8005da6:	2100      	movcc	r1, #0
 8005da8:	440b      	add	r3, r1
 8005daa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005dae:	b191      	cbz	r1, 8005dd6 <__mdiff+0x11a>
 8005db0:	6117      	str	r7, [r2, #16]
 8005db2:	e79d      	b.n	8005cf0 <__mdiff+0x34>
 8005db4:	f854 1b04 	ldr.w	r1, [r4], #4
 8005db8:	46e6      	mov	lr, ip
 8005dba:	0c08      	lsrs	r0, r1, #16
 8005dbc:	fa1c fc81 	uxtah	ip, ip, r1
 8005dc0:	4471      	add	r1, lr
 8005dc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005dc6:	b289      	uxth	r1, r1
 8005dc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005dcc:	f846 1b04 	str.w	r1, [r6], #4
 8005dd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005dd4:	e7dd      	b.n	8005d92 <__mdiff+0xd6>
 8005dd6:	3f01      	subs	r7, #1
 8005dd8:	e7e7      	b.n	8005daa <__mdiff+0xee>
 8005dda:	bf00      	nop
 8005ddc:	08006840 	.word	0x08006840
 8005de0:	08006862 	.word	0x08006862

08005de4 <__d2b>:
 8005de4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005de8:	460f      	mov	r7, r1
 8005dea:	2101      	movs	r1, #1
 8005dec:	ec59 8b10 	vmov	r8, r9, d0
 8005df0:	4616      	mov	r6, r2
 8005df2:	f7ff fccd 	bl	8005790 <_Balloc>
 8005df6:	4604      	mov	r4, r0
 8005df8:	b930      	cbnz	r0, 8005e08 <__d2b+0x24>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4b23      	ldr	r3, [pc, #140]	@ (8005e8c <__d2b+0xa8>)
 8005dfe:	4824      	ldr	r0, [pc, #144]	@ (8005e90 <__d2b+0xac>)
 8005e00:	f240 310f 	movw	r1, #783	@ 0x30f
 8005e04:	f000 f936 	bl	8006074 <__assert_func>
 8005e08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e10:	b10d      	cbz	r5, 8005e16 <__d2b+0x32>
 8005e12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	f1b8 0300 	subs.w	r3, r8, #0
 8005e1c:	d023      	beq.n	8005e66 <__d2b+0x82>
 8005e1e:	4668      	mov	r0, sp
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	f7ff fd7c 	bl	800591e <__lo0bits>
 8005e26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005e2a:	b1d0      	cbz	r0, 8005e62 <__d2b+0x7e>
 8005e2c:	f1c0 0320 	rsb	r3, r0, #32
 8005e30:	fa02 f303 	lsl.w	r3, r2, r3
 8005e34:	430b      	orrs	r3, r1
 8005e36:	40c2      	lsrs	r2, r0
 8005e38:	6163      	str	r3, [r4, #20]
 8005e3a:	9201      	str	r2, [sp, #4]
 8005e3c:	9b01      	ldr	r3, [sp, #4]
 8005e3e:	61a3      	str	r3, [r4, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	bf0c      	ite	eq
 8005e44:	2201      	moveq	r2, #1
 8005e46:	2202      	movne	r2, #2
 8005e48:	6122      	str	r2, [r4, #16]
 8005e4a:	b1a5      	cbz	r5, 8005e76 <__d2b+0x92>
 8005e4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005e50:	4405      	add	r5, r0
 8005e52:	603d      	str	r5, [r7, #0]
 8005e54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005e58:	6030      	str	r0, [r6, #0]
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	b003      	add	sp, #12
 8005e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e62:	6161      	str	r1, [r4, #20]
 8005e64:	e7ea      	b.n	8005e3c <__d2b+0x58>
 8005e66:	a801      	add	r0, sp, #4
 8005e68:	f7ff fd59 	bl	800591e <__lo0bits>
 8005e6c:	9b01      	ldr	r3, [sp, #4]
 8005e6e:	6163      	str	r3, [r4, #20]
 8005e70:	3020      	adds	r0, #32
 8005e72:	2201      	movs	r2, #1
 8005e74:	e7e8      	b.n	8005e48 <__d2b+0x64>
 8005e76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005e7e:	6038      	str	r0, [r7, #0]
 8005e80:	6918      	ldr	r0, [r3, #16]
 8005e82:	f7ff fd2d 	bl	80058e0 <__hi0bits>
 8005e86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005e8a:	e7e5      	b.n	8005e58 <__d2b+0x74>
 8005e8c:	08006840 	.word	0x08006840
 8005e90:	08006862 	.word	0x08006862

08005e94 <__sread>:
 8005e94:	b510      	push	{r4, lr}
 8005e96:	460c      	mov	r4, r1
 8005e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9c:	f000 f8a8 	bl	8005ff0 <_read_r>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	bfab      	itete	ge
 8005ea4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ea6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ea8:	181b      	addge	r3, r3, r0
 8005eaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005eae:	bfac      	ite	ge
 8005eb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005eb2:	81a3      	strhlt	r3, [r4, #12]
 8005eb4:	bd10      	pop	{r4, pc}

08005eb6 <__swrite>:
 8005eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eba:	461f      	mov	r7, r3
 8005ebc:	898b      	ldrh	r3, [r1, #12]
 8005ebe:	05db      	lsls	r3, r3, #23
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	4616      	mov	r6, r2
 8005ec6:	d505      	bpl.n	8005ed4 <__swrite+0x1e>
 8005ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ecc:	2302      	movs	r3, #2
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f000 f87c 	bl	8005fcc <_lseek_r>
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ede:	81a3      	strh	r3, [r4, #12]
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eea:	f000 b8a3 	b.w	8006034 <_write_r>

08005eee <__sseek>:
 8005eee:	b510      	push	{r4, lr}
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef6:	f000 f869 	bl	8005fcc <_lseek_r>
 8005efa:	1c43      	adds	r3, r0, #1
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	bf15      	itete	ne
 8005f00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f0a:	81a3      	strheq	r3, [r4, #12]
 8005f0c:	bf18      	it	ne
 8005f0e:	81a3      	strhne	r3, [r4, #12]
 8005f10:	bd10      	pop	{r4, pc}

08005f12 <__sclose>:
 8005f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f16:	f000 b849 	b.w	8005fac <_close_r>

08005f1a <_realloc_r>:
 8005f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1e:	4680      	mov	r8, r0
 8005f20:	4615      	mov	r5, r2
 8005f22:	460c      	mov	r4, r1
 8005f24:	b921      	cbnz	r1, 8005f30 <_realloc_r+0x16>
 8005f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	f7ff baf8 	b.w	8005520 <_malloc_r>
 8005f30:	b92a      	cbnz	r2, 8005f3e <_realloc_r+0x24>
 8005f32:	f000 f8d1 	bl	80060d8 <_free_r>
 8005f36:	2400      	movs	r4, #0
 8005f38:	4620      	mov	r0, r4
 8005f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f3e:	f000 f927 	bl	8006190 <_malloc_usable_size_r>
 8005f42:	4285      	cmp	r5, r0
 8005f44:	4606      	mov	r6, r0
 8005f46:	d802      	bhi.n	8005f4e <_realloc_r+0x34>
 8005f48:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005f4c:	d8f4      	bhi.n	8005f38 <_realloc_r+0x1e>
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4640      	mov	r0, r8
 8005f52:	f7ff fae5 	bl	8005520 <_malloc_r>
 8005f56:	4607      	mov	r7, r0
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d0ec      	beq.n	8005f36 <_realloc_r+0x1c>
 8005f5c:	42b5      	cmp	r5, r6
 8005f5e:	462a      	mov	r2, r5
 8005f60:	4621      	mov	r1, r4
 8005f62:	bf28      	it	cs
 8005f64:	4632      	movcs	r2, r6
 8005f66:	f000 f877 	bl	8006058 <memcpy>
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	f000 f8b3 	bl	80060d8 <_free_r>
 8005f72:	463c      	mov	r4, r7
 8005f74:	e7e0      	b.n	8005f38 <_realloc_r+0x1e>

08005f76 <memmove>:
 8005f76:	4288      	cmp	r0, r1
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	eb01 0402 	add.w	r4, r1, r2
 8005f7e:	d902      	bls.n	8005f86 <memmove+0x10>
 8005f80:	4284      	cmp	r4, r0
 8005f82:	4623      	mov	r3, r4
 8005f84:	d807      	bhi.n	8005f96 <memmove+0x20>
 8005f86:	1e43      	subs	r3, r0, #1
 8005f88:	42a1      	cmp	r1, r4
 8005f8a:	d008      	beq.n	8005f9e <memmove+0x28>
 8005f8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f90:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f94:	e7f8      	b.n	8005f88 <memmove+0x12>
 8005f96:	4402      	add	r2, r0
 8005f98:	4601      	mov	r1, r0
 8005f9a:	428a      	cmp	r2, r1
 8005f9c:	d100      	bne.n	8005fa0 <memmove+0x2a>
 8005f9e:	bd10      	pop	{r4, pc}
 8005fa0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fa4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fa8:	e7f7      	b.n	8005f9a <memmove+0x24>
	...

08005fac <_close_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4d06      	ldr	r5, [pc, #24]	@ (8005fc8 <_close_r+0x1c>)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	602b      	str	r3, [r5, #0]
 8005fb8:	f7fa fec5 	bl	8000d46 <_close>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_close_r+0x1a>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_close_r+0x1a>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	20000490 	.word	0x20000490

08005fcc <_lseek_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d07      	ldr	r5, [pc, #28]	@ (8005fec <_lseek_r+0x20>)
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	4608      	mov	r0, r1
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	602a      	str	r2, [r5, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f7fa feda 	bl	8000d94 <_lseek>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_lseek_r+0x1e>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_lseek_r+0x1e>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	20000490 	.word	0x20000490

08005ff0 <_read_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4d07      	ldr	r5, [pc, #28]	@ (8006010 <_read_r+0x20>)
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	4608      	mov	r0, r1
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	602a      	str	r2, [r5, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	f7fa fe68 	bl	8000cd4 <_read>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d102      	bne.n	800600e <_read_r+0x1e>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	b103      	cbz	r3, 800600e <_read_r+0x1e>
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	20000490 	.word	0x20000490

08006014 <_sbrk_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4d06      	ldr	r5, [pc, #24]	@ (8006030 <_sbrk_r+0x1c>)
 8006018:	2300      	movs	r3, #0
 800601a:	4604      	mov	r4, r0
 800601c:	4608      	mov	r0, r1
 800601e:	602b      	str	r3, [r5, #0]
 8006020:	f7fa fec6 	bl	8000db0 <_sbrk>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_sbrk_r+0x1a>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_sbrk_r+0x1a>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	20000490 	.word	0x20000490

08006034 <_write_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	4d07      	ldr	r5, [pc, #28]	@ (8006054 <_write_r+0x20>)
 8006038:	4604      	mov	r4, r0
 800603a:	4608      	mov	r0, r1
 800603c:	4611      	mov	r1, r2
 800603e:	2200      	movs	r2, #0
 8006040:	602a      	str	r2, [r5, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	f7fa fe63 	bl	8000d0e <_write>
 8006048:	1c43      	adds	r3, r0, #1
 800604a:	d102      	bne.n	8006052 <_write_r+0x1e>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	b103      	cbz	r3, 8006052 <_write_r+0x1e>
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	bd38      	pop	{r3, r4, r5, pc}
 8006054:	20000490 	.word	0x20000490

08006058 <memcpy>:
 8006058:	440a      	add	r2, r1
 800605a:	4291      	cmp	r1, r2
 800605c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006060:	d100      	bne.n	8006064 <memcpy+0xc>
 8006062:	4770      	bx	lr
 8006064:	b510      	push	{r4, lr}
 8006066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800606a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800606e:	4291      	cmp	r1, r2
 8006070:	d1f9      	bne.n	8006066 <memcpy+0xe>
 8006072:	bd10      	pop	{r4, pc}

08006074 <__assert_func>:
 8006074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006076:	4614      	mov	r4, r2
 8006078:	461a      	mov	r2, r3
 800607a:	4b09      	ldr	r3, [pc, #36]	@ (80060a0 <__assert_func+0x2c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4605      	mov	r5, r0
 8006080:	68d8      	ldr	r0, [r3, #12]
 8006082:	b954      	cbnz	r4, 800609a <__assert_func+0x26>
 8006084:	4b07      	ldr	r3, [pc, #28]	@ (80060a4 <__assert_func+0x30>)
 8006086:	461c      	mov	r4, r3
 8006088:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800608c:	9100      	str	r1, [sp, #0]
 800608e:	462b      	mov	r3, r5
 8006090:	4905      	ldr	r1, [pc, #20]	@ (80060a8 <__assert_func+0x34>)
 8006092:	f000 f885 	bl	80061a0 <fiprintf>
 8006096:	f000 f8a2 	bl	80061de <abort>
 800609a:	4b04      	ldr	r3, [pc, #16]	@ (80060ac <__assert_func+0x38>)
 800609c:	e7f4      	b.n	8006088 <__assert_func+0x14>
 800609e:	bf00      	nop
 80060a0:	20000018 	.word	0x20000018
 80060a4:	08006afe 	.word	0x08006afe
 80060a8:	08006ad0 	.word	0x08006ad0
 80060ac:	08006ac3 	.word	0x08006ac3

080060b0 <_calloc_r>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	fba1 5402 	umull	r5, r4, r1, r2
 80060b6:	b93c      	cbnz	r4, 80060c8 <_calloc_r+0x18>
 80060b8:	4629      	mov	r1, r5
 80060ba:	f7ff fa31 	bl	8005520 <_malloc_r>
 80060be:	4606      	mov	r6, r0
 80060c0:	b928      	cbnz	r0, 80060ce <_calloc_r+0x1e>
 80060c2:	2600      	movs	r6, #0
 80060c4:	4630      	mov	r0, r6
 80060c6:	bd70      	pop	{r4, r5, r6, pc}
 80060c8:	220c      	movs	r2, #12
 80060ca:	6002      	str	r2, [r0, #0]
 80060cc:	e7f9      	b.n	80060c2 <_calloc_r+0x12>
 80060ce:	462a      	mov	r2, r5
 80060d0:	4621      	mov	r1, r4
 80060d2:	f7fe fa8b 	bl	80045ec <memset>
 80060d6:	e7f5      	b.n	80060c4 <_calloc_r+0x14>

080060d8 <_free_r>:
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	4605      	mov	r5, r0
 80060dc:	2900      	cmp	r1, #0
 80060de:	d041      	beq.n	8006164 <_free_r+0x8c>
 80060e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060e4:	1f0c      	subs	r4, r1, #4
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	bfb8      	it	lt
 80060ea:	18e4      	addlt	r4, r4, r3
 80060ec:	f7ff fb44 	bl	8005778 <__malloc_lock>
 80060f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006168 <_free_r+0x90>)
 80060f2:	6813      	ldr	r3, [r2, #0]
 80060f4:	b933      	cbnz	r3, 8006104 <_free_r+0x2c>
 80060f6:	6063      	str	r3, [r4, #4]
 80060f8:	6014      	str	r4, [r2, #0]
 80060fa:	4628      	mov	r0, r5
 80060fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006100:	f7ff bb40 	b.w	8005784 <__malloc_unlock>
 8006104:	42a3      	cmp	r3, r4
 8006106:	d908      	bls.n	800611a <_free_r+0x42>
 8006108:	6820      	ldr	r0, [r4, #0]
 800610a:	1821      	adds	r1, r4, r0
 800610c:	428b      	cmp	r3, r1
 800610e:	bf01      	itttt	eq
 8006110:	6819      	ldreq	r1, [r3, #0]
 8006112:	685b      	ldreq	r3, [r3, #4]
 8006114:	1809      	addeq	r1, r1, r0
 8006116:	6021      	streq	r1, [r4, #0]
 8006118:	e7ed      	b.n	80060f6 <_free_r+0x1e>
 800611a:	461a      	mov	r2, r3
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	b10b      	cbz	r3, 8006124 <_free_r+0x4c>
 8006120:	42a3      	cmp	r3, r4
 8006122:	d9fa      	bls.n	800611a <_free_r+0x42>
 8006124:	6811      	ldr	r1, [r2, #0]
 8006126:	1850      	adds	r0, r2, r1
 8006128:	42a0      	cmp	r0, r4
 800612a:	d10b      	bne.n	8006144 <_free_r+0x6c>
 800612c:	6820      	ldr	r0, [r4, #0]
 800612e:	4401      	add	r1, r0
 8006130:	1850      	adds	r0, r2, r1
 8006132:	4283      	cmp	r3, r0
 8006134:	6011      	str	r1, [r2, #0]
 8006136:	d1e0      	bne.n	80060fa <_free_r+0x22>
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	6053      	str	r3, [r2, #4]
 800613e:	4408      	add	r0, r1
 8006140:	6010      	str	r0, [r2, #0]
 8006142:	e7da      	b.n	80060fa <_free_r+0x22>
 8006144:	d902      	bls.n	800614c <_free_r+0x74>
 8006146:	230c      	movs	r3, #12
 8006148:	602b      	str	r3, [r5, #0]
 800614a:	e7d6      	b.n	80060fa <_free_r+0x22>
 800614c:	6820      	ldr	r0, [r4, #0]
 800614e:	1821      	adds	r1, r4, r0
 8006150:	428b      	cmp	r3, r1
 8006152:	bf04      	itt	eq
 8006154:	6819      	ldreq	r1, [r3, #0]
 8006156:	685b      	ldreq	r3, [r3, #4]
 8006158:	6063      	str	r3, [r4, #4]
 800615a:	bf04      	itt	eq
 800615c:	1809      	addeq	r1, r1, r0
 800615e:	6021      	streq	r1, [r4, #0]
 8006160:	6054      	str	r4, [r2, #4]
 8006162:	e7ca      	b.n	80060fa <_free_r+0x22>
 8006164:	bd38      	pop	{r3, r4, r5, pc}
 8006166:	bf00      	nop
 8006168:	2000048c 	.word	0x2000048c

0800616c <__ascii_mbtowc>:
 800616c:	b082      	sub	sp, #8
 800616e:	b901      	cbnz	r1, 8006172 <__ascii_mbtowc+0x6>
 8006170:	a901      	add	r1, sp, #4
 8006172:	b142      	cbz	r2, 8006186 <__ascii_mbtowc+0x1a>
 8006174:	b14b      	cbz	r3, 800618a <__ascii_mbtowc+0x1e>
 8006176:	7813      	ldrb	r3, [r2, #0]
 8006178:	600b      	str	r3, [r1, #0]
 800617a:	7812      	ldrb	r2, [r2, #0]
 800617c:	1e10      	subs	r0, r2, #0
 800617e:	bf18      	it	ne
 8006180:	2001      	movne	r0, #1
 8006182:	b002      	add	sp, #8
 8006184:	4770      	bx	lr
 8006186:	4610      	mov	r0, r2
 8006188:	e7fb      	b.n	8006182 <__ascii_mbtowc+0x16>
 800618a:	f06f 0001 	mvn.w	r0, #1
 800618e:	e7f8      	b.n	8006182 <__ascii_mbtowc+0x16>

08006190 <_malloc_usable_size_r>:
 8006190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006194:	1f18      	subs	r0, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	bfbc      	itt	lt
 800619a:	580b      	ldrlt	r3, [r1, r0]
 800619c:	18c0      	addlt	r0, r0, r3
 800619e:	4770      	bx	lr

080061a0 <fiprintf>:
 80061a0:	b40e      	push	{r1, r2, r3}
 80061a2:	b503      	push	{r0, r1, lr}
 80061a4:	4601      	mov	r1, r0
 80061a6:	ab03      	add	r3, sp, #12
 80061a8:	4805      	ldr	r0, [pc, #20]	@ (80061c0 <fiprintf+0x20>)
 80061aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ae:	6800      	ldr	r0, [r0, #0]
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	f000 f845 	bl	8006240 <_vfiprintf_r>
 80061b6:	b002      	add	sp, #8
 80061b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061bc:	b003      	add	sp, #12
 80061be:	4770      	bx	lr
 80061c0:	20000018 	.word	0x20000018

080061c4 <__ascii_wctomb>:
 80061c4:	4603      	mov	r3, r0
 80061c6:	4608      	mov	r0, r1
 80061c8:	b141      	cbz	r1, 80061dc <__ascii_wctomb+0x18>
 80061ca:	2aff      	cmp	r2, #255	@ 0xff
 80061cc:	d904      	bls.n	80061d8 <__ascii_wctomb+0x14>
 80061ce:	228a      	movs	r2, #138	@ 0x8a
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061d6:	4770      	bx	lr
 80061d8:	700a      	strb	r2, [r1, #0]
 80061da:	2001      	movs	r0, #1
 80061dc:	4770      	bx	lr

080061de <abort>:
 80061de:	b508      	push	{r3, lr}
 80061e0:	2006      	movs	r0, #6
 80061e2:	f000 fa85 	bl	80066f0 <raise>
 80061e6:	2001      	movs	r0, #1
 80061e8:	f7fa fd69 	bl	8000cbe <_exit>

080061ec <__sfputc_r>:
 80061ec:	6893      	ldr	r3, [r2, #8]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	b410      	push	{r4}
 80061f4:	6093      	str	r3, [r2, #8]
 80061f6:	da08      	bge.n	800620a <__sfputc_r+0x1e>
 80061f8:	6994      	ldr	r4, [r2, #24]
 80061fa:	42a3      	cmp	r3, r4
 80061fc:	db01      	blt.n	8006202 <__sfputc_r+0x16>
 80061fe:	290a      	cmp	r1, #10
 8006200:	d103      	bne.n	800620a <__sfputc_r+0x1e>
 8006202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006206:	f000 b933 	b.w	8006470 <__swbuf_r>
 800620a:	6813      	ldr	r3, [r2, #0]
 800620c:	1c58      	adds	r0, r3, #1
 800620e:	6010      	str	r0, [r2, #0]
 8006210:	7019      	strb	r1, [r3, #0]
 8006212:	4608      	mov	r0, r1
 8006214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006218:	4770      	bx	lr

0800621a <__sfputs_r>:
 800621a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621c:	4606      	mov	r6, r0
 800621e:	460f      	mov	r7, r1
 8006220:	4614      	mov	r4, r2
 8006222:	18d5      	adds	r5, r2, r3
 8006224:	42ac      	cmp	r4, r5
 8006226:	d101      	bne.n	800622c <__sfputs_r+0x12>
 8006228:	2000      	movs	r0, #0
 800622a:	e007      	b.n	800623c <__sfputs_r+0x22>
 800622c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006230:	463a      	mov	r2, r7
 8006232:	4630      	mov	r0, r6
 8006234:	f7ff ffda 	bl	80061ec <__sfputc_r>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d1f3      	bne.n	8006224 <__sfputs_r+0xa>
 800623c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006240 <_vfiprintf_r>:
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	460d      	mov	r5, r1
 8006246:	b09d      	sub	sp, #116	@ 0x74
 8006248:	4614      	mov	r4, r2
 800624a:	4698      	mov	r8, r3
 800624c:	4606      	mov	r6, r0
 800624e:	b118      	cbz	r0, 8006258 <_vfiprintf_r+0x18>
 8006250:	6a03      	ldr	r3, [r0, #32]
 8006252:	b90b      	cbnz	r3, 8006258 <_vfiprintf_r+0x18>
 8006254:	f7fe f994 	bl	8004580 <__sinit>
 8006258:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800625a:	07d9      	lsls	r1, r3, #31
 800625c:	d405      	bmi.n	800626a <_vfiprintf_r+0x2a>
 800625e:	89ab      	ldrh	r3, [r5, #12]
 8006260:	059a      	lsls	r2, r3, #22
 8006262:	d402      	bmi.n	800626a <_vfiprintf_r+0x2a>
 8006264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006266:	f7fe f9f8 	bl	800465a <__retarget_lock_acquire_recursive>
 800626a:	89ab      	ldrh	r3, [r5, #12]
 800626c:	071b      	lsls	r3, r3, #28
 800626e:	d501      	bpl.n	8006274 <_vfiprintf_r+0x34>
 8006270:	692b      	ldr	r3, [r5, #16]
 8006272:	b99b      	cbnz	r3, 800629c <_vfiprintf_r+0x5c>
 8006274:	4629      	mov	r1, r5
 8006276:	4630      	mov	r0, r6
 8006278:	f000 f938 	bl	80064ec <__swsetup_r>
 800627c:	b170      	cbz	r0, 800629c <_vfiprintf_r+0x5c>
 800627e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006280:	07dc      	lsls	r4, r3, #31
 8006282:	d504      	bpl.n	800628e <_vfiprintf_r+0x4e>
 8006284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006288:	b01d      	add	sp, #116	@ 0x74
 800628a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800628e:	89ab      	ldrh	r3, [r5, #12]
 8006290:	0598      	lsls	r0, r3, #22
 8006292:	d4f7      	bmi.n	8006284 <_vfiprintf_r+0x44>
 8006294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006296:	f7fe f9e1 	bl	800465c <__retarget_lock_release_recursive>
 800629a:	e7f3      	b.n	8006284 <_vfiprintf_r+0x44>
 800629c:	2300      	movs	r3, #0
 800629e:	9309      	str	r3, [sp, #36]	@ 0x24
 80062a0:	2320      	movs	r3, #32
 80062a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80062aa:	2330      	movs	r3, #48	@ 0x30
 80062ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800645c <_vfiprintf_r+0x21c>
 80062b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062b4:	f04f 0901 	mov.w	r9, #1
 80062b8:	4623      	mov	r3, r4
 80062ba:	469a      	mov	sl, r3
 80062bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062c0:	b10a      	cbz	r2, 80062c6 <_vfiprintf_r+0x86>
 80062c2:	2a25      	cmp	r2, #37	@ 0x25
 80062c4:	d1f9      	bne.n	80062ba <_vfiprintf_r+0x7a>
 80062c6:	ebba 0b04 	subs.w	fp, sl, r4
 80062ca:	d00b      	beq.n	80062e4 <_vfiprintf_r+0xa4>
 80062cc:	465b      	mov	r3, fp
 80062ce:	4622      	mov	r2, r4
 80062d0:	4629      	mov	r1, r5
 80062d2:	4630      	mov	r0, r6
 80062d4:	f7ff ffa1 	bl	800621a <__sfputs_r>
 80062d8:	3001      	adds	r0, #1
 80062da:	f000 80a7 	beq.w	800642c <_vfiprintf_r+0x1ec>
 80062de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062e0:	445a      	add	r2, fp
 80062e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80062e4:	f89a 3000 	ldrb.w	r3, [sl]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 809f 	beq.w	800642c <_vfiprintf_r+0x1ec>
 80062ee:	2300      	movs	r3, #0
 80062f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062f8:	f10a 0a01 	add.w	sl, sl, #1
 80062fc:	9304      	str	r3, [sp, #16]
 80062fe:	9307      	str	r3, [sp, #28]
 8006300:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006304:	931a      	str	r3, [sp, #104]	@ 0x68
 8006306:	4654      	mov	r4, sl
 8006308:	2205      	movs	r2, #5
 800630a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630e:	4853      	ldr	r0, [pc, #332]	@ (800645c <_vfiprintf_r+0x21c>)
 8006310:	f7f9 ff96 	bl	8000240 <memchr>
 8006314:	9a04      	ldr	r2, [sp, #16]
 8006316:	b9d8      	cbnz	r0, 8006350 <_vfiprintf_r+0x110>
 8006318:	06d1      	lsls	r1, r2, #27
 800631a:	bf44      	itt	mi
 800631c:	2320      	movmi	r3, #32
 800631e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006322:	0713      	lsls	r3, r2, #28
 8006324:	bf44      	itt	mi
 8006326:	232b      	movmi	r3, #43	@ 0x2b
 8006328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800632c:	f89a 3000 	ldrb.w	r3, [sl]
 8006330:	2b2a      	cmp	r3, #42	@ 0x2a
 8006332:	d015      	beq.n	8006360 <_vfiprintf_r+0x120>
 8006334:	9a07      	ldr	r2, [sp, #28]
 8006336:	4654      	mov	r4, sl
 8006338:	2000      	movs	r0, #0
 800633a:	f04f 0c0a 	mov.w	ip, #10
 800633e:	4621      	mov	r1, r4
 8006340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006344:	3b30      	subs	r3, #48	@ 0x30
 8006346:	2b09      	cmp	r3, #9
 8006348:	d94b      	bls.n	80063e2 <_vfiprintf_r+0x1a2>
 800634a:	b1b0      	cbz	r0, 800637a <_vfiprintf_r+0x13a>
 800634c:	9207      	str	r2, [sp, #28]
 800634e:	e014      	b.n	800637a <_vfiprintf_r+0x13a>
 8006350:	eba0 0308 	sub.w	r3, r0, r8
 8006354:	fa09 f303 	lsl.w	r3, r9, r3
 8006358:	4313      	orrs	r3, r2
 800635a:	9304      	str	r3, [sp, #16]
 800635c:	46a2      	mov	sl, r4
 800635e:	e7d2      	b.n	8006306 <_vfiprintf_r+0xc6>
 8006360:	9b03      	ldr	r3, [sp, #12]
 8006362:	1d19      	adds	r1, r3, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	9103      	str	r1, [sp, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	bfbb      	ittet	lt
 800636c:	425b      	neglt	r3, r3
 800636e:	f042 0202 	orrlt.w	r2, r2, #2
 8006372:	9307      	strge	r3, [sp, #28]
 8006374:	9307      	strlt	r3, [sp, #28]
 8006376:	bfb8      	it	lt
 8006378:	9204      	strlt	r2, [sp, #16]
 800637a:	7823      	ldrb	r3, [r4, #0]
 800637c:	2b2e      	cmp	r3, #46	@ 0x2e
 800637e:	d10a      	bne.n	8006396 <_vfiprintf_r+0x156>
 8006380:	7863      	ldrb	r3, [r4, #1]
 8006382:	2b2a      	cmp	r3, #42	@ 0x2a
 8006384:	d132      	bne.n	80063ec <_vfiprintf_r+0x1ac>
 8006386:	9b03      	ldr	r3, [sp, #12]
 8006388:	1d1a      	adds	r2, r3, #4
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	9203      	str	r2, [sp, #12]
 800638e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006392:	3402      	adds	r4, #2
 8006394:	9305      	str	r3, [sp, #20]
 8006396:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800646c <_vfiprintf_r+0x22c>
 800639a:	7821      	ldrb	r1, [r4, #0]
 800639c:	2203      	movs	r2, #3
 800639e:	4650      	mov	r0, sl
 80063a0:	f7f9 ff4e 	bl	8000240 <memchr>
 80063a4:	b138      	cbz	r0, 80063b6 <_vfiprintf_r+0x176>
 80063a6:	9b04      	ldr	r3, [sp, #16]
 80063a8:	eba0 000a 	sub.w	r0, r0, sl
 80063ac:	2240      	movs	r2, #64	@ 0x40
 80063ae:	4082      	lsls	r2, r0
 80063b0:	4313      	orrs	r3, r2
 80063b2:	3401      	adds	r4, #1
 80063b4:	9304      	str	r3, [sp, #16]
 80063b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ba:	4829      	ldr	r0, [pc, #164]	@ (8006460 <_vfiprintf_r+0x220>)
 80063bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063c0:	2206      	movs	r2, #6
 80063c2:	f7f9 ff3d 	bl	8000240 <memchr>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d03f      	beq.n	800644a <_vfiprintf_r+0x20a>
 80063ca:	4b26      	ldr	r3, [pc, #152]	@ (8006464 <_vfiprintf_r+0x224>)
 80063cc:	bb1b      	cbnz	r3, 8006416 <_vfiprintf_r+0x1d6>
 80063ce:	9b03      	ldr	r3, [sp, #12]
 80063d0:	3307      	adds	r3, #7
 80063d2:	f023 0307 	bic.w	r3, r3, #7
 80063d6:	3308      	adds	r3, #8
 80063d8:	9303      	str	r3, [sp, #12]
 80063da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063dc:	443b      	add	r3, r7
 80063de:	9309      	str	r3, [sp, #36]	@ 0x24
 80063e0:	e76a      	b.n	80062b8 <_vfiprintf_r+0x78>
 80063e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80063e6:	460c      	mov	r4, r1
 80063e8:	2001      	movs	r0, #1
 80063ea:	e7a8      	b.n	800633e <_vfiprintf_r+0xfe>
 80063ec:	2300      	movs	r3, #0
 80063ee:	3401      	adds	r4, #1
 80063f0:	9305      	str	r3, [sp, #20]
 80063f2:	4619      	mov	r1, r3
 80063f4:	f04f 0c0a 	mov.w	ip, #10
 80063f8:	4620      	mov	r0, r4
 80063fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063fe:	3a30      	subs	r2, #48	@ 0x30
 8006400:	2a09      	cmp	r2, #9
 8006402:	d903      	bls.n	800640c <_vfiprintf_r+0x1cc>
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0c6      	beq.n	8006396 <_vfiprintf_r+0x156>
 8006408:	9105      	str	r1, [sp, #20]
 800640a:	e7c4      	b.n	8006396 <_vfiprintf_r+0x156>
 800640c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006410:	4604      	mov	r4, r0
 8006412:	2301      	movs	r3, #1
 8006414:	e7f0      	b.n	80063f8 <_vfiprintf_r+0x1b8>
 8006416:	ab03      	add	r3, sp, #12
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	462a      	mov	r2, r5
 800641c:	4b12      	ldr	r3, [pc, #72]	@ (8006468 <_vfiprintf_r+0x228>)
 800641e:	a904      	add	r1, sp, #16
 8006420:	4630      	mov	r0, r6
 8006422:	f7fd fc59 	bl	8003cd8 <_printf_float>
 8006426:	4607      	mov	r7, r0
 8006428:	1c78      	adds	r0, r7, #1
 800642a:	d1d6      	bne.n	80063da <_vfiprintf_r+0x19a>
 800642c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800642e:	07d9      	lsls	r1, r3, #31
 8006430:	d405      	bmi.n	800643e <_vfiprintf_r+0x1fe>
 8006432:	89ab      	ldrh	r3, [r5, #12]
 8006434:	059a      	lsls	r2, r3, #22
 8006436:	d402      	bmi.n	800643e <_vfiprintf_r+0x1fe>
 8006438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800643a:	f7fe f90f 	bl	800465c <__retarget_lock_release_recursive>
 800643e:	89ab      	ldrh	r3, [r5, #12]
 8006440:	065b      	lsls	r3, r3, #25
 8006442:	f53f af1f 	bmi.w	8006284 <_vfiprintf_r+0x44>
 8006446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006448:	e71e      	b.n	8006288 <_vfiprintf_r+0x48>
 800644a:	ab03      	add	r3, sp, #12
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	462a      	mov	r2, r5
 8006450:	4b05      	ldr	r3, [pc, #20]	@ (8006468 <_vfiprintf_r+0x228>)
 8006452:	a904      	add	r1, sp, #16
 8006454:	4630      	mov	r0, r6
 8006456:	f7fd fec7 	bl	80041e8 <_printf_i>
 800645a:	e7e4      	b.n	8006426 <_vfiprintf_r+0x1e6>
 800645c:	08006851 	.word	0x08006851
 8006460:	0800685b 	.word	0x0800685b
 8006464:	08003cd9 	.word	0x08003cd9
 8006468:	0800621b 	.word	0x0800621b
 800646c:	08006857 	.word	0x08006857

08006470 <__swbuf_r>:
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	460e      	mov	r6, r1
 8006474:	4614      	mov	r4, r2
 8006476:	4605      	mov	r5, r0
 8006478:	b118      	cbz	r0, 8006482 <__swbuf_r+0x12>
 800647a:	6a03      	ldr	r3, [r0, #32]
 800647c:	b90b      	cbnz	r3, 8006482 <__swbuf_r+0x12>
 800647e:	f7fe f87f 	bl	8004580 <__sinit>
 8006482:	69a3      	ldr	r3, [r4, #24]
 8006484:	60a3      	str	r3, [r4, #8]
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	071a      	lsls	r2, r3, #28
 800648a:	d501      	bpl.n	8006490 <__swbuf_r+0x20>
 800648c:	6923      	ldr	r3, [r4, #16]
 800648e:	b943      	cbnz	r3, 80064a2 <__swbuf_r+0x32>
 8006490:	4621      	mov	r1, r4
 8006492:	4628      	mov	r0, r5
 8006494:	f000 f82a 	bl	80064ec <__swsetup_r>
 8006498:	b118      	cbz	r0, 80064a2 <__swbuf_r+0x32>
 800649a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800649e:	4638      	mov	r0, r7
 80064a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	6922      	ldr	r2, [r4, #16]
 80064a6:	1a98      	subs	r0, r3, r2
 80064a8:	6963      	ldr	r3, [r4, #20]
 80064aa:	b2f6      	uxtb	r6, r6
 80064ac:	4283      	cmp	r3, r0
 80064ae:	4637      	mov	r7, r6
 80064b0:	dc05      	bgt.n	80064be <__swbuf_r+0x4e>
 80064b2:	4621      	mov	r1, r4
 80064b4:	4628      	mov	r0, r5
 80064b6:	f7ff f937 	bl	8005728 <_fflush_r>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d1ed      	bne.n	800649a <__swbuf_r+0x2a>
 80064be:	68a3      	ldr	r3, [r4, #8]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	60a3      	str	r3, [r4, #8]
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	6022      	str	r2, [r4, #0]
 80064ca:	701e      	strb	r6, [r3, #0]
 80064cc:	6962      	ldr	r2, [r4, #20]
 80064ce:	1c43      	adds	r3, r0, #1
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d004      	beq.n	80064de <__swbuf_r+0x6e>
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	07db      	lsls	r3, r3, #31
 80064d8:	d5e1      	bpl.n	800649e <__swbuf_r+0x2e>
 80064da:	2e0a      	cmp	r6, #10
 80064dc:	d1df      	bne.n	800649e <__swbuf_r+0x2e>
 80064de:	4621      	mov	r1, r4
 80064e0:	4628      	mov	r0, r5
 80064e2:	f7ff f921 	bl	8005728 <_fflush_r>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d0d9      	beq.n	800649e <__swbuf_r+0x2e>
 80064ea:	e7d6      	b.n	800649a <__swbuf_r+0x2a>

080064ec <__swsetup_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4b29      	ldr	r3, [pc, #164]	@ (8006594 <__swsetup_r+0xa8>)
 80064f0:	4605      	mov	r5, r0
 80064f2:	6818      	ldr	r0, [r3, #0]
 80064f4:	460c      	mov	r4, r1
 80064f6:	b118      	cbz	r0, 8006500 <__swsetup_r+0x14>
 80064f8:	6a03      	ldr	r3, [r0, #32]
 80064fa:	b90b      	cbnz	r3, 8006500 <__swsetup_r+0x14>
 80064fc:	f7fe f840 	bl	8004580 <__sinit>
 8006500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006504:	0719      	lsls	r1, r3, #28
 8006506:	d422      	bmi.n	800654e <__swsetup_r+0x62>
 8006508:	06da      	lsls	r2, r3, #27
 800650a:	d407      	bmi.n	800651c <__swsetup_r+0x30>
 800650c:	2209      	movs	r2, #9
 800650e:	602a      	str	r2, [r5, #0]
 8006510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006514:	81a3      	strh	r3, [r4, #12]
 8006516:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800651a:	e033      	b.n	8006584 <__swsetup_r+0x98>
 800651c:	0758      	lsls	r0, r3, #29
 800651e:	d512      	bpl.n	8006546 <__swsetup_r+0x5a>
 8006520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006522:	b141      	cbz	r1, 8006536 <__swsetup_r+0x4a>
 8006524:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006528:	4299      	cmp	r1, r3
 800652a:	d002      	beq.n	8006532 <__swsetup_r+0x46>
 800652c:	4628      	mov	r0, r5
 800652e:	f7ff fdd3 	bl	80060d8 <_free_r>
 8006532:	2300      	movs	r3, #0
 8006534:	6363      	str	r3, [r4, #52]	@ 0x34
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800653c:	81a3      	strh	r3, [r4, #12]
 800653e:	2300      	movs	r3, #0
 8006540:	6063      	str	r3, [r4, #4]
 8006542:	6923      	ldr	r3, [r4, #16]
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	89a3      	ldrh	r3, [r4, #12]
 8006548:	f043 0308 	orr.w	r3, r3, #8
 800654c:	81a3      	strh	r3, [r4, #12]
 800654e:	6923      	ldr	r3, [r4, #16]
 8006550:	b94b      	cbnz	r3, 8006566 <__swsetup_r+0x7a>
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800655c:	d003      	beq.n	8006566 <__swsetup_r+0x7a>
 800655e:	4621      	mov	r1, r4
 8006560:	4628      	mov	r0, r5
 8006562:	f000 f83f 	bl	80065e4 <__smakebuf_r>
 8006566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800656a:	f013 0201 	ands.w	r2, r3, #1
 800656e:	d00a      	beq.n	8006586 <__swsetup_r+0x9a>
 8006570:	2200      	movs	r2, #0
 8006572:	60a2      	str	r2, [r4, #8]
 8006574:	6962      	ldr	r2, [r4, #20]
 8006576:	4252      	negs	r2, r2
 8006578:	61a2      	str	r2, [r4, #24]
 800657a:	6922      	ldr	r2, [r4, #16]
 800657c:	b942      	cbnz	r2, 8006590 <__swsetup_r+0xa4>
 800657e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006582:	d1c5      	bne.n	8006510 <__swsetup_r+0x24>
 8006584:	bd38      	pop	{r3, r4, r5, pc}
 8006586:	0799      	lsls	r1, r3, #30
 8006588:	bf58      	it	pl
 800658a:	6962      	ldrpl	r2, [r4, #20]
 800658c:	60a2      	str	r2, [r4, #8]
 800658e:	e7f4      	b.n	800657a <__swsetup_r+0x8e>
 8006590:	2000      	movs	r0, #0
 8006592:	e7f7      	b.n	8006584 <__swsetup_r+0x98>
 8006594:	20000018 	.word	0x20000018

08006598 <__swhatbuf_r>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	460c      	mov	r4, r1
 800659c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a0:	2900      	cmp	r1, #0
 80065a2:	b096      	sub	sp, #88	@ 0x58
 80065a4:	4615      	mov	r5, r2
 80065a6:	461e      	mov	r6, r3
 80065a8:	da0d      	bge.n	80065c6 <__swhatbuf_r+0x2e>
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065b0:	f04f 0100 	mov.w	r1, #0
 80065b4:	bf14      	ite	ne
 80065b6:	2340      	movne	r3, #64	@ 0x40
 80065b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80065bc:	2000      	movs	r0, #0
 80065be:	6031      	str	r1, [r6, #0]
 80065c0:	602b      	str	r3, [r5, #0]
 80065c2:	b016      	add	sp, #88	@ 0x58
 80065c4:	bd70      	pop	{r4, r5, r6, pc}
 80065c6:	466a      	mov	r2, sp
 80065c8:	f000 f848 	bl	800665c <_fstat_r>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	dbec      	blt.n	80065aa <__swhatbuf_r+0x12>
 80065d0:	9901      	ldr	r1, [sp, #4]
 80065d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065da:	4259      	negs	r1, r3
 80065dc:	4159      	adcs	r1, r3
 80065de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065e2:	e7eb      	b.n	80065bc <__swhatbuf_r+0x24>

080065e4 <__smakebuf_r>:
 80065e4:	898b      	ldrh	r3, [r1, #12]
 80065e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065e8:	079d      	lsls	r5, r3, #30
 80065ea:	4606      	mov	r6, r0
 80065ec:	460c      	mov	r4, r1
 80065ee:	d507      	bpl.n	8006600 <__smakebuf_r+0x1c>
 80065f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	6123      	str	r3, [r4, #16]
 80065f8:	2301      	movs	r3, #1
 80065fa:	6163      	str	r3, [r4, #20]
 80065fc:	b003      	add	sp, #12
 80065fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006600:	ab01      	add	r3, sp, #4
 8006602:	466a      	mov	r2, sp
 8006604:	f7ff ffc8 	bl	8006598 <__swhatbuf_r>
 8006608:	9f00      	ldr	r7, [sp, #0]
 800660a:	4605      	mov	r5, r0
 800660c:	4639      	mov	r1, r7
 800660e:	4630      	mov	r0, r6
 8006610:	f7fe ff86 	bl	8005520 <_malloc_r>
 8006614:	b948      	cbnz	r0, 800662a <__smakebuf_r+0x46>
 8006616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800661a:	059a      	lsls	r2, r3, #22
 800661c:	d4ee      	bmi.n	80065fc <__smakebuf_r+0x18>
 800661e:	f023 0303 	bic.w	r3, r3, #3
 8006622:	f043 0302 	orr.w	r3, r3, #2
 8006626:	81a3      	strh	r3, [r4, #12]
 8006628:	e7e2      	b.n	80065f0 <__smakebuf_r+0xc>
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	6020      	str	r0, [r4, #0]
 800662e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006632:	81a3      	strh	r3, [r4, #12]
 8006634:	9b01      	ldr	r3, [sp, #4]
 8006636:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800663a:	b15b      	cbz	r3, 8006654 <__smakebuf_r+0x70>
 800663c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006640:	4630      	mov	r0, r6
 8006642:	f000 f81d 	bl	8006680 <_isatty_r>
 8006646:	b128      	cbz	r0, 8006654 <__smakebuf_r+0x70>
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	f023 0303 	bic.w	r3, r3, #3
 800664e:	f043 0301 	orr.w	r3, r3, #1
 8006652:	81a3      	strh	r3, [r4, #12]
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	431d      	orrs	r5, r3
 8006658:	81a5      	strh	r5, [r4, #12]
 800665a:	e7cf      	b.n	80065fc <__smakebuf_r+0x18>

0800665c <_fstat_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4d07      	ldr	r5, [pc, #28]	@ (800667c <_fstat_r+0x20>)
 8006660:	2300      	movs	r3, #0
 8006662:	4604      	mov	r4, r0
 8006664:	4608      	mov	r0, r1
 8006666:	4611      	mov	r1, r2
 8006668:	602b      	str	r3, [r5, #0]
 800666a:	f7fa fb78 	bl	8000d5e <_fstat>
 800666e:	1c43      	adds	r3, r0, #1
 8006670:	d102      	bne.n	8006678 <_fstat_r+0x1c>
 8006672:	682b      	ldr	r3, [r5, #0]
 8006674:	b103      	cbz	r3, 8006678 <_fstat_r+0x1c>
 8006676:	6023      	str	r3, [r4, #0]
 8006678:	bd38      	pop	{r3, r4, r5, pc}
 800667a:	bf00      	nop
 800667c:	20000490 	.word	0x20000490

08006680 <_isatty_r>:
 8006680:	b538      	push	{r3, r4, r5, lr}
 8006682:	4d06      	ldr	r5, [pc, #24]	@ (800669c <_isatty_r+0x1c>)
 8006684:	2300      	movs	r3, #0
 8006686:	4604      	mov	r4, r0
 8006688:	4608      	mov	r0, r1
 800668a:	602b      	str	r3, [r5, #0]
 800668c:	f7fa fb77 	bl	8000d7e <_isatty>
 8006690:	1c43      	adds	r3, r0, #1
 8006692:	d102      	bne.n	800669a <_isatty_r+0x1a>
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	b103      	cbz	r3, 800669a <_isatty_r+0x1a>
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	bd38      	pop	{r3, r4, r5, pc}
 800669c:	20000490 	.word	0x20000490

080066a0 <_raise_r>:
 80066a0:	291f      	cmp	r1, #31
 80066a2:	b538      	push	{r3, r4, r5, lr}
 80066a4:	4605      	mov	r5, r0
 80066a6:	460c      	mov	r4, r1
 80066a8:	d904      	bls.n	80066b4 <_raise_r+0x14>
 80066aa:	2316      	movs	r3, #22
 80066ac:	6003      	str	r3, [r0, #0]
 80066ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80066b6:	b112      	cbz	r2, 80066be <_raise_r+0x1e>
 80066b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066bc:	b94b      	cbnz	r3, 80066d2 <_raise_r+0x32>
 80066be:	4628      	mov	r0, r5
 80066c0:	f000 f830 	bl	8006724 <_getpid_r>
 80066c4:	4622      	mov	r2, r4
 80066c6:	4601      	mov	r1, r0
 80066c8:	4628      	mov	r0, r5
 80066ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ce:	f000 b817 	b.w	8006700 <_kill_r>
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d00a      	beq.n	80066ec <_raise_r+0x4c>
 80066d6:	1c59      	adds	r1, r3, #1
 80066d8:	d103      	bne.n	80066e2 <_raise_r+0x42>
 80066da:	2316      	movs	r3, #22
 80066dc:	6003      	str	r3, [r0, #0]
 80066de:	2001      	movs	r0, #1
 80066e0:	e7e7      	b.n	80066b2 <_raise_r+0x12>
 80066e2:	2100      	movs	r1, #0
 80066e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80066e8:	4620      	mov	r0, r4
 80066ea:	4798      	blx	r3
 80066ec:	2000      	movs	r0, #0
 80066ee:	e7e0      	b.n	80066b2 <_raise_r+0x12>

080066f0 <raise>:
 80066f0:	4b02      	ldr	r3, [pc, #8]	@ (80066fc <raise+0xc>)
 80066f2:	4601      	mov	r1, r0
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	f7ff bfd3 	b.w	80066a0 <_raise_r>
 80066fa:	bf00      	nop
 80066fc:	20000018 	.word	0x20000018

08006700 <_kill_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d07      	ldr	r5, [pc, #28]	@ (8006720 <_kill_r+0x20>)
 8006704:	2300      	movs	r3, #0
 8006706:	4604      	mov	r4, r0
 8006708:	4608      	mov	r0, r1
 800670a:	4611      	mov	r1, r2
 800670c:	602b      	str	r3, [r5, #0]
 800670e:	f7fa fac6 	bl	8000c9e <_kill>
 8006712:	1c43      	adds	r3, r0, #1
 8006714:	d102      	bne.n	800671c <_kill_r+0x1c>
 8006716:	682b      	ldr	r3, [r5, #0]
 8006718:	b103      	cbz	r3, 800671c <_kill_r+0x1c>
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	bd38      	pop	{r3, r4, r5, pc}
 800671e:	bf00      	nop
 8006720:	20000490 	.word	0x20000490

08006724 <_getpid_r>:
 8006724:	f7fa bab3 	b.w	8000c8e <_getpid>

08006728 <_init>:
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672a:	bf00      	nop
 800672c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672e:	bc08      	pop	{r3}
 8006730:	469e      	mov	lr, r3
 8006732:	4770      	bx	lr

08006734 <_fini>:
 8006734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006736:	bf00      	nop
 8006738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673a:	bc08      	pop	{r3}
 800673c:	469e      	mov	lr, r3
 800673e:	4770      	bx	lr
