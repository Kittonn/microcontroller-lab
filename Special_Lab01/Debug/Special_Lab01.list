
Special_Lab01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e00  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003ff8  08003ff8  00004ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004030  08004030  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004030  08004030  00005030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004038  08004038  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004038  08004038  00005038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800403c  0800403c  0000503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004040  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000060  080040a0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  080040a0  00006328  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af09  00000000  00000000  0000608e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c20  00000000  00000000  00010f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00012bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000062d  00000000  00000000  000133d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ed8  00000000  00000000  00013a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b90e  00000000  00000000  0003a8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0f5d  00000000  00000000  000461eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137148  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f78  00000000  00000000  0013718c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00139104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000060 	.word	0x20000060
 8000214:	00000000 	.word	0x00000000
 8000218:	08003fe0 	.word	0x08003fe0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000064 	.word	0x20000064
 8000234:	08003fe0 	.word	0x08003fe0

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <strcmp>:
 8000248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000250:	2a01      	cmp	r2, #1
 8000252:	bf28      	it	cs
 8000254:	429a      	cmpcs	r2, r3
 8000256:	d0f7      	beq.n	8000248 <strcmp>
 8000258:	1ad0      	subs	r0, r2, r3
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800026c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000270:	f000 b96a 	b.w	8000548 <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	460c      	mov	r4, r1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d14e      	bne.n	8000336 <__udivmoddi4+0xaa>
 8000298:	4694      	mov	ip, r2
 800029a:	458c      	cmp	ip, r1
 800029c:	4686      	mov	lr, r0
 800029e:	fab2 f282 	clz	r2, r2
 80002a2:	d962      	bls.n	800036a <__udivmoddi4+0xde>
 80002a4:	b14a      	cbz	r2, 80002ba <__udivmoddi4+0x2e>
 80002a6:	f1c2 0320 	rsb	r3, r2, #32
 80002aa:	4091      	lsls	r1, r2
 80002ac:	fa20 f303 	lsr.w	r3, r0, r3
 80002b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002b4:	4319      	orrs	r1, r3
 80002b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002be:	fa1f f68c 	uxth.w	r6, ip
 80002c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ca:	fb07 1114 	mls	r1, r7, r4, r1
 80002ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d2:	fb04 f106 	mul.w	r1, r4, r6
 80002d6:	4299      	cmp	r1, r3
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x64>
 80002da:	eb1c 0303 	adds.w	r3, ip, r3
 80002de:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002e2:	f080 8112 	bcs.w	800050a <__udivmoddi4+0x27e>
 80002e6:	4299      	cmp	r1, r3
 80002e8:	f240 810f 	bls.w	800050a <__udivmoddi4+0x27e>
 80002ec:	3c02      	subs	r4, #2
 80002ee:	4463      	add	r3, ip
 80002f0:	1a59      	subs	r1, r3, r1
 80002f2:	fa1f f38e 	uxth.w	r3, lr
 80002f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80002fa:	fb07 1110 	mls	r1, r7, r0, r1
 80002fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000302:	fb00 f606 	mul.w	r6, r0, r6
 8000306:	429e      	cmp	r6, r3
 8000308:	d90a      	bls.n	8000320 <__udivmoddi4+0x94>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000312:	f080 80fc 	bcs.w	800050e <__udivmoddi4+0x282>
 8000316:	429e      	cmp	r6, r3
 8000318:	f240 80f9 	bls.w	800050e <__udivmoddi4+0x282>
 800031c:	4463      	add	r3, ip
 800031e:	3802      	subs	r0, #2
 8000320:	1b9b      	subs	r3, r3, r6
 8000322:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000326:	2100      	movs	r1, #0
 8000328:	b11d      	cbz	r5, 8000332 <__udivmoddi4+0xa6>
 800032a:	40d3      	lsrs	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	e9c5 3200 	strd	r3, r2, [r5]
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	428b      	cmp	r3, r1
 8000338:	d905      	bls.n	8000346 <__udivmoddi4+0xba>
 800033a:	b10d      	cbz	r5, 8000340 <__udivmoddi4+0xb4>
 800033c:	e9c5 0100 	strd	r0, r1, [r5]
 8000340:	2100      	movs	r1, #0
 8000342:	4608      	mov	r0, r1
 8000344:	e7f5      	b.n	8000332 <__udivmoddi4+0xa6>
 8000346:	fab3 f183 	clz	r1, r3
 800034a:	2900      	cmp	r1, #0
 800034c:	d146      	bne.n	80003dc <__udivmoddi4+0x150>
 800034e:	42a3      	cmp	r3, r4
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0xcc>
 8000352:	4290      	cmp	r0, r2
 8000354:	f0c0 80f0 	bcc.w	8000538 <__udivmoddi4+0x2ac>
 8000358:	1a86      	subs	r6, r0, r2
 800035a:	eb64 0303 	sbc.w	r3, r4, r3
 800035e:	2001      	movs	r0, #1
 8000360:	2d00      	cmp	r5, #0
 8000362:	d0e6      	beq.n	8000332 <__udivmoddi4+0xa6>
 8000364:	e9c5 6300 	strd	r6, r3, [r5]
 8000368:	e7e3      	b.n	8000332 <__udivmoddi4+0xa6>
 800036a:	2a00      	cmp	r2, #0
 800036c:	f040 8090 	bne.w	8000490 <__udivmoddi4+0x204>
 8000370:	eba1 040c 	sub.w	r4, r1, ip
 8000374:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000378:	fa1f f78c 	uxth.w	r7, ip
 800037c:	2101      	movs	r1, #1
 800037e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000382:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000386:	fb08 4416 	mls	r4, r8, r6, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb07 f006 	mul.w	r0, r7, r6
 8000392:	4298      	cmp	r0, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x11c>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x11a>
 80003a0:	4298      	cmp	r0, r3
 80003a2:	f200 80cd 	bhi.w	8000540 <__udivmoddi4+0x2b4>
 80003a6:	4626      	mov	r6, r4
 80003a8:	1a1c      	subs	r4, r3, r0
 80003aa:	fa1f f38e 	uxth.w	r3, lr
 80003ae:	fbb4 f0f8 	udiv	r0, r4, r8
 80003b2:	fb08 4410 	mls	r4, r8, r0, r4
 80003b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ba:	fb00 f707 	mul.w	r7, r0, r7
 80003be:	429f      	cmp	r7, r3
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x148>
 80003c2:	eb1c 0303 	adds.w	r3, ip, r3
 80003c6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x146>
 80003cc:	429f      	cmp	r7, r3
 80003ce:	f200 80b0 	bhi.w	8000532 <__udivmoddi4+0x2a6>
 80003d2:	4620      	mov	r0, r4
 80003d4:	1bdb      	subs	r3, r3, r7
 80003d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003da:	e7a5      	b.n	8000328 <__udivmoddi4+0x9c>
 80003dc:	f1c1 0620 	rsb	r6, r1, #32
 80003e0:	408b      	lsls	r3, r1
 80003e2:	fa22 f706 	lsr.w	r7, r2, r6
 80003e6:	431f      	orrs	r7, r3
 80003e8:	fa20 fc06 	lsr.w	ip, r0, r6
 80003ec:	fa04 f301 	lsl.w	r3, r4, r1
 80003f0:	ea43 030c 	orr.w	r3, r3, ip
 80003f4:	40f4      	lsrs	r4, r6
 80003f6:	fa00 f801 	lsl.w	r8, r0, r1
 80003fa:	0c38      	lsrs	r0, r7, #16
 80003fc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000400:	fbb4 fef0 	udiv	lr, r4, r0
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fb00 441e 	mls	r4, r0, lr, r4
 800040c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000410:	fb0e f90c 	mul.w	r9, lr, ip
 8000414:	45a1      	cmp	r9, r4
 8000416:	fa02 f201 	lsl.w	r2, r2, r1
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x1a6>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000422:	f080 8084 	bcs.w	800052e <__udivmoddi4+0x2a2>
 8000426:	45a1      	cmp	r9, r4
 8000428:	f240 8081 	bls.w	800052e <__udivmoddi4+0x2a2>
 800042c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000430:	443c      	add	r4, r7
 8000432:	eba4 0409 	sub.w	r4, r4, r9
 8000436:	fa1f f983 	uxth.w	r9, r3
 800043a:	fbb4 f3f0 	udiv	r3, r4, r0
 800043e:	fb00 4413 	mls	r4, r0, r3, r4
 8000442:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000446:	fb03 fc0c 	mul.w	ip, r3, ip
 800044a:	45a4      	cmp	ip, r4
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x1d2>
 800044e:	193c      	adds	r4, r7, r4
 8000450:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000454:	d267      	bcs.n	8000526 <__udivmoddi4+0x29a>
 8000456:	45a4      	cmp	ip, r4
 8000458:	d965      	bls.n	8000526 <__udivmoddi4+0x29a>
 800045a:	3b02      	subs	r3, #2
 800045c:	443c      	add	r4, r7
 800045e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000462:	fba0 9302 	umull	r9, r3, r0, r2
 8000466:	eba4 040c 	sub.w	r4, r4, ip
 800046a:	429c      	cmp	r4, r3
 800046c:	46ce      	mov	lr, r9
 800046e:	469c      	mov	ip, r3
 8000470:	d351      	bcc.n	8000516 <__udivmoddi4+0x28a>
 8000472:	d04e      	beq.n	8000512 <__udivmoddi4+0x286>
 8000474:	b155      	cbz	r5, 800048c <__udivmoddi4+0x200>
 8000476:	ebb8 030e 	subs.w	r3, r8, lr
 800047a:	eb64 040c 	sbc.w	r4, r4, ip
 800047e:	fa04 f606 	lsl.w	r6, r4, r6
 8000482:	40cb      	lsrs	r3, r1
 8000484:	431e      	orrs	r6, r3
 8000486:	40cc      	lsrs	r4, r1
 8000488:	e9c5 6400 	strd	r6, r4, [r5]
 800048c:	2100      	movs	r1, #0
 800048e:	e750      	b.n	8000332 <__udivmoddi4+0xa6>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f103 	lsr.w	r1, r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa24 f303 	lsr.w	r3, r4, r3
 80004a0:	4094      	lsls	r4, r2
 80004a2:	430c      	orrs	r4, r1
 80004a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004a8:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b4:	fb08 3110 	mls	r1, r8, r0, r3
 80004b8:	0c23      	lsrs	r3, r4, #16
 80004ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004be:	fb00 f107 	mul.w	r1, r0, r7
 80004c2:	4299      	cmp	r1, r3
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x24c>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004ce:	d22c      	bcs.n	800052a <__udivmoddi4+0x29e>
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d92a      	bls.n	800052a <__udivmoddi4+0x29e>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e0:	fb08 3311 	mls	r3, r8, r1, r3
 80004e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004e8:	fb01 f307 	mul.w	r3, r1, r7
 80004ec:	42a3      	cmp	r3, r4
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x276>
 80004f0:	eb1c 0404 	adds.w	r4, ip, r4
 80004f4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004f8:	d213      	bcs.n	8000522 <__udivmoddi4+0x296>
 80004fa:	42a3      	cmp	r3, r4
 80004fc:	d911      	bls.n	8000522 <__udivmoddi4+0x296>
 80004fe:	3902      	subs	r1, #2
 8000500:	4464      	add	r4, ip
 8000502:	1ae4      	subs	r4, r4, r3
 8000504:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000508:	e739      	b.n	800037e <__udivmoddi4+0xf2>
 800050a:	4604      	mov	r4, r0
 800050c:	e6f0      	b.n	80002f0 <__udivmoddi4+0x64>
 800050e:	4608      	mov	r0, r1
 8000510:	e706      	b.n	8000320 <__udivmoddi4+0x94>
 8000512:	45c8      	cmp	r8, r9
 8000514:	d2ae      	bcs.n	8000474 <__udivmoddi4+0x1e8>
 8000516:	ebb9 0e02 	subs.w	lr, r9, r2
 800051a:	eb63 0c07 	sbc.w	ip, r3, r7
 800051e:	3801      	subs	r0, #1
 8000520:	e7a8      	b.n	8000474 <__udivmoddi4+0x1e8>
 8000522:	4631      	mov	r1, r6
 8000524:	e7ed      	b.n	8000502 <__udivmoddi4+0x276>
 8000526:	4603      	mov	r3, r0
 8000528:	e799      	b.n	800045e <__udivmoddi4+0x1d2>
 800052a:	4630      	mov	r0, r6
 800052c:	e7d4      	b.n	80004d8 <__udivmoddi4+0x24c>
 800052e:	46d6      	mov	lr, sl
 8000530:	e77f      	b.n	8000432 <__udivmoddi4+0x1a6>
 8000532:	4463      	add	r3, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e74d      	b.n	80003d4 <__udivmoddi4+0x148>
 8000538:	4606      	mov	r6, r0
 800053a:	4623      	mov	r3, r4
 800053c:	4608      	mov	r0, r1
 800053e:	e70f      	b.n	8000360 <__udivmoddi4+0xd4>
 8000540:	3e02      	subs	r6, #2
 8000542:	4463      	add	r3, ip
 8000544:	e730      	b.n	80003a8 <__udivmoddi4+0x11c>
 8000546:	bf00      	nop

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <MX_GPIO_Init+0x2c>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	4a08      	ldr	r2, [pc, #32]	@ (8000578 <MX_GPIO_Init+0x2c>)
 8000558:	f043 0308 	orr.w	r3, r3, #8
 800055c:	6313      	str	r3, [r2, #48]	@ 0x30
 800055e:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <MX_GPIO_Init+0x2c>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	f003 0308 	and.w	r3, r3, #8
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40023800 	.word	0x40023800

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000580:	f000 fa8e 	bl	8000aa0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fc73 	bl	8000e6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f82c 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f7ff ffde 	bl	800054c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000590:	f000 fb62 	bl	8000c58 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000594:	f000 fb30 	bl	8000bf8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart3, (uint8_t *) startText, strlen(startText), 1000);
 8000598:	480e      	ldr	r0, [pc, #56]	@ (80005d4 <main+0x58>)
 800059a:	f7ff fe4d 	bl	8000238 <strlen>
 800059e:	4603      	mov	r3, r0
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005a6:	490b      	ldr	r1, [pc, #44]	@ (80005d4 <main+0x58>)
 80005a8:	480b      	ldr	r0, [pc, #44]	@ (80005d8 <main+0x5c>)
 80005aa:	f002 f9df 	bl	800296c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *) nameInput, strlen(nameInput), 1000);
 80005ae:	480b      	ldr	r0, [pc, #44]	@ (80005dc <main+0x60>)
 80005b0:	f7ff fe42 	bl	8000238 <strlen>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005bc:	4907      	ldr	r1, [pc, #28]	@ (80005dc <main+0x60>)
 80005be:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <main+0x5c>)
 80005c0:	f002 f9d4 	bl	800296c <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart3, (uint8_t *) &ch, 1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	4906      	ldr	r1, [pc, #24]	@ (80005e0 <main+0x64>)
 80005c8:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <main+0x5c>)
 80005ca:	f002 fa58 	bl	8002a7e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ce:	bf00      	nop
 80005d0:	e7fd      	b.n	80005ce <main+0x52>
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000
 80005d8:	2000029c 	.word	0x2000029c
 80005dc:	20000034 	.word	0x20000034
 80005e0:	20000144 	.word	0x20000144

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	@ 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2234      	movs	r2, #52	@ 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fcc8 	bl	8003f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	4b2b      	ldr	r3, [pc, #172]	@ (80006b8 <SystemClock_Config+0xd4>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	4a2a      	ldr	r2, [pc, #168]	@ (80006b8 <SystemClock_Config+0xd4>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	@ 0x40
 8000614:	4b28      	ldr	r3, [pc, #160]	@ (80006b8 <SystemClock_Config+0xd4>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	4b26      	ldr	r3, [pc, #152]	@ (80006bc <SystemClock_Config+0xd8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a25      	ldr	r2, [pc, #148]	@ (80006bc <SystemClock_Config+0xd8>)
 8000626:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b23      	ldr	r3, [pc, #140]	@ (80006bc <SystemClock_Config+0xd8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000650:	23d8      	movs	r3, #216	@ 0xd8
 8000652:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800065c:	2302      	movs	r3, #2
 800065e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4618      	mov	r0, r3
 8000666:	f001 f877 	bl	8001758 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000670:	f000 fa42 	bl	8000af8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000674:	f001 f820 	bl	80016b8 <HAL_PWREx_EnableOverDrive>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800067e:	f000 fa3b 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000698:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2107      	movs	r1, #7
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fb07 	bl	8001cb4 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006ac:	f000 fa24 	bl	8000af8 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	@ 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4aa9      	ldr	r2, [pc, #676]	@ (8000974 <HAL_UART_RxCpltCallback+0x2b4>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	f040 80d9 	bne.w	8000886 <HAL_UART_RxCpltCallback+0x1c6>
		if (!alreadyEnterName) {
 80006d4:	4ba8      	ldr	r3, [pc, #672]	@ (8000978 <HAL_UART_RxCpltCallback+0x2b8>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	f083 0301 	eor.w	r3, r3, #1
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d060      	beq.n	80007a4 <HAL_UART_RxCpltCallback+0xe4>
			if (ch == '\n') {
 80006e2:	4ba6      	ldr	r3, [pc, #664]	@ (800097c <HAL_UART_RxCpltCallback+0x2bc>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b0a      	cmp	r3, #10
 80006e8:	d13e      	bne.n	8000768 <HAL_UART_RxCpltCallback+0xa8>
				myName[strlen(myName)] = ch;
 80006ea:	48a5      	ldr	r0, [pc, #660]	@ (8000980 <HAL_UART_RxCpltCallback+0x2c0>)
 80006ec:	f7ff fda4 	bl	8000238 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4aa2      	ldr	r2, [pc, #648]	@ (800097c <HAL_UART_RxCpltCallback+0x2bc>)
 80006f4:	7811      	ldrb	r1, [r2, #0]
 80006f6:	4aa2      	ldr	r2, [pc, #648]	@ (8000980 <HAL_UART_RxCpltCallback+0x2c0>)
 80006f8:	54d1      	strb	r1, [r2, r3]
				alreadyEnterName = true;
 80006fa:	4b9f      	ldr	r3, [pc, #636]	@ (8000978 <HAL_UART_RxCpltCallback+0x2b8>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t *) myName, strlen(myName), 1000);
 8000700:	489f      	ldr	r0, [pc, #636]	@ (8000980 <HAL_UART_RxCpltCallback+0x2c0>)
 8000702:	f7ff fd99 	bl	8000238 <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	b29a      	uxth	r2, r3
 800070a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070e:	499c      	ldr	r1, [pc, #624]	@ (8000980 <HAL_UART_RxCpltCallback+0x2c0>)
 8000710:	489c      	ldr	r0, [pc, #624]	@ (8000984 <HAL_UART_RxCpltCallback+0x2c4>)
 8000712:	f002 f92b 	bl	800296c <HAL_UART_Transmit>

				if (strcmp(myName, "q\r\n") == 0) {
 8000716:	499c      	ldr	r1, [pc, #624]	@ (8000988 <HAL_UART_RxCpltCallback+0x2c8>)
 8000718:	4899      	ldr	r0, [pc, #612]	@ (8000980 <HAL_UART_RxCpltCallback+0x2c0>)
 800071a:	f7ff fd95 	bl	8000248 <strcmp>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10b      	bne.n	800073c <HAL_UART_RxCpltCallback+0x7c>
					HAL_UART_Transmit(&huart3, (uint8_t *) &quitText, strlen(quitText), 1000);
 8000724:	4899      	ldr	r0, [pc, #612]	@ (800098c <HAL_UART_RxCpltCallback+0x2cc>)
 8000726:	f7ff fd87 	bl	8000238 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000732:	4996      	ldr	r1, [pc, #600]	@ (800098c <HAL_UART_RxCpltCallback+0x2cc>)
 8000734:	4896      	ldr	r0, [pc, #600]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 8000736:	f002 f919 	bl	800296c <HAL_UART_Transmit>
					return 0;
 800073a:	e198      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x3ae>
				}

				myName[strlen(myName) - 1] = '\0';
 800073c:	4890      	ldr	r0, [pc, #576]	@ (8000980 <HAL_UART_RxCpltCallback+0x2c0>)
 800073e:	f7ff fd7b 	bl	8000238 <strlen>
 8000742:	4603      	mov	r3, r0
 8000744:	3b01      	subs	r3, #1
 8000746:	4a8e      	ldr	r2, [pc, #568]	@ (8000980 <HAL_UART_RxCpltCallback+0x2c0>)
 8000748:	2100      	movs	r1, #0
 800074a:	54d1      	strb	r1, [r2, r3]
				myName[strlen(myName) - 1] = '\0';
 800074c:	488c      	ldr	r0, [pc, #560]	@ (8000980 <HAL_UART_RxCpltCallback+0x2c0>)
 800074e:	f7ff fd73 	bl	8000238 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	3b01      	subs	r3, #1
 8000756:	4a8a      	ldr	r2, [pc, #552]	@ (8000980 <HAL_UART_RxCpltCallback+0x2c0>)
 8000758:	2100      	movs	r1, #0
 800075a:	54d1      	strb	r1, [r2, r3]

				HAL_UART_Receive_IT(&huart2, (uint8_t *) &ch1, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	498d      	ldr	r1, [pc, #564]	@ (8000994 <HAL_UART_RxCpltCallback+0x2d4>)
 8000760:	4888      	ldr	r0, [pc, #544]	@ (8000984 <HAL_UART_RxCpltCallback+0x2c4>)
 8000762:	f002 f98c 	bl	8002a7e <HAL_UART_Receive_IT>
 8000766:	e182      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x3ae>
			}
			else if (ch == 0x08 && strlen(myName) > 0) {
 8000768:	4b84      	ldr	r3, [pc, #528]	@ (800097c <HAL_UART_RxCpltCallback+0x2bc>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b08      	cmp	r3, #8
 800076e:	d104      	bne.n	800077a <HAL_UART_RxCpltCallback+0xba>
 8000770:	4b83      	ldr	r3, [pc, #524]	@ (8000980 <HAL_UART_RxCpltCallback+0x2c0>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	f040 817a 	bne.w	8000a6e <HAL_UART_RxCpltCallback+0x3ae>
				// handle delete case
			} else {
				myName[strlen(myName)] = ch;
 800077a:	4881      	ldr	r0, [pc, #516]	@ (8000980 <HAL_UART_RxCpltCallback+0x2c0>)
 800077c:	f7ff fd5c 	bl	8000238 <strlen>
 8000780:	4603      	mov	r3, r0
 8000782:	4a7e      	ldr	r2, [pc, #504]	@ (800097c <HAL_UART_RxCpltCallback+0x2bc>)
 8000784:	7811      	ldrb	r1, [r2, #0]
 8000786:	4a7e      	ldr	r2, [pc, #504]	@ (8000980 <HAL_UART_RxCpltCallback+0x2c0>)
 8000788:	54d1      	strb	r1, [r2, r3]

				HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 1000);
 800078a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078e:	2201      	movs	r2, #1
 8000790:	497a      	ldr	r1, [pc, #488]	@ (800097c <HAL_UART_RxCpltCallback+0x2bc>)
 8000792:	487f      	ldr	r0, [pc, #508]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 8000794:	f002 f8ea 	bl	800296c <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart3, (uint8_t *) &ch, 1);
 8000798:	2201      	movs	r2, #1
 800079a:	4978      	ldr	r1, [pc, #480]	@ (800097c <HAL_UART_RxCpltCallback+0x2bc>)
 800079c:	487c      	ldr	r0, [pc, #496]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 800079e:	f002 f96e 	bl	8002a7e <HAL_UART_Receive_IT>
 80007a2:	e164      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x3ae>

			}
		} else if (alreadyEnterName) {
 80007a4:	4b74      	ldr	r3, [pc, #464]	@ (8000978 <HAL_UART_RxCpltCallback+0x2b8>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	f000 8160 	beq.w	8000a6e <HAL_UART_RxCpltCallback+0x3ae>
			if (ch == '\n') {
 80007ae:	4b73      	ldr	r3, [pc, #460]	@ (800097c <HAL_UART_RxCpltCallback+0x2bc>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b0a      	cmp	r3, #10
 80007b4:	d14d      	bne.n	8000852 <HAL_UART_RxCpltCallback+0x192>
				inputBuffer[strlen(inputBuffer)] = ch;
 80007b6:	4878      	ldr	r0, [pc, #480]	@ (8000998 <HAL_UART_RxCpltCallback+0x2d8>)
 80007b8:	f7ff fd3e 	bl	8000238 <strlen>
 80007bc:	4603      	mov	r3, r0
 80007be:	4a6f      	ldr	r2, [pc, #444]	@ (800097c <HAL_UART_RxCpltCallback+0x2bc>)
 80007c0:	7811      	ldrb	r1, [r2, #0]
 80007c2:	4a75      	ldr	r2, [pc, #468]	@ (8000998 <HAL_UART_RxCpltCallback+0x2d8>)
 80007c4:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&huart2, (uint8_t *) inputBuffer, strlen(inputBuffer), 1000);
 80007c6:	4874      	ldr	r0, [pc, #464]	@ (8000998 <HAL_UART_RxCpltCallback+0x2d8>)
 80007c8:	f7ff fd36 	bl	8000238 <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007d4:	4970      	ldr	r1, [pc, #448]	@ (8000998 <HAL_UART_RxCpltCallback+0x2d8>)
 80007d6:	486b      	ldr	r0, [pc, #428]	@ (8000984 <HAL_UART_RxCpltCallback+0x2c4>)
 80007d8:	f002 f8c8 	bl	800296c <HAL_UART_Transmit>

				if (strcmp(inputBuffer, "q\r\n") == 0) {
 80007dc:	496a      	ldr	r1, [pc, #424]	@ (8000988 <HAL_UART_RxCpltCallback+0x2c8>)
 80007de:	486e      	ldr	r0, [pc, #440]	@ (8000998 <HAL_UART_RxCpltCallback+0x2d8>)
 80007e0:	f7ff fd32 	bl	8000248 <strcmp>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d10b      	bne.n	8000802 <HAL_UART_RxCpltCallback+0x142>
					HAL_UART_Transmit(&huart3, (uint8_t *) &quitText, strlen(quitText), 1000);
 80007ea:	4868      	ldr	r0, [pc, #416]	@ (800098c <HAL_UART_RxCpltCallback+0x2cc>)
 80007ec:	f7ff fd24 	bl	8000238 <strlen>
 80007f0:	4603      	mov	r3, r0
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f8:	4964      	ldr	r1, [pc, #400]	@ (800098c <HAL_UART_RxCpltCallback+0x2cc>)
 80007fa:	4865      	ldr	r0, [pc, #404]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 80007fc:	f002 f8b6 	bl	800296c <HAL_UART_Transmit>
					return 0;
 8000800:	e135      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x3ae>
				}

				memset(inputBuffer, '\0', sizeof(inputBuffer));
 8000802:	2264      	movs	r2, #100	@ 0x64
 8000804:	2100      	movs	r1, #0
 8000806:	4864      	ldr	r0, [pc, #400]	@ (8000998 <HAL_UART_RxCpltCallback+0x2d8>)
 8000808:	f003 fbbe 	bl	8003f88 <memset>

				HAL_UART_Transmit(&huart3, (uint8_t *) "\t", strlen("\t"), 1000);
 800080c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000810:	2201      	movs	r2, #1
 8000812:	4962      	ldr	r1, [pc, #392]	@ (800099c <HAL_UART_RxCpltCallback+0x2dc>)
 8000814:	485e      	ldr	r0, [pc, #376]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 8000816:	f002 f8a9 	bl	800296c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t *) yourName, strlen(yourName), 1000);
 800081a:	4861      	ldr	r0, [pc, #388]	@ (80009a0 <HAL_UART_RxCpltCallback+0x2e0>)
 800081c:	f7ff fd0c 	bl	8000238 <strlen>
 8000820:	4603      	mov	r3, r0
 8000822:	b29a      	uxth	r2, r3
 8000824:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000828:	495d      	ldr	r1, [pc, #372]	@ (80009a0 <HAL_UART_RxCpltCallback+0x2e0>)
 800082a:	4859      	ldr	r0, [pc, #356]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 800082c:	f002 f89e 	bl	800296c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t *) collonText, strlen(collonText), 1000);
 8000830:	485c      	ldr	r0, [pc, #368]	@ (80009a4 <HAL_UART_RxCpltCallback+0x2e4>)
 8000832:	f7ff fd01 	bl	8000238 <strlen>
 8000836:	4603      	mov	r3, r0
 8000838:	b29a      	uxth	r2, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083e:	4959      	ldr	r1, [pc, #356]	@ (80009a4 <HAL_UART_RxCpltCallback+0x2e4>)
 8000840:	4853      	ldr	r0, [pc, #332]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 8000842:	f002 f893 	bl	800296c <HAL_UART_Transmit>

				HAL_UART_Receive_IT(&huart2, (uint8_t *) &ch1, 1);
 8000846:	2201      	movs	r2, #1
 8000848:	4952      	ldr	r1, [pc, #328]	@ (8000994 <HAL_UART_RxCpltCallback+0x2d4>)
 800084a:	484e      	ldr	r0, [pc, #312]	@ (8000984 <HAL_UART_RxCpltCallback+0x2c4>)
 800084c:	f002 f917 	bl	8002a7e <HAL_UART_Receive_IT>
 8000850:	e10d      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x3ae>
			} else if (ch == 0x08) {
 8000852:	4b4a      	ldr	r3, [pc, #296]	@ (800097c <HAL_UART_RxCpltCallback+0x2bc>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b08      	cmp	r3, #8
 8000858:	f000 8109 	beq.w	8000a6e <HAL_UART_RxCpltCallback+0x3ae>
				// handle delete case
			} else {
				inputBuffer[strlen(inputBuffer)] = ch;
 800085c:	484e      	ldr	r0, [pc, #312]	@ (8000998 <HAL_UART_RxCpltCallback+0x2d8>)
 800085e:	f7ff fceb 	bl	8000238 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	4a45      	ldr	r2, [pc, #276]	@ (800097c <HAL_UART_RxCpltCallback+0x2bc>)
 8000866:	7811      	ldrb	r1, [r2, #0]
 8000868:	4a4b      	ldr	r2, [pc, #300]	@ (8000998 <HAL_UART_RxCpltCallback+0x2d8>)
 800086a:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 1000);
 800086c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000870:	2201      	movs	r2, #1
 8000872:	4942      	ldr	r1, [pc, #264]	@ (800097c <HAL_UART_RxCpltCallback+0x2bc>)
 8000874:	4846      	ldr	r0, [pc, #280]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 8000876:	f002 f879 	bl	800296c <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart3, (uint8_t *) &ch, 1);
 800087a:	2201      	movs	r2, #1
 800087c:	493f      	ldr	r1, [pc, #252]	@ (800097c <HAL_UART_RxCpltCallback+0x2bc>)
 800087e:	4844      	ldr	r0, [pc, #272]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 8000880:	f002 f8fd 	bl	8002a7e <HAL_UART_Receive_IT>
 8000884:	e0f3      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x3ae>

			}
		}
	}

	else if (huart->Instance == USART2) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a47      	ldr	r2, [pc, #284]	@ (80009a8 <HAL_UART_RxCpltCallback+0x2e8>)
 800088c:	4293      	cmp	r3, r2
 800088e:	f040 80ee 	bne.w	8000a6e <HAL_UART_RxCpltCallback+0x3ae>
		if (!alreadyReceiveName) {
 8000892:	4b46      	ldr	r3, [pc, #280]	@ (80009ac <HAL_UART_RxCpltCallback+0x2ec>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	f083 0301 	eor.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	f000 808f 	beq.w	80009c0 <HAL_UART_RxCpltCallback+0x300>
			if (ch1 == '\r') {
 80008a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000994 <HAL_UART_RxCpltCallback+0x2d4>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b0d      	cmp	r3, #13
 80008a8:	d155      	bne.n	8000956 <HAL_UART_RxCpltCallback+0x296>
				alreadyReceiveName = true;
 80008aa:	4b40      	ldr	r3, [pc, #256]	@ (80009ac <HAL_UART_RxCpltCallback+0x2ec>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]
				if (strcmp(yourName, "q") == 0) {
 80008b0:	493f      	ldr	r1, [pc, #252]	@ (80009b0 <HAL_UART_RxCpltCallback+0x2f0>)
 80008b2:	483b      	ldr	r0, [pc, #236]	@ (80009a0 <HAL_UART_RxCpltCallback+0x2e0>)
 80008b4:	f7ff fcc8 	bl	8000248 <strcmp>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10b      	bne.n	80008d6 <HAL_UART_RxCpltCallback+0x216>
					HAL_UART_Transmit(&huart3, (uint8_t *) &quitText, strlen(quitText), 1000);
 80008be:	4833      	ldr	r0, [pc, #204]	@ (800098c <HAL_UART_RxCpltCallback+0x2cc>)
 80008c0:	f7ff fcba 	bl	8000238 <strlen>
 80008c4:	4603      	mov	r3, r0
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008cc:	492f      	ldr	r1, [pc, #188]	@ (800098c <HAL_UART_RxCpltCallback+0x2cc>)
 80008ce:	4830      	ldr	r0, [pc, #192]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 80008d0:	f002 f84c 	bl	800296c <HAL_UART_Transmit>
					return 0;
 80008d4:	e0cb      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x3ae>
				}


				HAL_UART_Transmit(&huart3, (uint8_t *) "\t", strlen("\t"), 1000);
 80008d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008da:	2201      	movs	r2, #1
 80008dc:	492f      	ldr	r1, [pc, #188]	@ (800099c <HAL_UART_RxCpltCallback+0x2dc>)
 80008de:	482c      	ldr	r0, [pc, #176]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 80008e0:	f002 f844 	bl	800296c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t *) yourName, strlen(yourName), 1000);
 80008e4:	482e      	ldr	r0, [pc, #184]	@ (80009a0 <HAL_UART_RxCpltCallback+0x2e0>)
 80008e6:	f7ff fca7 	bl	8000238 <strlen>
 80008ea:	4603      	mov	r3, r0
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f2:	492b      	ldr	r1, [pc, #172]	@ (80009a0 <HAL_UART_RxCpltCallback+0x2e0>)
 80008f4:	4826      	ldr	r0, [pc, #152]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 80008f6:	f002 f839 	bl	800296c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t *) isReadyText, strlen(isReadyText), 1000);
 80008fa:	482e      	ldr	r0, [pc, #184]	@ (80009b4 <HAL_UART_RxCpltCallback+0x2f4>)
 80008fc:	f7ff fc9c 	bl	8000238 <strlen>
 8000900:	4603      	mov	r3, r0
 8000902:	b29a      	uxth	r2, r3
 8000904:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000908:	492a      	ldr	r1, [pc, #168]	@ (80009b4 <HAL_UART_RxCpltCallback+0x2f4>)
 800090a:	4821      	ldr	r0, [pc, #132]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 800090c:	f002 f82e 	bl	800296c <HAL_UART_Transmit>

				HAL_UART_Transmit(&huart3, (uint8_t *) "\r\n\t", strlen("\r\n\t"), 1000);
 8000910:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000914:	2203      	movs	r2, #3
 8000916:	4928      	ldr	r1, [pc, #160]	@ (80009b8 <HAL_UART_RxCpltCallback+0x2f8>)
 8000918:	481d      	ldr	r0, [pc, #116]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 800091a:	f002 f827 	bl	800296c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t *) myName, strlen(myName), 1000);
 800091e:	4818      	ldr	r0, [pc, #96]	@ (8000980 <HAL_UART_RxCpltCallback+0x2c0>)
 8000920:	f7ff fc8a 	bl	8000238 <strlen>
 8000924:	4603      	mov	r3, r0
 8000926:	b29a      	uxth	r2, r3
 8000928:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092c:	4914      	ldr	r1, [pc, #80]	@ (8000980 <HAL_UART_RxCpltCallback+0x2c0>)
 800092e:	4818      	ldr	r0, [pc, #96]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 8000930:	f002 f81c 	bl	800296c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t *) arrowText, strlen(arrowText), 1000);
 8000934:	4821      	ldr	r0, [pc, #132]	@ (80009bc <HAL_UART_RxCpltCallback+0x2fc>)
 8000936:	f7ff fc7f 	bl	8000238 <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	b29a      	uxth	r2, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000942:	491e      	ldr	r1, [pc, #120]	@ (80009bc <HAL_UART_RxCpltCallback+0x2fc>)
 8000944:	4812      	ldr	r0, [pc, #72]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 8000946:	f002 f811 	bl	800296c <HAL_UART_Transmit>

				HAL_UART_Receive_IT(&huart3, (uint8_t *) &ch, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	490b      	ldr	r1, [pc, #44]	@ (800097c <HAL_UART_RxCpltCallback+0x2bc>)
 800094e:	4810      	ldr	r0, [pc, #64]	@ (8000990 <HAL_UART_RxCpltCallback+0x2d0>)
 8000950:	f002 f895 	bl	8002a7e <HAL_UART_Receive_IT>
 8000954:	e08b      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x3ae>
			} else {
				yourName[strlen(yourName)] = ch1;
 8000956:	4812      	ldr	r0, [pc, #72]	@ (80009a0 <HAL_UART_RxCpltCallback+0x2e0>)
 8000958:	f7ff fc6e 	bl	8000238 <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	4a0d      	ldr	r2, [pc, #52]	@ (8000994 <HAL_UART_RxCpltCallback+0x2d4>)
 8000960:	7811      	ldrb	r1, [r2, #0]
 8000962:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <HAL_UART_RxCpltCallback+0x2e0>)
 8000964:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Receive_IT(&huart2, (uint8_t *) &ch1, 1);
 8000966:	2201      	movs	r2, #1
 8000968:	490a      	ldr	r1, [pc, #40]	@ (8000994 <HAL_UART_RxCpltCallback+0x2d4>)
 800096a:	4806      	ldr	r0, [pc, #24]	@ (8000984 <HAL_UART_RxCpltCallback+0x2c4>)
 800096c:	f002 f887 	bl	8002a7e <HAL_UART_Receive_IT>
 8000970:	e07d      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x3ae>
 8000972:	bf00      	nop
 8000974:	40004800 	.word	0x40004800
 8000978:	20000210 	.word	0x20000210
 800097c:	20000144 	.word	0x20000144
 8000980:	20000148 	.word	0x20000148
 8000984:	20000214 	.word	0x20000214
 8000988:	08003ff8 	.word	0x08003ff8
 800098c:	20000024 	.word	0x20000024
 8000990:	2000029c 	.word	0x2000029c
 8000994:	20000145 	.word	0x20000145
 8000998:	200000e0 	.word	0x200000e0
 800099c:	08003ffc 	.word	0x08003ffc
 80009a0:	200001ac 	.word	0x200001ac
 80009a4:	20000050 	.word	0x20000050
 80009a8:	40004400 	.word	0x40004400
 80009ac:	20000211 	.word	0x20000211
 80009b0:	08004000 	.word	0x08004000
 80009b4:	2000003c 	.word	0x2000003c
 80009b8:	08004004 	.word	0x08004004
 80009bc:	20000048 	.word	0x20000048
			}
		} else if (alreadyReceiveName) {
 80009c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <HAL_UART_RxCpltCallback+0x3b4>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d052      	beq.n	8000a6e <HAL_UART_RxCpltCallback+0x3ae>
			if (ch1 == '\r') {
 80009c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a78 <HAL_UART_RxCpltCallback+0x3b8>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b0d      	cmp	r3, #13
 80009ce:	d141      	bne.n	8000a54 <HAL_UART_RxCpltCallback+0x394>
				if (strcmp(receiveBuffer, "q") == 0) {
 80009d0:	492a      	ldr	r1, [pc, #168]	@ (8000a7c <HAL_UART_RxCpltCallback+0x3bc>)
 80009d2:	482b      	ldr	r0, [pc, #172]	@ (8000a80 <HAL_UART_RxCpltCallback+0x3c0>)
 80009d4:	f7ff fc38 	bl	8000248 <strcmp>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d107      	bne.n	80009ee <HAL_UART_RxCpltCallback+0x32e>
					HAL_UART_Transmit(&huart3, (uint8_t *) "\r\nQuit Already", strlen("\r\nQuit Already"), 1000);
 80009de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e2:	220e      	movs	r2, #14
 80009e4:	4927      	ldr	r1, [pc, #156]	@ (8000a84 <HAL_UART_RxCpltCallback+0x3c4>)
 80009e6:	4828      	ldr	r0, [pc, #160]	@ (8000a88 <HAL_UART_RxCpltCallback+0x3c8>)
 80009e8:	f001 ffc0 	bl	800296c <HAL_UART_Transmit>
					return 0;
 80009ec:	e03f      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x3ae>
				}
				HAL_UART_Transmit(&huart3, (uint8_t *) receiveBuffer, strlen(receiveBuffer), 1000);
 80009ee:	4824      	ldr	r0, [pc, #144]	@ (8000a80 <HAL_UART_RxCpltCallback+0x3c0>)
 80009f0:	f7ff fc22 	bl	8000238 <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fc:	4920      	ldr	r1, [pc, #128]	@ (8000a80 <HAL_UART_RxCpltCallback+0x3c0>)
 80009fe:	4822      	ldr	r0, [pc, #136]	@ (8000a88 <HAL_UART_RxCpltCallback+0x3c8>)
 8000a00:	f001 ffb4 	bl	800296c <HAL_UART_Transmit>
				memset(receiveBuffer, '\0', sizeof(receiveBuffer));
 8000a04:	2264      	movs	r2, #100	@ 0x64
 8000a06:	2100      	movs	r1, #0
 8000a08:	481d      	ldr	r0, [pc, #116]	@ (8000a80 <HAL_UART_RxCpltCallback+0x3c0>)
 8000a0a:	f003 fabd 	bl	8003f88 <memset>

				HAL_UART_Transmit(&huart3, (uint8_t *) "\r\n\t", strlen("\r\n\t"), 1000);
 8000a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a12:	2203      	movs	r2, #3
 8000a14:	491d      	ldr	r1, [pc, #116]	@ (8000a8c <HAL_UART_RxCpltCallback+0x3cc>)
 8000a16:	481c      	ldr	r0, [pc, #112]	@ (8000a88 <HAL_UART_RxCpltCallback+0x3c8>)
 8000a18:	f001 ffa8 	bl	800296c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t *) myName, strlen(myName), 1000);
 8000a1c:	481c      	ldr	r0, [pc, #112]	@ (8000a90 <HAL_UART_RxCpltCallback+0x3d0>)
 8000a1e:	f7ff fc0b 	bl	8000238 <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2a:	4919      	ldr	r1, [pc, #100]	@ (8000a90 <HAL_UART_RxCpltCallback+0x3d0>)
 8000a2c:	4816      	ldr	r0, [pc, #88]	@ (8000a88 <HAL_UART_RxCpltCallback+0x3c8>)
 8000a2e:	f001 ff9d 	bl	800296c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t *) arrowText, strlen(arrowText), 1000);
 8000a32:	4818      	ldr	r0, [pc, #96]	@ (8000a94 <HAL_UART_RxCpltCallback+0x3d4>)
 8000a34:	f7ff fc00 	bl	8000238 <strlen>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a40:	4914      	ldr	r1, [pc, #80]	@ (8000a94 <HAL_UART_RxCpltCallback+0x3d4>)
 8000a42:	4811      	ldr	r0, [pc, #68]	@ (8000a88 <HAL_UART_RxCpltCallback+0x3c8>)
 8000a44:	f001 ff92 	bl	800296c <HAL_UART_Transmit>

				HAL_UART_Receive_IT(&huart3, (uint8_t *) &ch, 1);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4913      	ldr	r1, [pc, #76]	@ (8000a98 <HAL_UART_RxCpltCallback+0x3d8>)
 8000a4c:	480e      	ldr	r0, [pc, #56]	@ (8000a88 <HAL_UART_RxCpltCallback+0x3c8>)
 8000a4e:	f002 f816 	bl	8002a7e <HAL_UART_Receive_IT>
 8000a52:	e00c      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x3ae>
			} else {
				receiveBuffer[strlen(receiveBuffer)] = ch1;
 8000a54:	480a      	ldr	r0, [pc, #40]	@ (8000a80 <HAL_UART_RxCpltCallback+0x3c0>)
 8000a56:	f7ff fbef 	bl	8000238 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a06      	ldr	r2, [pc, #24]	@ (8000a78 <HAL_UART_RxCpltCallback+0x3b8>)
 8000a5e:	7811      	ldrb	r1, [r2, #0]
 8000a60:	4a07      	ldr	r2, [pc, #28]	@ (8000a80 <HAL_UART_RxCpltCallback+0x3c0>)
 8000a62:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Receive_IT(&huart2, (uint8_t *) &ch1, 1);
 8000a64:	2201      	movs	r2, #1
 8000a66:	4904      	ldr	r1, [pc, #16]	@ (8000a78 <HAL_UART_RxCpltCallback+0x3b8>)
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <HAL_UART_RxCpltCallback+0x3dc>)
 8000a6a:	f002 f808 	bl	8002a7e <HAL_UART_Receive_IT>

		}
	}


}
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000211 	.word	0x20000211
 8000a78:	20000145 	.word	0x20000145
 8000a7c:	08004000 	.word	0x08004000
 8000a80:	2000007c 	.word	0x2000007c
 8000a84:	08004008 	.word	0x08004008
 8000a88:	2000029c 	.word	0x2000029c
 8000a8c:	08004004 	.word	0x08004004
 8000a90:	20000148 	.word	0x20000148
 8000a94:	20000048 	.word	0x20000048
 8000a98:	20000144 	.word	0x20000144
 8000a9c:	20000214 	.word	0x20000214

08000aa0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ab2:	f000 fb4b 	bl	800114c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ac2:	231f      	movs	r3, #31
 8000ac4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ac6:	2387      	movs	r3, #135	@ 0x87
 8000ac8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 fb69 	bl	80011bc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000aea:	2004      	movs	r0, #4
 8000aec:	f000 fb46 	bl	800117c <HAL_MPU_Enable>

}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <Error_Handler+0x8>

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <NMI_Handler+0x4>

08000b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <MemManage_Handler+0x4>

08000b64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba2:	f000 f9a1 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb0:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <USART2_IRQHandler+0x10>)
 8000bb2:	f001 ffa9 	bl	8002b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000214 	.word	0x20000214

08000bc0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bc4:	4802      	ldr	r0, [pc, #8]	@ (8000bd0 <USART3_IRQHandler+0x10>)
 8000bc6:	f001 ff9f 	bl	8002b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000029c 	.word	0x2000029c

08000bd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000bfe:	4a15      	ldr	r2, [pc, #84]	@ (8000c54 <MX_USART2_UART_Init+0x5c>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c3c:	f001 fe48 	bl	80028d0 <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c46:	f7ff ff57 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000214 	.word	0x20000214
 8000c54:	40004400 	.word	0x40004400

08000c58 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c5e:	4a15      	ldr	r2, [pc, #84]	@ (8000cb4 <MX_USART3_UART_Init+0x5c>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c62:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c88:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_USART3_UART_Init+0x58>)
 8000c9c:	f001 fe18 	bl	80028d0 <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ca6:	f7ff ff27 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000029c 	.word	0x2000029c
 8000cb4:	40004800 	.word	0x40004800

08000cb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0b0      	sub	sp, #192	@ 0xc0
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2290      	movs	r2, #144	@ 0x90
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 f955 	bl	8003f88 <memset>
  if(uartHandle->Instance==USART2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a4a      	ldr	r2, [pc, #296]	@ (8000e0c <HAL_UART_MspInit+0x154>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d143      	bne.n	8000d70 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ce8:	2380      	movs	r3, #128	@ 0x80
 8000cea:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 f9c3 	bl	8002080 <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d00:	f7ff fefa 	bl	8000af8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d04:	4b42      	ldr	r3, [pc, #264]	@ (8000e10 <HAL_UART_MspInit+0x158>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d08:	4a41      	ldr	r2, [pc, #260]	@ (8000e10 <HAL_UART_MspInit+0x158>)
 8000d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d10:	4b3f      	ldr	r3, [pc, #252]	@ (8000e10 <HAL_UART_MspInit+0x158>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d18:	61bb      	str	r3, [r7, #24]
 8000d1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e10 <HAL_UART_MspInit+0x158>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d20:	4a3b      	ldr	r2, [pc, #236]	@ (8000e10 <HAL_UART_MspInit+0x158>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d28:	4b39      	ldr	r3, [pc, #228]	@ (8000e10 <HAL_UART_MspInit+0x158>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d34:	2360      	movs	r3, #96	@ 0x60
 8000d36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d52:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d56:	4619      	mov	r1, r3
 8000d58:	482e      	ldr	r0, [pc, #184]	@ (8000e14 <HAL_UART_MspInit+0x15c>)
 8000d5a:	f000 fb01 	bl	8001360 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2026      	movs	r0, #38	@ 0x26
 8000d64:	f000 f9bb 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d68:	2026      	movs	r0, #38	@ 0x26
 8000d6a:	f000 f9d4 	bl	8001116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d6e:	e049      	b.n	8000e04 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART3)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a28      	ldr	r2, [pc, #160]	@ (8000e18 <HAL_UART_MspInit+0x160>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d144      	bne.n	8000e04 <HAL_UART_MspInit+0x14c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 f979 	bl	8002080 <HAL_RCCEx_PeriphCLKConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000d94:	f7ff feb0 	bl	8000af8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d98:	4b1d      	ldr	r3, [pc, #116]	@ (8000e10 <HAL_UART_MspInit+0x158>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e10 <HAL_UART_MspInit+0x158>)
 8000d9e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000da2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <HAL_UART_MspInit+0x158>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db0:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <HAL_UART_MspInit+0x158>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db4:	4a16      	ldr	r2, [pc, #88]	@ (8000e10 <HAL_UART_MspInit+0x158>)
 8000db6:	f043 0308 	orr.w	r3, r3, #8
 8000dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbc:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <HAL_UART_MspInit+0x158>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dc8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de2:	2307      	movs	r3, #7
 8000de4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000dec:	4619      	mov	r1, r3
 8000dee:	4809      	ldr	r0, [pc, #36]	@ (8000e14 <HAL_UART_MspInit+0x15c>)
 8000df0:	f000 fab6 	bl	8001360 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2100      	movs	r1, #0
 8000df8:	2027      	movs	r0, #39	@ 0x27
 8000dfa:	f000 f970 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dfe:	2027      	movs	r0, #39	@ 0x27
 8000e00:	f000 f989 	bl	8001116 <HAL_NVIC_EnableIRQ>
}
 8000e04:	bf00      	nop
 8000e06:	37c0      	adds	r7, #192	@ 0xc0
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40004400 	.word	0x40004400
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020c00 	.word	0x40020c00
 8000e18:	40004800 	.word	0x40004800

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e20:	f7ff fed8 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	@ (8000e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f003 f8a5 	bl	8003f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fb95 	bl	800057c <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e54:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e60:	08004040 	.word	0x08004040
  ldr r2, =_sbss
 8000e64:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e68:	20000328 	.word	0x20000328

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>

08000e6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e72:	2003      	movs	r0, #3
 8000e74:	f000 f928 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e78:	200f      	movs	r0, #15
 8000e7a:	f000 f805 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7e:	f7ff fe41 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f943 	bl	8001132 <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ec4:	f000 f90b 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000054 	.word	0x20000054
 8000ee0:	2000005c 	.word	0x2000005c
 8000ee4:	20000058 	.word	0x20000058

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	2000005c 	.word	0x2000005c
 8000f0c:	20000324 	.word	0x20000324

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000324 	.word	0x20000324

08000f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <__NVIC_SetPriorityGrouping+0x40>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <__NVIC_SetPriorityGrouping+0x40>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00
 8000f6c:	05fa0000 	.word	0x05fa0000

08000f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	@ (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	@ (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	@ (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	@ 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	@ 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010a8:	f7ff ff8e 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff29 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff3e 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff8e 	bl	800101c <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5d 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff31 	bl	8000f8c <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffa2 	bl	8001084 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001150:	f3bf 8f5f 	dmb	sy
}
 8001154:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001156:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <HAL_MPU_Disable+0x28>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115a:	4a06      	ldr	r2, [pc, #24]	@ (8001174 <HAL_MPU_Disable+0x28>)
 800115c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001160:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001162:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <HAL_MPU_Disable+0x2c>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	e000ed90 	.word	0xe000ed90

0800117c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001184:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <HAL_MPU_Enable+0x38>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_MPU_Enable+0x3c>)
 8001190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001192:	4a09      	ldr	r2, [pc, #36]	@ (80011b8 <HAL_MPU_Enable+0x3c>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001198:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800119a:	f3bf 8f4f 	dsb	sy
}
 800119e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011a0:	f3bf 8f6f 	isb	sy
}
 80011a4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed90 	.word	0xe000ed90
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	785a      	ldrb	r2, [r3, #1]
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <HAL_MPU_ConfigRegion+0x7c>)
 80011ca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80011cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <HAL_MPU_ConfigRegion+0x7c>)
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <HAL_MPU_ConfigRegion+0x7c>)
 80011d2:	f023 0301 	bic.w	r3, r3, #1
 80011d6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80011d8:	4a17      	ldr	r2, [pc, #92]	@ (8001238 <HAL_MPU_ConfigRegion+0x7c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7b1b      	ldrb	r3, [r3, #12]
 80011e4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7adb      	ldrb	r3, [r3, #11]
 80011ea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7a9b      	ldrb	r3, [r3, #10]
 80011f2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7b5b      	ldrb	r3, [r3, #13]
 80011fa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7b9b      	ldrb	r3, [r3, #14]
 8001202:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001204:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7bdb      	ldrb	r3, [r3, #15]
 800120a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800120c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7a5b      	ldrb	r3, [r3, #9]
 8001212:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001214:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7a1b      	ldrb	r3, [r3, #8]
 800121a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800121c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	7812      	ldrb	r2, [r2, #0]
 8001222:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001224:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001226:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001228:	6113      	str	r3, [r2, #16]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed90 	.word	0xe000ed90

0800123c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001248:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800124a:	f7ff fe61 	bl	8000f10 <HAL_GetTick>
 800124e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d008      	beq.n	800126e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2280      	movs	r2, #128	@ 0x80
 8001260:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e052      	b.n	8001314 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0216 	bic.w	r2, r2, #22
 800127c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800128c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	d103      	bne.n	800129e <HAL_DMA_Abort+0x62>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800129a:	2b00      	cmp	r3, #0
 800129c:	d007      	beq.n	80012ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0208 	bic.w	r2, r2, #8
 80012ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0201 	bic.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012be:	e013      	b.n	80012e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012c0:	f7ff fe26 	bl	8000f10 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d90c      	bls.n	80012e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2220      	movs	r2, #32
 80012d2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2203      	movs	r2, #3
 80012d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e015      	b.n	8001314 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1e4      	bne.n	80012c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012fa:	223f      	movs	r2, #63	@ 0x3f
 80012fc:	409a      	lsls	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d004      	beq.n	800133a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2280      	movs	r2, #128	@ 0x80
 8001334:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00c      	b.n	8001354 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2205      	movs	r2, #5
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	@ 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	e175      	b.n	800166c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 8164 	bne.w	8001666 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d005      	beq.n	80013b6 <HAL_GPIO_Init+0x56>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d130      	bne.n	8001418 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 0201 	and.w	r2, r3, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b03      	cmp	r3, #3
 8001422:	d017      	beq.n	8001454 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d123      	bne.n	80014a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	08da      	lsrs	r2, r3, #3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	69b9      	ldr	r1, [r7, #24]
 80014a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0203 	and.w	r2, r3, #3
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80be 	beq.w	8001666 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	4b66      	ldr	r3, [pc, #408]	@ (8001684 <HAL_GPIO_Init+0x324>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	4a65      	ldr	r2, [pc, #404]	@ (8001684 <HAL_GPIO_Init+0x324>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f6:	4b63      	ldr	r3, [pc, #396]	@ (8001684 <HAL_GPIO_Init+0x324>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001502:	4a61      	ldr	r2, [pc, #388]	@ (8001688 <HAL_GPIO_Init+0x328>)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3302      	adds	r3, #2
 800150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	220f      	movs	r2, #15
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a58      	ldr	r2, [pc, #352]	@ (800168c <HAL_GPIO_Init+0x32c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d037      	beq.n	800159e <HAL_GPIO_Init+0x23e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a57      	ldr	r2, [pc, #348]	@ (8001690 <HAL_GPIO_Init+0x330>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d031      	beq.n	800159a <HAL_GPIO_Init+0x23a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a56      	ldr	r2, [pc, #344]	@ (8001694 <HAL_GPIO_Init+0x334>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d02b      	beq.n	8001596 <HAL_GPIO_Init+0x236>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a55      	ldr	r2, [pc, #340]	@ (8001698 <HAL_GPIO_Init+0x338>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d025      	beq.n	8001592 <HAL_GPIO_Init+0x232>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a54      	ldr	r2, [pc, #336]	@ (800169c <HAL_GPIO_Init+0x33c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d01f      	beq.n	800158e <HAL_GPIO_Init+0x22e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a53      	ldr	r2, [pc, #332]	@ (80016a0 <HAL_GPIO_Init+0x340>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d019      	beq.n	800158a <HAL_GPIO_Init+0x22a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a52      	ldr	r2, [pc, #328]	@ (80016a4 <HAL_GPIO_Init+0x344>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d013      	beq.n	8001586 <HAL_GPIO_Init+0x226>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a51      	ldr	r2, [pc, #324]	@ (80016a8 <HAL_GPIO_Init+0x348>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d00d      	beq.n	8001582 <HAL_GPIO_Init+0x222>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a50      	ldr	r2, [pc, #320]	@ (80016ac <HAL_GPIO_Init+0x34c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d007      	beq.n	800157e <HAL_GPIO_Init+0x21e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4f      	ldr	r2, [pc, #316]	@ (80016b0 <HAL_GPIO_Init+0x350>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d101      	bne.n	800157a <HAL_GPIO_Init+0x21a>
 8001576:	2309      	movs	r3, #9
 8001578:	e012      	b.n	80015a0 <HAL_GPIO_Init+0x240>
 800157a:	230a      	movs	r3, #10
 800157c:	e010      	b.n	80015a0 <HAL_GPIO_Init+0x240>
 800157e:	2308      	movs	r3, #8
 8001580:	e00e      	b.n	80015a0 <HAL_GPIO_Init+0x240>
 8001582:	2307      	movs	r3, #7
 8001584:	e00c      	b.n	80015a0 <HAL_GPIO_Init+0x240>
 8001586:	2306      	movs	r3, #6
 8001588:	e00a      	b.n	80015a0 <HAL_GPIO_Init+0x240>
 800158a:	2305      	movs	r3, #5
 800158c:	e008      	b.n	80015a0 <HAL_GPIO_Init+0x240>
 800158e:	2304      	movs	r3, #4
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x240>
 8001592:	2303      	movs	r3, #3
 8001594:	e004      	b.n	80015a0 <HAL_GPIO_Init+0x240>
 8001596:	2302      	movs	r3, #2
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_Init+0x240>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_GPIO_Init+0x240>
 800159e:	2300      	movs	r3, #0
 80015a0:	69fa      	ldr	r2, [r7, #28]
 80015a2:	f002 0203 	and.w	r2, r2, #3
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	4093      	lsls	r3, r2
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015b0:	4935      	ldr	r1, [pc, #212]	@ (8001688 <HAL_GPIO_Init+0x328>)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3302      	adds	r3, #2
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015be:	4b3d      	ldr	r3, [pc, #244]	@ (80016b4 <HAL_GPIO_Init+0x354>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015e2:	4a34      	ldr	r2, [pc, #208]	@ (80016b4 <HAL_GPIO_Init+0x354>)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e8:	4b32      	ldr	r3, [pc, #200]	@ (80016b4 <HAL_GPIO_Init+0x354>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800160c:	4a29      	ldr	r2, [pc, #164]	@ (80016b4 <HAL_GPIO_Init+0x354>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001612:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <HAL_GPIO_Init+0x354>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001636:	4a1f      	ldr	r2, [pc, #124]	@ (80016b4 <HAL_GPIO_Init+0x354>)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <HAL_GPIO_Init+0x354>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001660:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <HAL_GPIO_Init+0x354>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3301      	adds	r3, #1
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2b0f      	cmp	r3, #15
 8001670:	f67f ae86 	bls.w	8001380 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3724      	adds	r7, #36	@ 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40013800 	.word	0x40013800
 800168c:	40020000 	.word	0x40020000
 8001690:	40020400 	.word	0x40020400
 8001694:	40020800 	.word	0x40020800
 8001698:	40020c00 	.word	0x40020c00
 800169c:	40021000 	.word	0x40021000
 80016a0:	40021400 	.word	0x40021400
 80016a4:	40021800 	.word	0x40021800
 80016a8:	40021c00 	.word	0x40021c00
 80016ac:	40022000 	.word	0x40022000
 80016b0:	40022400 	.word	0x40022400
 80016b4:	40013c00 	.word	0x40013c00

080016b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <HAL_PWREx_EnableOverDrive+0x98>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	4a22      	ldr	r2, [pc, #136]	@ (8001750 <HAL_PWREx_EnableOverDrive+0x98>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ce:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <HAL_PWREx_EnableOverDrive+0x98>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80016da:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1d      	ldr	r2, [pc, #116]	@ (8001754 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e6:	f7ff fc13 	bl	8000f10 <HAL_GetTick>
 80016ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016ec:	e009      	b.n	8001702 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016ee:	f7ff fc0f 	bl	8000f10 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016fc:	d901      	bls.n	8001702 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e022      	b.n	8001748 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001702:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800170a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800170e:	d1ee      	bne.n	80016ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001710:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0f      	ldr	r2, [pc, #60]	@ (8001754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800171c:	f7ff fbf8 	bl	8000f10 <HAL_GetTick>
 8001720:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001722:	e009      	b.n	8001738 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001724:	f7ff fbf4 	bl	8000f10 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001732:	d901      	bls.n	8001738 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e007      	b.n	8001748 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_PWREx_EnableOverDrive+0x9c>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001740:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001744:	d1ee      	bne.n	8001724 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	40007000 	.word	0x40007000

08001758 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e29b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 8087 	beq.w	800188a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800177c:	4b96      	ldr	r3, [pc, #600]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b04      	cmp	r3, #4
 8001786:	d00c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001788:	4b93      	ldr	r3, [pc, #588]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b08      	cmp	r3, #8
 8001792:	d112      	bne.n	80017ba <HAL_RCC_OscConfig+0x62>
 8001794:	4b90      	ldr	r3, [pc, #576]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800179c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017a0:	d10b      	bne.n	80017ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a2:	4b8d      	ldr	r3, [pc, #564]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d06c      	beq.n	8001888 <HAL_RCC_OscConfig+0x130>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d168      	bne.n	8001888 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e275      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c2:	d106      	bne.n	80017d2 <HAL_RCC_OscConfig+0x7a>
 80017c4:	4b84      	ldr	r3, [pc, #528]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a83      	ldr	r2, [pc, #524]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80017ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	e02e      	b.n	8001830 <HAL_RCC_OscConfig+0xd8>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x9c>
 80017da:	4b7f      	ldr	r3, [pc, #508]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a7e      	ldr	r2, [pc, #504]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80017e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b7c      	ldr	r3, [pc, #496]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a7b      	ldr	r2, [pc, #492]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80017ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e01d      	b.n	8001830 <HAL_RCC_OscConfig+0xd8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0xc0>
 80017fe:	4b76      	ldr	r3, [pc, #472]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a75      	ldr	r2, [pc, #468]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b73      	ldr	r3, [pc, #460]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a72      	ldr	r2, [pc, #456]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e00b      	b.n	8001830 <HAL_RCC_OscConfig+0xd8>
 8001818:	4b6f      	ldr	r3, [pc, #444]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a6e      	ldr	r2, [pc, #440]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 800181e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b6c      	ldr	r3, [pc, #432]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a6b      	ldr	r2, [pc, #428]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 800182a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800182e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fb6a 	bl	8000f10 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff fb66 	bl	8000f10 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	@ 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e229      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b61      	ldr	r3, [pc, #388]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0xe8>
 800185e:	e014      	b.n	800188a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fb56 	bl	8000f10 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fb52 	bl	8000f10 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	@ 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e215      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187a:	4b57      	ldr	r3, [pc, #348]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x110>
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d069      	beq.n	800196a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001896:	4b50      	ldr	r3, [pc, #320]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00b      	beq.n	80018ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a2:	4b4d      	ldr	r3, [pc, #308]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d11c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x190>
 80018ae:	4b4a      	ldr	r3, [pc, #296]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d116      	bne.n	80018e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ba:	4b47      	ldr	r3, [pc, #284]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d005      	beq.n	80018d2 <HAL_RCC_OscConfig+0x17a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e1e9      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d2:	4b41      	ldr	r3, [pc, #260]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	493d      	ldr	r1, [pc, #244]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	e040      	b.n	800196a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d023      	beq.n	8001938 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f0:	4b39      	ldr	r3, [pc, #228]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a38      	ldr	r2, [pc, #224]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fb08 	bl	8000f10 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff fb04 	bl	8000f10 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1c7      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b30      	ldr	r3, [pc, #192]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001922:	4b2d      	ldr	r3, [pc, #180]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4929      	ldr	r1, [pc, #164]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
 8001936:	e018      	b.n	800196a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001938:	4b27      	ldr	r3, [pc, #156]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a26      	ldr	r2, [pc, #152]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fae4 	bl	8000f10 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff fae0 	bl	8000f10 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1a3      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	4b1e      	ldr	r3, [pc, #120]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d038      	beq.n	80019e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d019      	beq.n	80019b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197e:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001982:	4a15      	ldr	r2, [pc, #84]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198a:	f7ff fac1 	bl	8000f10 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001992:	f7ff fabd 	bl	8000f10 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e180      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80019a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x23a>
 80019b0:	e01a      	b.n	80019e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80019b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019b6:	4a08      	ldr	r2, [pc, #32]	@ (80019d8 <HAL_RCC_OscConfig+0x280>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff faa7 	bl	8000f10 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c6:	f7ff faa3 	bl	8000f10 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d903      	bls.n	80019dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e166      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
 80019d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019dc:	4b92      	ldr	r3, [pc, #584]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 80019de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1ee      	bne.n	80019c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80a4 	beq.w	8001b3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f6:	4b8c      	ldr	r3, [pc, #560]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10d      	bne.n	8001a1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	4b89      	ldr	r3, [pc, #548]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	4a88      	ldr	r2, [pc, #544]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0e:	4b86      	ldr	r3, [pc, #536]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1e:	4b83      	ldr	r3, [pc, #524]	@ (8001c2c <HAL_RCC_OscConfig+0x4d4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a2a:	4b80      	ldr	r3, [pc, #512]	@ (8001c2c <HAL_RCC_OscConfig+0x4d4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a7f      	ldr	r2, [pc, #508]	@ (8001c2c <HAL_RCC_OscConfig+0x4d4>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fa6b 	bl	8000f10 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7ff fa67 	bl	8000f10 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b64      	cmp	r3, #100	@ 0x64
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e12a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a50:	4b76      	ldr	r3, [pc, #472]	@ (8001c2c <HAL_RCC_OscConfig+0x4d4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x31a>
 8001a64:	4b70      	ldr	r3, [pc, #448]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a68:	4a6f      	ldr	r2, [pc, #444]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a70:	e02d      	b.n	8001ace <HAL_RCC_OscConfig+0x376>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x33c>
 8001a7a:	4b6b      	ldr	r3, [pc, #428]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7e:	4a6a      	ldr	r2, [pc, #424]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a86:	4b68      	ldr	r3, [pc, #416]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8a:	4a67      	ldr	r2, [pc, #412]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001a8c:	f023 0304 	bic.w	r3, r3, #4
 8001a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a92:	e01c      	b.n	8001ace <HAL_RCC_OscConfig+0x376>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d10c      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x35e>
 8001a9c:	4b62      	ldr	r3, [pc, #392]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa0:	4a61      	ldr	r2, [pc, #388]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aa8:	4b5f      	ldr	r3, [pc, #380]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aac:	4a5e      	ldr	r2, [pc, #376]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab4:	e00b      	b.n	8001ace <HAL_RCC_OscConfig+0x376>
 8001ab6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aba:	4a5b      	ldr	r2, [pc, #364]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac2:	4b59      	ldr	r3, [pc, #356]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac6:	4a58      	ldr	r2, [pc, #352]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001ac8:	f023 0304 	bic.w	r3, r3, #4
 8001acc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d015      	beq.n	8001b02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fa1b 	bl	8000f10 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7ff fa17 	bl	8000f10 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e0d8      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af4:	4b4c      	ldr	r3, [pc, #304]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ee      	beq.n	8001ade <HAL_RCC_OscConfig+0x386>
 8001b00:	e014      	b.n	8001b2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff fa05 	bl	8000f10 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff fa01 	bl	8000f10 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0c2      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b20:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1ee      	bne.n	8001b0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d105      	bne.n	8001b3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b32:	4b3d      	ldr	r3, [pc, #244]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	4a3c      	ldr	r2, [pc, #240]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001b38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80ae 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b48:	4b37      	ldr	r3, [pc, #220]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d06d      	beq.n	8001c30 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d14b      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5c:	4b32      	ldr	r3, [pc, #200]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a31      	ldr	r2, [pc, #196]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001b62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f9d2 	bl	8000f10 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f9ce 	bl	8000f10 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e091      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	4b29      	ldr	r3, [pc, #164]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	019b      	lsls	r3, r3, #6
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb0:	061b      	lsls	r3, r3, #24
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	071b      	lsls	r3, r3, #28
 8001bba:	491b      	ldr	r1, [pc, #108]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a18      	ldr	r2, [pc, #96]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001bc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f9a0 	bl	8000f10 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7ff f99c 	bl	8000f10 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e05f      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be6:	4b10      	ldr	r3, [pc, #64]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x47c>
 8001bf2:	e057      	b.n	8001ca4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001bfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff f986 	bl	8000f10 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff f982 	bl	8000f10 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e045      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1a:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <HAL_RCC_OscConfig+0x4d0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x4b0>
 8001c26:	e03d      	b.n	8001ca4 <HAL_RCC_OscConfig+0x54c>
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c30:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb0 <HAL_RCC_OscConfig+0x558>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d030      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d129      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d122      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c60:	4013      	ands	r3, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d119      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c76:	085b      	lsrs	r3, r3, #1
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10f      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0d0      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d910      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b67      	ldr	r3, [pc, #412]	@ (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 020f 	bic.w	r2, r3, #15
 8001ce2:	4965      	ldr	r1, [pc, #404]	@ (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b63      	ldr	r3, [pc, #396]	@ (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0b8      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d14:	4b59      	ldr	r3, [pc, #356]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4a58      	ldr	r2, [pc, #352]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d2c:	4b53      	ldr	r3, [pc, #332]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4a52      	ldr	r2, [pc, #328]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d38:	4b50      	ldr	r3, [pc, #320]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	494d      	ldr	r1, [pc, #308]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d040      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	4b47      	ldr	r3, [pc, #284]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d115      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e07f      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d76:	4b41      	ldr	r3, [pc, #260]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e073      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d86:	4b3d      	ldr	r3, [pc, #244]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e06b      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	4b39      	ldr	r3, [pc, #228]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 0203 	bic.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4936      	ldr	r1, [pc, #216]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da8:	f7ff f8b2 	bl	8000f10 <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7ff f8ae 	bl	8000f10 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e053      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 020c 	and.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1eb      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b27      	ldr	r3, [pc, #156]	@ (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d210      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b24      	ldr	r3, [pc, #144]	@ (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 020f 	bic.w	r2, r3, #15
 8001dee:	4922      	ldr	r1, [pc, #136]	@ (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b20      	ldr	r3, [pc, #128]	@ (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e032      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e14:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4916      	ldr	r1, [pc, #88]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e32:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	490e      	ldr	r1, [pc, #56]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e46:	f000 f821 	bl	8001e8c <HAL_RCC_GetSysClockFreq>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	490a      	ldr	r1, [pc, #40]	@ (8001e80 <HAL_RCC_ClockConfig+0x1cc>)
 8001e58:	5ccb      	ldrb	r3, [r1, r3]
 8001e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5e:	4a09      	ldr	r2, [pc, #36]	@ (8001e84 <HAL_RCC_ClockConfig+0x1d0>)
 8001e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e62:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <HAL_RCC_ClockConfig+0x1d4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f80e 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023c00 	.word	0x40023c00
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	08004018 	.word	0x08004018
 8001e84:	20000054 	.word	0x20000054
 8001e88:	20000058 	.word	0x20000058

08001e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e90:	b090      	sub	sp, #64	@ 0x40
 8001e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ea4:	4b59      	ldr	r3, [pc, #356]	@ (800200c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d00d      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x40>
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	f200 80a1 	bhi.w	8001ff8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d003      	beq.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ebe:	e09b      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ec0:	4b53      	ldr	r3, [pc, #332]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ec4:	e09b      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ec6:	4b53      	ldr	r3, [pc, #332]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001eca:	e098      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ecc:	4b4f      	ldr	r3, [pc, #316]	@ (800200c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ed4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ed6:	4b4d      	ldr	r3, [pc, #308]	@ (800200c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d028      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800200c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	099b      	lsrs	r3, r3, #6
 8001ee8:	2200      	movs	r2, #0
 8001eea:	623b      	str	r3, [r7, #32]
 8001eec:	627a      	str	r2, [r7, #36]	@ 0x24
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4b47      	ldr	r3, [pc, #284]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ef8:	fb03 f201 	mul.w	r2, r3, r1
 8001efc:	2300      	movs	r3, #0
 8001efe:	fb00 f303 	mul.w	r3, r0, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	4a43      	ldr	r2, [pc, #268]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f06:	fba0 1202 	umull	r1, r2, r0, r2
 8001f0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f0c:	460a      	mov	r2, r1
 8001f0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f12:	4413      	add	r3, r2
 8001f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f18:	2200      	movs	r2, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	61fa      	str	r2, [r7, #28]
 8001f1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f26:	f7fe f999 	bl	800025c <__aeabi_uldivmod>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4613      	mov	r3, r2
 8001f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f32:	e053      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f34:	4b35      	ldr	r3, [pc, #212]	@ (800200c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	099b      	lsrs	r3, r3, #6
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	617a      	str	r2, [r7, #20]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f46:	f04f 0b00 	mov.w	fp, #0
 8001f4a:	4652      	mov	r2, sl
 8001f4c:	465b      	mov	r3, fp
 8001f4e:	f04f 0000 	mov.w	r0, #0
 8001f52:	f04f 0100 	mov.w	r1, #0
 8001f56:	0159      	lsls	r1, r3, #5
 8001f58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f5c:	0150      	lsls	r0, r2, #5
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	ebb2 080a 	subs.w	r8, r2, sl
 8001f66:	eb63 090b 	sbc.w	r9, r3, fp
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f7e:	ebb2 0408 	subs.w	r4, r2, r8
 8001f82:	eb63 0509 	sbc.w	r5, r3, r9
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	00eb      	lsls	r3, r5, #3
 8001f90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f94:	00e2      	lsls	r2, r4, #3
 8001f96:	4614      	mov	r4, r2
 8001f98:	461d      	mov	r5, r3
 8001f9a:	eb14 030a 	adds.w	r3, r4, sl
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	eb45 030b 	adc.w	r3, r5, fp
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	028b      	lsls	r3, r1, #10
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	028a      	lsls	r2, r1, #10
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	60fa      	str	r2, [r7, #12]
 8001fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd0:	f7fe f944 	bl	800025c <__aeabi_uldivmod>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4613      	mov	r3, r2
 8001fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	0c1b      	lsrs	r3, r3, #16
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001fec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ff6:	e002      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002000:	4618      	mov	r0, r3
 8002002:	3740      	adds	r7, #64	@ 0x40
 8002004:	46bd      	mov	sp, r7
 8002006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	00f42400 	.word	0x00f42400
 8002014:	017d7840 	.word	0x017d7840

08002018 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800201c:	4b03      	ldr	r3, [pc, #12]	@ (800202c <HAL_RCC_GetHCLKFreq+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000054 	.word	0x20000054

08002030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002034:	f7ff fff0 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 8002038:	4602      	mov	r2, r0
 800203a:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	0a9b      	lsrs	r3, r3, #10
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4903      	ldr	r1, [pc, #12]	@ (8002054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40023800 	.word	0x40023800
 8002054:	08004028 	.word	0x08004028

08002058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800205c:	f7ff ffdc 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	0b5b      	lsrs	r3, r3, #13
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	4903      	ldr	r1, [pc, #12]	@ (800207c <HAL_RCC_GetPCLK2Freq+0x24>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40023800 	.word	0x40023800
 800207c:	08004028 	.word	0x08004028

08002080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d012      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020a8:	4b69      	ldr	r3, [pc, #420]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4a68      	ldr	r2, [pc, #416]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80020b2:	6093      	str	r3, [r2, #8]
 80020b4:	4b66      	ldr	r3, [pc, #408]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020bc:	4964      	ldr	r1, [pc, #400]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80020ca:	2301      	movs	r3, #1
 80020cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d017      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020da:	4b5d      	ldr	r3, [pc, #372]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e8:	4959      	ldr	r1, [pc, #356]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020f8:	d101      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002106:	2301      	movs	r3, #1
 8002108:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d017      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002116:	4b4e      	ldr	r3, [pc, #312]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002118:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800211c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	494a      	ldr	r1, [pc, #296]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002134:	d101      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002136:	2301      	movs	r3, #1
 8002138:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002142:	2301      	movs	r3, #1
 8002144:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002152:	2301      	movs	r3, #1
 8002154:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 808b 	beq.w	800227a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002164:	4b3a      	ldr	r3, [pc, #232]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	4a39      	ldr	r2, [pc, #228]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800216e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002170:	4b37      	ldr	r3, [pc, #220]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800217c:	4b35      	ldr	r3, [pc, #212]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a34      	ldr	r2, [pc, #208]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002188:	f7fe fec2 	bl	8000f10 <HAL_GetTick>
 800218c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002190:	f7fe febe 	bl	8000f10 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	@ 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e38f      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021ae:	4b28      	ldr	r3, [pc, #160]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d035      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d02e      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021cc:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021da:	4a1d      	ldr	r2, [pc, #116]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021ee:	4a18      	ldr	r2, [pc, #96]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021f4:	4b16      	ldr	r3, [pc, #88]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d114      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7fe fe86 	bl	8000f10 <HAL_GetTick>
 8002204:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002206:	e00a      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7fe fe82 	bl	8000f10 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e351      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221e:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0ee      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002232:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002236:	d111      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002238:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002246:	400b      	ands	r3, r1
 8002248:	4901      	ldr	r1, [pc, #4]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
 800224e:	e00b      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002250:	40023800 	.word	0x40023800
 8002254:	40007000 	.word	0x40007000
 8002258:	0ffffcff 	.word	0x0ffffcff
 800225c:	4bac      	ldr	r3, [pc, #688]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4aab      	ldr	r2, [pc, #684]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002262:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002266:	6093      	str	r3, [r2, #8]
 8002268:	4ba9      	ldr	r3, [pc, #676]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800226a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002274:	49a6      	ldr	r1, [pc, #664]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002276:	4313      	orrs	r3, r2
 8002278:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	d010      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002286:	4ba2      	ldr	r3, [pc, #648]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800228c:	4aa0      	ldr	r2, [pc, #640]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800228e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002292:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002296:	4b9e      	ldr	r3, [pc, #632]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002298:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a0:	499b      	ldr	r1, [pc, #620]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022b4:	4b96      	ldr	r3, [pc, #600]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022c2:	4993      	ldr	r1, [pc, #588]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022d6:	4b8e      	ldr	r3, [pc, #568]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022e4:	498a      	ldr	r1, [pc, #552]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022f8:	4b85      	ldr	r3, [pc, #532]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002306:	4982      	ldr	r1, [pc, #520]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800231a:	4b7d      	ldr	r3, [pc, #500]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002320:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002328:	4979      	ldr	r1, [pc, #484]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800233c:	4b74      	ldr	r3, [pc, #464]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002342:	f023 0203 	bic.w	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	4971      	ldr	r1, [pc, #452]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800235e:	4b6c      	ldr	r3, [pc, #432]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002364:	f023 020c 	bic.w	r2, r3, #12
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800236c:	4968      	ldr	r1, [pc, #416]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002380:	4b63      	ldr	r3, [pc, #396]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002386:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238e:	4960      	ldr	r1, [pc, #384]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b0:	4957      	ldr	r1, [pc, #348]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023c4:	4b52      	ldr	r3, [pc, #328]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d2:	494f      	ldr	r1, [pc, #316]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80023e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f4:	4946      	ldr	r1, [pc, #280]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002408:	4b41      	ldr	r3, [pc, #260]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002416:	493e      	ldr	r1, [pc, #248]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800242a:	4b39      	ldr	r3, [pc, #228]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002430:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002438:	4935      	ldr	r1, [pc, #212]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800244c:	4b30      	ldr	r3, [pc, #192]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002452:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800245a:	492d      	ldr	r1, [pc, #180]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d011      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800246e:	4b28      	ldr	r3, [pc, #160]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002474:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800247c:	4924      	ldr	r1, [pc, #144]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002488:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800248c:	d101      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800248e:	2301      	movs	r3, #1
 8002490:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ae:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024bc:	4914      	ldr	r1, [pc, #80]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00b      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024e0:	490b      	ldr	r1, [pc, #44]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00f      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002504:	4902      	ldr	r1, [pc, #8]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800250c:	e002      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00b      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002520:	4b8a      	ldr	r3, [pc, #552]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002522:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002526:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002530:	4986      	ldr	r1, [pc, #536]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00b      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002544:	4b81      	ldr	r3, [pc, #516]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800254a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002554:	497d      	ldr	r1, [pc, #500]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d006      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80d6 	beq.w	800271c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002570:	4b76      	ldr	r3, [pc, #472]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a75      	ldr	r2, [pc, #468]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002576:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800257a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800257c:	f7fe fcc8 	bl	8000f10 <HAL_GetTick>
 8002580:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002584:	f7fe fcc4 	bl	8000f10 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	@ 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e195      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002596:	4b6d      	ldr	r3, [pc, #436]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d021      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d11d      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025b6:	4b65      	ldr	r3, [pc, #404]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025bc:	0c1b      	lsrs	r3, r3, #16
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025c4:	4b61      	ldr	r3, [pc, #388]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025ca:	0e1b      	lsrs	r3, r3, #24
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	019a      	lsls	r2, r3, #6
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	431a      	orrs	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	071b      	lsls	r3, r3, #28
 80025ea:	4958      	ldr	r1, [pc, #352]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d004      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002610:	2b00      	cmp	r3, #0
 8002612:	d02e      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800261c:	d129      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800261e:	4b4b      	ldr	r3, [pc, #300]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800262c:	4b47      	ldr	r3, [pc, #284]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002632:	0f1b      	lsrs	r3, r3, #28
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	019a      	lsls	r2, r3, #6
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	041b      	lsls	r3, r3, #16
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	061b      	lsls	r3, r3, #24
 800264c:	431a      	orrs	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	071b      	lsls	r3, r3, #28
 8002652:	493e      	ldr	r1, [pc, #248]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800265a:	4b3c      	ldr	r3, [pc, #240]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800265c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002660:	f023 021f 	bic.w	r2, r3, #31
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	3b01      	subs	r3, #1
 800266a:	4938      	ldr	r1, [pc, #224]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01d      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800267e:	4b33      	ldr	r3, [pc, #204]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002684:	0e1b      	lsrs	r3, r3, #24
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800268c:	4b2f      	ldr	r3, [pc, #188]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800268e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002692:	0f1b      	lsrs	r3, r3, #28
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	019a      	lsls	r2, r3, #6
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	431a      	orrs	r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	061b      	lsls	r3, r3, #24
 80026ac:	431a      	orrs	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	071b      	lsls	r3, r3, #28
 80026b2:	4926      	ldr	r1, [pc, #152]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d011      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	019a      	lsls	r2, r3, #6
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	061b      	lsls	r3, r3, #24
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	071b      	lsls	r3, r3, #28
 80026e2:	491a      	ldr	r1, [pc, #104]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026ea:	4b18      	ldr	r3, [pc, #96]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a17      	ldr	r2, [pc, #92]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f6:	f7fe fc0b 	bl	8000f10 <HAL_GetTick>
 80026fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026fe:	f7fe fc07 	bl	8000f10 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b64      	cmp	r3, #100	@ 0x64
 800270a:	d901      	bls.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e0d8      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002710:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b01      	cmp	r3, #1
 8002720:	f040 80ce 	bne.w	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002724:	4b09      	ldr	r3, [pc, #36]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a08      	ldr	r2, [pc, #32]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800272a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800272e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002730:	f7fe fbee 	bl	8000f10 <HAL_GetTick>
 8002734:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002736:	e00b      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002738:	f7fe fbea 	bl	8000f10 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	@ 0x64
 8002744:	d904      	bls.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0bb      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002750:	4b5e      	ldr	r3, [pc, #376]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800275c:	d0ec      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800277a:	2b00      	cmp	r3, #0
 800277c:	d02e      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d12a      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002786:	4b51      	ldr	r3, [pc, #324]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278c:	0c1b      	lsrs	r3, r3, #16
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002794:	4b4d      	ldr	r3, [pc, #308]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	0f1b      	lsrs	r3, r3, #28
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	019a      	lsls	r2, r3, #6
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	041b      	lsls	r3, r3, #16
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	061b      	lsls	r3, r3, #24
 80027b4:	431a      	orrs	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	071b      	lsls	r3, r3, #28
 80027ba:	4944      	ldr	r1, [pc, #272]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027c2:	4b42      	ldr	r3, [pc, #264]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027c8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d0:	3b01      	subs	r3, #1
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	493d      	ldr	r1, [pc, #244]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d022      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027f0:	d11d      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027f2:	4b36      	ldr	r3, [pc, #216]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f8:	0e1b      	lsrs	r3, r3, #24
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002800:	4b32      	ldr	r3, [pc, #200]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002806:	0f1b      	lsrs	r3, r3, #28
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	019a      	lsls	r2, r3, #6
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	061b      	lsls	r3, r3, #24
 8002820:	431a      	orrs	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	071b      	lsls	r3, r3, #28
 8002826:	4929      	ldr	r1, [pc, #164]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d028      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800283a:	4b24      	ldr	r3, [pc, #144]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002840:	0e1b      	lsrs	r3, r3, #24
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002848:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284e:	0c1b      	lsrs	r3, r3, #16
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	019a      	lsls	r2, r3, #6
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	041b      	lsls	r3, r3, #16
 8002860:	431a      	orrs	r2, r3
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	071b      	lsls	r3, r3, #28
 800286e:	4917      	ldr	r1, [pc, #92]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002876:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800287c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002884:	4911      	ldr	r1, [pc, #68]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800288c:	4b0f      	ldr	r3, [pc, #60]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0e      	ldr	r2, [pc, #56]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002898:	f7fe fb3a 	bl	8000f10 <HAL_GetTick>
 800289c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028a0:	f7fe fb36 	bl	8000f10 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	@ 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e007      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028be:	d1ef      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e040      	b.n	8002964 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fe f9e0 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2224      	movs	r2, #36	@ 0x24
 80028fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fe6c 	bl	80035f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fc05 	bl	800312c <UART_SetConfig>
 8002922:	4603      	mov	r3, r0
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e01b      	b.n	8002964 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800293a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800294a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 feeb 	bl	8003738 <UART_CheckIdleState>
 8002962:	4603      	mov	r3, r0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	@ 0x28
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002980:	2b20      	cmp	r3, #32
 8002982:	d177      	bne.n	8002a74 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_UART_Transmit+0x24>
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e070      	b.n	8002a76 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2221      	movs	r2, #33	@ 0x21
 80029a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029a2:	f7fe fab5 	bl	8000f10 <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	88fa      	ldrh	r2, [r7, #6]
 80029ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	88fa      	ldrh	r2, [r7, #6]
 80029b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029c0:	d108      	bne.n	80029d4 <HAL_UART_Transmit+0x68>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d104      	bne.n	80029d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	e003      	b.n	80029dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029dc:	e02f      	b.n	8002a3e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	2180      	movs	r1, #128	@ 0x80
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 ff4d 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e03b      	b.n	8002a76 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a12:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	3302      	adds	r3, #2
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e007      	b.n	8002a2c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	781a      	ldrb	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1c9      	bne.n	80029de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2200      	movs	r2, #0
 8002a52:	2140      	movs	r1, #64	@ 0x40
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 ff17 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e005      	b.n	8002a76 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	e000      	b.n	8002a76 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002a74:	2302      	movs	r3, #2
  }
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b08a      	sub	sp, #40	@ 0x28
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d132      	bne.n	8002afc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_UART_Receive_IT+0x24>
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e02b      	b.n	8002afe <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d018      	beq.n	8002aec <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	e853 3f00 	ldrex	r3, [r3]
 8002ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	623b      	str	r3, [r7, #32]
 8002ada:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002adc:	69f9      	ldr	r1, [r7, #28]
 8002ade:	6a3a      	ldr	r2, [r7, #32]
 8002ae0:	e841 2300 	strex	r3, r2, [r1]
 8002ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e6      	bne.n	8002aba <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 ff36 	bl	8003964 <UART_Start_Receive_IT>
 8002af8:	4603      	mov	r3, r0
 8002afa:	e000      	b.n	8002afe <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3728      	adds	r7, #40	@ 0x28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b0ba      	sub	sp, #232	@ 0xe8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002b32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002b36:	4013      	ands	r3, r2
 8002b38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002b3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d115      	bne.n	8002b70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00f      	beq.n	8002b70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 82ac 	beq.w	80030be <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
      }
      return;
 8002b6e:	e2a6      	b.n	80030be <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8117 	beq.w	8002da8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002b8a:	4b85      	ldr	r3, [pc, #532]	@ (8002da0 <HAL_UART_IRQHandler+0x298>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 810a 	beq.w	8002da8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d011      	beq.n	8002bc4 <HAL_UART_IRQHandler+0xbc>
 8002ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00b      	beq.n	8002bc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d011      	beq.n	8002bf4 <HAL_UART_IRQHandler+0xec>
 8002bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00b      	beq.n	8002bf4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2202      	movs	r2, #2
 8002be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bea:	f043 0204 	orr.w	r2, r3, #4
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d011      	beq.n	8002c24 <HAL_UART_IRQHandler+0x11c>
 8002c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2204      	movs	r2, #4
 8002c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c1a:	f043 0202 	orr.w	r2, r3, #2
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d017      	beq.n	8002c60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c56:	f043 0208 	orr.w	r2, r3, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d012      	beq.n	8002c92 <HAL_UART_IRQHandler+0x18a>
 8002c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00c      	beq.n	8002c92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8212 	beq.w	80030c2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00d      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ccc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cda:	2b40      	cmp	r3, #64	@ 0x40
 8002cdc:	d005      	beq.n	8002cea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ce2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d04f      	beq.n	8002d8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 ff00 	bl	8003af0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfa:	2b40      	cmp	r3, #64	@ 0x40
 8002cfc:	d141      	bne.n	8002d82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3308      	adds	r3, #8
 8002d04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3308      	adds	r3, #8
 8002d26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002d36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002d3a:	e841 2300 	strex	r3, r2, [r1]
 8002d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1d9      	bne.n	8002cfe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d013      	beq.n	8002d7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d56:	4a13      	ldr	r2, [pc, #76]	@ (8002da4 <HAL_UART_IRQHandler+0x29c>)
 8002d58:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fadc 	bl	800131c <HAL_DMA_Abort_IT>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d017      	beq.n	8002d9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d74:	4610      	mov	r0, r2
 8002d76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d78:	e00f      	b.n	8002d9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f9b6 	bl	80030ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d80:	e00b      	b.n	8002d9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f9b2 	bl	80030ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d88:	e007      	b.n	8002d9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f9ae 	bl	80030ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002d98:	e193      	b.n	80030c2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d9a:	bf00      	nop
    return;
 8002d9c:	e191      	b.n	80030c2 <HAL_UART_IRQHandler+0x5ba>
 8002d9e:	bf00      	nop
 8002da0:	04000120 	.word	0x04000120
 8002da4:	08003bb9 	.word	0x08003bb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	f040 814c 	bne.w	800304a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8145 	beq.w	800304a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 813e 	beq.w	800304a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2210      	movs	r2, #16
 8002dd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de0:	2b40      	cmp	r3, #64	@ 0x40
 8002de2:	f040 80b6 	bne.w	8002f52 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002df2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8165 	beq.w	80030c6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e06:	429a      	cmp	r2, r3
 8002e08:	f080 815d 	bcs.w	80030c6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e20:	f000 8086 	beq.w	8002f30 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e30:	e853 3f00 	ldrex	r3, [r3]
 8002e34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002e38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e5e:	e841 2300 	strex	r3, r2, [r1]
 8002e62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1da      	bne.n	8002e24 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3308      	adds	r3, #8
 8002e74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e78:	e853 3f00 	ldrex	r3, [r3]
 8002e7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002e7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3308      	adds	r3, #8
 8002e8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e9e:	e841 2300 	strex	r3, r2, [r1]
 8002ea2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ea4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1e1      	bne.n	8002e6e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3308      	adds	r3, #8
 8002eb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002eba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ebc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3308      	adds	r3, #8
 8002eca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002ece:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ed4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002edc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e3      	bne.n	8002eaa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f00:	f023 0310 	bic.w	r3, r3, #16
 8002f04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f1a:	e841 2300 	strex	r3, r2, [r1]
 8002f1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1e4      	bne.n	8002ef0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe f986 	bl	800123c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	4619      	mov	r1, r3
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8d8 	bl	8003100 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f50:	e0b9      	b.n	80030c6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80ab 	beq.w	80030ca <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a6 	beq.w	80030ca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f86:	e853 3f00 	ldrex	r3, [r3]
 8002f8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fa2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fa8:	e841 2300 	strex	r3, r2, [r1]
 8002fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e4      	bne.n	8002f7e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3308      	adds	r3, #8
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	623b      	str	r3, [r7, #32]
   return(result);
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3308      	adds	r3, #8
 8002fd4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002fd8:	633a      	str	r2, [r7, #48]	@ 0x30
 8002fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e3      	bne.n	8002fb4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	60fb      	str	r3, [r7, #12]
   return(result);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f023 0310 	bic.w	r3, r3, #16
 8003014:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003022:	61fb      	str	r3, [r7, #28]
 8003024:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	e841 2300 	strex	r3, r2, [r1]
 800302e:	617b      	str	r3, [r7, #20]
   return(result);
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1e4      	bne.n	8003000 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800303c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003040:	4619      	mov	r1, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f85c 	bl	8003100 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003048:	e03f      	b.n	80030ca <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800304a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800304e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00e      	beq.n	8003074 <HAL_UART_IRQHandler+0x56c>
 8003056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800305a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800306a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f853 	bl	8003118 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003072:	e02d      	b.n	80030d0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00e      	beq.n	800309e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01c      	beq.n	80030ce <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4798      	blx	r3
    }
    return;
 800309c:	e017      	b.n	80030ce <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800309e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d012      	beq.n	80030d0 <HAL_UART_IRQHandler+0x5c8>
 80030aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00c      	beq.n	80030d0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fd94 	bl	8003be4 <UART_EndTransmit_IT>
    return;
 80030bc:	e008      	b.n	80030d0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80030be:	bf00      	nop
 80030c0:	e006      	b.n	80030d0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80030c2:	bf00      	nop
 80030c4:	e004      	b.n	80030d0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80030c6:	bf00      	nop
 80030c8:	e002      	b.n	80030d0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80030ce:	bf00      	nop
  }

}
 80030d0:	37e8      	adds	r7, #232	@ 0xe8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop

080030d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4ba6      	ldr	r3, [pc, #664]	@ (80033f0 <UART_SetConfig+0x2c4>)
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	6979      	ldr	r1, [r7, #20]
 8003160:	430b      	orrs	r3, r1
 8003162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	430a      	orrs	r2, r1
 800319c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a94      	ldr	r2, [pc, #592]	@ (80033f4 <UART_SetConfig+0x2c8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d120      	bne.n	80031ea <UART_SetConfig+0xbe>
 80031a8:	4b93      	ldr	r3, [pc, #588]	@ (80033f8 <UART_SetConfig+0x2cc>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d816      	bhi.n	80031e4 <UART_SetConfig+0xb8>
 80031b6:	a201      	add	r2, pc, #4	@ (adr r2, 80031bc <UART_SetConfig+0x90>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	080031cd 	.word	0x080031cd
 80031c0:	080031d9 	.word	0x080031d9
 80031c4:	080031d3 	.word	0x080031d3
 80031c8:	080031df 	.word	0x080031df
 80031cc:	2301      	movs	r3, #1
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e150      	b.n	8003474 <UART_SetConfig+0x348>
 80031d2:	2302      	movs	r3, #2
 80031d4:	77fb      	strb	r3, [r7, #31]
 80031d6:	e14d      	b.n	8003474 <UART_SetConfig+0x348>
 80031d8:	2304      	movs	r3, #4
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e14a      	b.n	8003474 <UART_SetConfig+0x348>
 80031de:	2308      	movs	r3, #8
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e147      	b.n	8003474 <UART_SetConfig+0x348>
 80031e4:	2310      	movs	r3, #16
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e144      	b.n	8003474 <UART_SetConfig+0x348>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a83      	ldr	r2, [pc, #524]	@ (80033fc <UART_SetConfig+0x2d0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d132      	bne.n	800325a <UART_SetConfig+0x12e>
 80031f4:	4b80      	ldr	r3, [pc, #512]	@ (80033f8 <UART_SetConfig+0x2cc>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d828      	bhi.n	8003254 <UART_SetConfig+0x128>
 8003202:	a201      	add	r2, pc, #4	@ (adr r2, 8003208 <UART_SetConfig+0xdc>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	0800323d 	.word	0x0800323d
 800320c:	08003255 	.word	0x08003255
 8003210:	08003255 	.word	0x08003255
 8003214:	08003255 	.word	0x08003255
 8003218:	08003249 	.word	0x08003249
 800321c:	08003255 	.word	0x08003255
 8003220:	08003255 	.word	0x08003255
 8003224:	08003255 	.word	0x08003255
 8003228:	08003243 	.word	0x08003243
 800322c:	08003255 	.word	0x08003255
 8003230:	08003255 	.word	0x08003255
 8003234:	08003255 	.word	0x08003255
 8003238:	0800324f 	.word	0x0800324f
 800323c:	2300      	movs	r3, #0
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	e118      	b.n	8003474 <UART_SetConfig+0x348>
 8003242:	2302      	movs	r3, #2
 8003244:	77fb      	strb	r3, [r7, #31]
 8003246:	e115      	b.n	8003474 <UART_SetConfig+0x348>
 8003248:	2304      	movs	r3, #4
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	e112      	b.n	8003474 <UART_SetConfig+0x348>
 800324e:	2308      	movs	r3, #8
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e10f      	b.n	8003474 <UART_SetConfig+0x348>
 8003254:	2310      	movs	r3, #16
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e10c      	b.n	8003474 <UART_SetConfig+0x348>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a68      	ldr	r2, [pc, #416]	@ (8003400 <UART_SetConfig+0x2d4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d120      	bne.n	80032a6 <UART_SetConfig+0x17a>
 8003264:	4b64      	ldr	r3, [pc, #400]	@ (80033f8 <UART_SetConfig+0x2cc>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800326e:	2b30      	cmp	r3, #48	@ 0x30
 8003270:	d013      	beq.n	800329a <UART_SetConfig+0x16e>
 8003272:	2b30      	cmp	r3, #48	@ 0x30
 8003274:	d814      	bhi.n	80032a0 <UART_SetConfig+0x174>
 8003276:	2b20      	cmp	r3, #32
 8003278:	d009      	beq.n	800328e <UART_SetConfig+0x162>
 800327a:	2b20      	cmp	r3, #32
 800327c:	d810      	bhi.n	80032a0 <UART_SetConfig+0x174>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <UART_SetConfig+0x15c>
 8003282:	2b10      	cmp	r3, #16
 8003284:	d006      	beq.n	8003294 <UART_SetConfig+0x168>
 8003286:	e00b      	b.n	80032a0 <UART_SetConfig+0x174>
 8003288:	2300      	movs	r3, #0
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e0f2      	b.n	8003474 <UART_SetConfig+0x348>
 800328e:	2302      	movs	r3, #2
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e0ef      	b.n	8003474 <UART_SetConfig+0x348>
 8003294:	2304      	movs	r3, #4
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e0ec      	b.n	8003474 <UART_SetConfig+0x348>
 800329a:	2308      	movs	r3, #8
 800329c:	77fb      	strb	r3, [r7, #31]
 800329e:	e0e9      	b.n	8003474 <UART_SetConfig+0x348>
 80032a0:	2310      	movs	r3, #16
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e0e6      	b.n	8003474 <UART_SetConfig+0x348>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a56      	ldr	r2, [pc, #344]	@ (8003404 <UART_SetConfig+0x2d8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d120      	bne.n	80032f2 <UART_SetConfig+0x1c6>
 80032b0:	4b51      	ldr	r3, [pc, #324]	@ (80033f8 <UART_SetConfig+0x2cc>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80032ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80032bc:	d013      	beq.n	80032e6 <UART_SetConfig+0x1ba>
 80032be:	2bc0      	cmp	r3, #192	@ 0xc0
 80032c0:	d814      	bhi.n	80032ec <UART_SetConfig+0x1c0>
 80032c2:	2b80      	cmp	r3, #128	@ 0x80
 80032c4:	d009      	beq.n	80032da <UART_SetConfig+0x1ae>
 80032c6:	2b80      	cmp	r3, #128	@ 0x80
 80032c8:	d810      	bhi.n	80032ec <UART_SetConfig+0x1c0>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <UART_SetConfig+0x1a8>
 80032ce:	2b40      	cmp	r3, #64	@ 0x40
 80032d0:	d006      	beq.n	80032e0 <UART_SetConfig+0x1b4>
 80032d2:	e00b      	b.n	80032ec <UART_SetConfig+0x1c0>
 80032d4:	2300      	movs	r3, #0
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e0cc      	b.n	8003474 <UART_SetConfig+0x348>
 80032da:	2302      	movs	r3, #2
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	e0c9      	b.n	8003474 <UART_SetConfig+0x348>
 80032e0:	2304      	movs	r3, #4
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e0c6      	b.n	8003474 <UART_SetConfig+0x348>
 80032e6:	2308      	movs	r3, #8
 80032e8:	77fb      	strb	r3, [r7, #31]
 80032ea:	e0c3      	b.n	8003474 <UART_SetConfig+0x348>
 80032ec:	2310      	movs	r3, #16
 80032ee:	77fb      	strb	r3, [r7, #31]
 80032f0:	e0c0      	b.n	8003474 <UART_SetConfig+0x348>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a44      	ldr	r2, [pc, #272]	@ (8003408 <UART_SetConfig+0x2dc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d125      	bne.n	8003348 <UART_SetConfig+0x21c>
 80032fc:	4b3e      	ldr	r3, [pc, #248]	@ (80033f8 <UART_SetConfig+0x2cc>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003306:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800330a:	d017      	beq.n	800333c <UART_SetConfig+0x210>
 800330c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003310:	d817      	bhi.n	8003342 <UART_SetConfig+0x216>
 8003312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003316:	d00b      	beq.n	8003330 <UART_SetConfig+0x204>
 8003318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800331c:	d811      	bhi.n	8003342 <UART_SetConfig+0x216>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <UART_SetConfig+0x1fe>
 8003322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003326:	d006      	beq.n	8003336 <UART_SetConfig+0x20a>
 8003328:	e00b      	b.n	8003342 <UART_SetConfig+0x216>
 800332a:	2300      	movs	r3, #0
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e0a1      	b.n	8003474 <UART_SetConfig+0x348>
 8003330:	2302      	movs	r3, #2
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e09e      	b.n	8003474 <UART_SetConfig+0x348>
 8003336:	2304      	movs	r3, #4
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	e09b      	b.n	8003474 <UART_SetConfig+0x348>
 800333c:	2308      	movs	r3, #8
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e098      	b.n	8003474 <UART_SetConfig+0x348>
 8003342:	2310      	movs	r3, #16
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e095      	b.n	8003474 <UART_SetConfig+0x348>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2f      	ldr	r2, [pc, #188]	@ (800340c <UART_SetConfig+0x2e0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d125      	bne.n	800339e <UART_SetConfig+0x272>
 8003352:	4b29      	ldr	r3, [pc, #164]	@ (80033f8 <UART_SetConfig+0x2cc>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003358:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800335c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003360:	d017      	beq.n	8003392 <UART_SetConfig+0x266>
 8003362:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003366:	d817      	bhi.n	8003398 <UART_SetConfig+0x26c>
 8003368:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800336c:	d00b      	beq.n	8003386 <UART_SetConfig+0x25a>
 800336e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003372:	d811      	bhi.n	8003398 <UART_SetConfig+0x26c>
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <UART_SetConfig+0x254>
 8003378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337c:	d006      	beq.n	800338c <UART_SetConfig+0x260>
 800337e:	e00b      	b.n	8003398 <UART_SetConfig+0x26c>
 8003380:	2301      	movs	r3, #1
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	e076      	b.n	8003474 <UART_SetConfig+0x348>
 8003386:	2302      	movs	r3, #2
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e073      	b.n	8003474 <UART_SetConfig+0x348>
 800338c:	2304      	movs	r3, #4
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	e070      	b.n	8003474 <UART_SetConfig+0x348>
 8003392:	2308      	movs	r3, #8
 8003394:	77fb      	strb	r3, [r7, #31]
 8003396:	e06d      	b.n	8003474 <UART_SetConfig+0x348>
 8003398:	2310      	movs	r3, #16
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e06a      	b.n	8003474 <UART_SetConfig+0x348>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003410 <UART_SetConfig+0x2e4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d138      	bne.n	800341a <UART_SetConfig+0x2ee>
 80033a8:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <UART_SetConfig+0x2cc>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80033b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033b6:	d017      	beq.n	80033e8 <UART_SetConfig+0x2bc>
 80033b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033bc:	d82a      	bhi.n	8003414 <UART_SetConfig+0x2e8>
 80033be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033c2:	d00b      	beq.n	80033dc <UART_SetConfig+0x2b0>
 80033c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033c8:	d824      	bhi.n	8003414 <UART_SetConfig+0x2e8>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <UART_SetConfig+0x2aa>
 80033ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033d2:	d006      	beq.n	80033e2 <UART_SetConfig+0x2b6>
 80033d4:	e01e      	b.n	8003414 <UART_SetConfig+0x2e8>
 80033d6:	2300      	movs	r3, #0
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e04b      	b.n	8003474 <UART_SetConfig+0x348>
 80033dc:	2302      	movs	r3, #2
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e048      	b.n	8003474 <UART_SetConfig+0x348>
 80033e2:	2304      	movs	r3, #4
 80033e4:	77fb      	strb	r3, [r7, #31]
 80033e6:	e045      	b.n	8003474 <UART_SetConfig+0x348>
 80033e8:	2308      	movs	r3, #8
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e042      	b.n	8003474 <UART_SetConfig+0x348>
 80033ee:	bf00      	nop
 80033f0:	efff69f3 	.word	0xefff69f3
 80033f4:	40011000 	.word	0x40011000
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40004400 	.word	0x40004400
 8003400:	40004800 	.word	0x40004800
 8003404:	40004c00 	.word	0x40004c00
 8003408:	40005000 	.word	0x40005000
 800340c:	40011400 	.word	0x40011400
 8003410:	40007800 	.word	0x40007800
 8003414:	2310      	movs	r3, #16
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e02c      	b.n	8003474 <UART_SetConfig+0x348>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a72      	ldr	r2, [pc, #456]	@ (80035e8 <UART_SetConfig+0x4bc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d125      	bne.n	8003470 <UART_SetConfig+0x344>
 8003424:	4b71      	ldr	r3, [pc, #452]	@ (80035ec <UART_SetConfig+0x4c0>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800342e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003432:	d017      	beq.n	8003464 <UART_SetConfig+0x338>
 8003434:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003438:	d817      	bhi.n	800346a <UART_SetConfig+0x33e>
 800343a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800343e:	d00b      	beq.n	8003458 <UART_SetConfig+0x32c>
 8003440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003444:	d811      	bhi.n	800346a <UART_SetConfig+0x33e>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <UART_SetConfig+0x326>
 800344a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800344e:	d006      	beq.n	800345e <UART_SetConfig+0x332>
 8003450:	e00b      	b.n	800346a <UART_SetConfig+0x33e>
 8003452:	2300      	movs	r3, #0
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e00d      	b.n	8003474 <UART_SetConfig+0x348>
 8003458:	2302      	movs	r3, #2
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e00a      	b.n	8003474 <UART_SetConfig+0x348>
 800345e:	2304      	movs	r3, #4
 8003460:	77fb      	strb	r3, [r7, #31]
 8003462:	e007      	b.n	8003474 <UART_SetConfig+0x348>
 8003464:	2308      	movs	r3, #8
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e004      	b.n	8003474 <UART_SetConfig+0x348>
 800346a:	2310      	movs	r3, #16
 800346c:	77fb      	strb	r3, [r7, #31]
 800346e:	e001      	b.n	8003474 <UART_SetConfig+0x348>
 8003470:	2310      	movs	r3, #16
 8003472:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800347c:	d15b      	bne.n	8003536 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800347e:	7ffb      	ldrb	r3, [r7, #31]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d828      	bhi.n	80034d6 <UART_SetConfig+0x3aa>
 8003484:	a201      	add	r2, pc, #4	@ (adr r2, 800348c <UART_SetConfig+0x360>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	080034b1 	.word	0x080034b1
 8003490:	080034b9 	.word	0x080034b9
 8003494:	080034c1 	.word	0x080034c1
 8003498:	080034d7 	.word	0x080034d7
 800349c:	080034c7 	.word	0x080034c7
 80034a0:	080034d7 	.word	0x080034d7
 80034a4:	080034d7 	.word	0x080034d7
 80034a8:	080034d7 	.word	0x080034d7
 80034ac:	080034cf 	.word	0x080034cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b0:	f7fe fdbe 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 80034b4:	61b8      	str	r0, [r7, #24]
        break;
 80034b6:	e013      	b.n	80034e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b8:	f7fe fdce 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 80034bc:	61b8      	str	r0, [r7, #24]
        break;
 80034be:	e00f      	b.n	80034e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c0:	4b4b      	ldr	r3, [pc, #300]	@ (80035f0 <UART_SetConfig+0x4c4>)
 80034c2:	61bb      	str	r3, [r7, #24]
        break;
 80034c4:	e00c      	b.n	80034e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c6:	f7fe fce1 	bl	8001e8c <HAL_RCC_GetSysClockFreq>
 80034ca:	61b8      	str	r0, [r7, #24]
        break;
 80034cc:	e008      	b.n	80034e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034d2:	61bb      	str	r3, [r7, #24]
        break;
 80034d4:	e004      	b.n	80034e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	77bb      	strb	r3, [r7, #30]
        break;
 80034de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d074      	beq.n	80035d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	005a      	lsls	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	441a      	add	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b0f      	cmp	r3, #15
 8003500:	d916      	bls.n	8003530 <UART_SetConfig+0x404>
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003508:	d212      	bcs.n	8003530 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	b29b      	uxth	r3, r3
 800350e:	f023 030f 	bic.w	r3, r3, #15
 8003512:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	b29b      	uxth	r3, r3
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	b29a      	uxth	r2, r3
 8003520:	89fb      	ldrh	r3, [r7, #14]
 8003522:	4313      	orrs	r3, r2
 8003524:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	89fa      	ldrh	r2, [r7, #14]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	e04f      	b.n	80035d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	77bb      	strb	r3, [r7, #30]
 8003534:	e04c      	b.n	80035d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003536:	7ffb      	ldrb	r3, [r7, #31]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d828      	bhi.n	800358e <UART_SetConfig+0x462>
 800353c:	a201      	add	r2, pc, #4	@ (adr r2, 8003544 <UART_SetConfig+0x418>)
 800353e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003542:	bf00      	nop
 8003544:	08003569 	.word	0x08003569
 8003548:	08003571 	.word	0x08003571
 800354c:	08003579 	.word	0x08003579
 8003550:	0800358f 	.word	0x0800358f
 8003554:	0800357f 	.word	0x0800357f
 8003558:	0800358f 	.word	0x0800358f
 800355c:	0800358f 	.word	0x0800358f
 8003560:	0800358f 	.word	0x0800358f
 8003564:	08003587 	.word	0x08003587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003568:	f7fe fd62 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 800356c:	61b8      	str	r0, [r7, #24]
        break;
 800356e:	e013      	b.n	8003598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003570:	f7fe fd72 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 8003574:	61b8      	str	r0, [r7, #24]
        break;
 8003576:	e00f      	b.n	8003598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003578:	4b1d      	ldr	r3, [pc, #116]	@ (80035f0 <UART_SetConfig+0x4c4>)
 800357a:	61bb      	str	r3, [r7, #24]
        break;
 800357c:	e00c      	b.n	8003598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357e:	f7fe fc85 	bl	8001e8c <HAL_RCC_GetSysClockFreq>
 8003582:	61b8      	str	r0, [r7, #24]
        break;
 8003584:	e008      	b.n	8003598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800358a:	61bb      	str	r3, [r7, #24]
        break;
 800358c:	e004      	b.n	8003598 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	77bb      	strb	r3, [r7, #30]
        break;
 8003596:	bf00      	nop
    }

    if (pclk != 0U)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d018      	beq.n	80035d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	085a      	lsrs	r2, r3, #1
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	441a      	add	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b0f      	cmp	r3, #15
 80035b6:	d909      	bls.n	80035cc <UART_SetConfig+0x4a0>
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035be:	d205      	bcs.n	80035cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	e001      	b.n	80035d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80035dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40007c00 	.word	0x40007c00
 80035ec:	40023800 	.word	0x40023800
 80035f0:	00f42400 	.word	0x00f42400

080035f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01a      	beq.n	800370a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036f2:	d10a      	bne.n	800370a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	605a      	str	r2, [r3, #4]
  }
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b098      	sub	sp, #96	@ 0x60
 800373c:	af02      	add	r7, sp, #8
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003748:	f7fd fbe2 	bl	8000f10 <HAL_GetTick>
 800374c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b08      	cmp	r3, #8
 800375a:	d12e      	bne.n	80037ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800375c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003764:	2200      	movs	r2, #0
 8003766:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f88c 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d021      	beq.n	80037ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800378a:	653b      	str	r3, [r7, #80]	@ 0x50
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003794:	647b      	str	r3, [r7, #68]	@ 0x44
 8003796:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800379a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e6      	bne.n	8003776 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e062      	b.n	8003880 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d149      	bne.n	800385c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d0:	2200      	movs	r2, #0
 80037d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f856 	bl	8003888 <UART_WaitOnFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d03c      	beq.n	800385c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	623b      	str	r3, [r7, #32]
   return(result);
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003800:	633b      	str	r3, [r7, #48]	@ 0x30
 8003802:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800380e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e6      	bne.n	80037e2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3308      	adds	r3, #8
 800381a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	60fb      	str	r3, [r7, #12]
   return(result);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3308      	adds	r3, #8
 8003832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003834:	61fa      	str	r2, [r7, #28]
 8003836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	69b9      	ldr	r1, [r7, #24]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	617b      	str	r3, [r7, #20]
   return(result);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e5      	bne.n	8003814 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e011      	b.n	8003880 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3758      	adds	r7, #88	@ 0x58
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003898:	e04f      	b.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038a0:	d04b      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a2:	f7fd fb35 	bl	8000f10 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e04e      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d037      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b80      	cmp	r3, #128	@ 0x80
 80038ce:	d034      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b40      	cmp	r3, #64	@ 0x40
 80038d4:	d031      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d110      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2208      	movs	r2, #8
 80038ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f8ff 	bl	8003af0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2208      	movs	r2, #8
 80038f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e029      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003914:	d111      	bne.n	800393a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800391e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f8e5 	bl	8003af0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e00f      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4013      	ands	r3, r2
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	429a      	cmp	r2, r3
 8003956:	d0a0      	beq.n	800389a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003964:	b480      	push	{r7}
 8003966:	b097      	sub	sp, #92	@ 0x5c
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	88fa      	ldrh	r2, [r7, #6]
 800397c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003996:	d10e      	bne.n	80039b6 <UART_Start_Receive_IT+0x52>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <UART_Start_Receive_IT+0x48>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80039a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039aa:	e02d      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	22ff      	movs	r2, #255	@ 0xff
 80039b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039b4:	e028      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <UART_Start_Receive_IT+0x76>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <UART_Start_Receive_IT+0x6c>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	22ff      	movs	r2, #255	@ 0xff
 80039ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039ce:	e01b      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	227f      	movs	r2, #127	@ 0x7f
 80039d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039d8:	e016      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039e2:	d10d      	bne.n	8003a00 <UART_Start_Receive_IT+0x9c>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <UART_Start_Receive_IT+0x92>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	227f      	movs	r2, #127	@ 0x7f
 80039f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039f4:	e008      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	223f      	movs	r2, #63	@ 0x3f
 80039fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039fe:	e003      	b.n	8003a08 <UART_Start_Receive_IT+0xa4>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2222      	movs	r2, #34	@ 0x22
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3308      	adds	r3, #8
 8003a36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a38:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003a3a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003a3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e5      	bne.n	8003a18 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a54:	d107      	bne.n	8003a66 <UART_Start_Receive_IT+0x102>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4a21      	ldr	r2, [pc, #132]	@ (8003ae8 <UART_Start_Receive_IT+0x184>)
 8003a62:	669a      	str	r2, [r3, #104]	@ 0x68
 8003a64:	e002      	b.n	8003a6c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4a20      	ldr	r2, [pc, #128]	@ (8003aec <UART_Start_Receive_IT+0x188>)
 8003a6a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d019      	beq.n	8003aa8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a94:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e6      	bne.n	8003a74 <UART_Start_Receive_IT+0x110>
 8003aa6:	e018      	b.n	8003ada <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f043 0320 	orr.w	r3, r3, #32
 8003abc:	653b      	str	r3, [r7, #80]	@ 0x50
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ac6:	623b      	str	r3, [r7, #32]
 8003ac8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	69f9      	ldr	r1, [r7, #28]
 8003acc:	6a3a      	ldr	r2, [r7, #32]
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e6      	bne.n	8003aa8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	375c      	adds	r7, #92	@ 0x5c
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	08003de1 	.word	0x08003de1
 8003aec:	08003c39 	.word	0x08003c39

08003af0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b095      	sub	sp, #84	@ 0x54
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b16:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e6      	bne.n	8003af8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3308      	adds	r3, #8
 8003b48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e5      	bne.n	8003b2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d118      	bne.n	8003b98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f023 0310 	bic.w	r3, r3, #16
 8003b7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6979      	ldr	r1, [r7, #20]
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	613b      	str	r3, [r7, #16]
   return(result);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e6      	bne.n	8003b66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003bac:	bf00      	nop
 8003bae:	3754      	adds	r7, #84	@ 0x54
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff fa88 	bl	80030ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6979      	ldr	r1, [r7, #20]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	613b      	str	r3, [r7, #16]
   return(result);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e6      	bne.n	8003bec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff fa54 	bl	80030d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c30:	bf00      	nop
 8003c32:	3720      	adds	r7, #32
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b09c      	sub	sp, #112	@ 0x70
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c50:	2b22      	cmp	r3, #34	@ 0x22
 8003c52:	f040 80b9 	bne.w	8003dc8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003c64:	b2d9      	uxtb	r1, r3
 8003c66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c70:	400a      	ands	r2, r1
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f040 809c 	bne.w	8003dd8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e6      	bne.n	8003ca0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003cf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003cf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e5      	bne.n	8003cd2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d018      	beq.n	8003d5a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	623b      	str	r3, [r7, #32]
   return(result);
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d46:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e6      	bne.n	8003d28 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d12e      	bne.n	8003dc0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f023 0310 	bic.w	r3, r3, #16
 8003d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	69b9      	ldr	r1, [r7, #24]
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	617b      	str	r3, [r7, #20]
   return(result);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e6      	bne.n	8003d68 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d103      	bne.n	8003db0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2210      	movs	r2, #16
 8003dae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003db6:	4619      	mov	r1, r3
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff f9a1 	bl	8003100 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dbe:	e00b      	b.n	8003dd8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7fc fc7d 	bl	80006c0 <HAL_UART_RxCpltCallback>
}
 8003dc6:	e007      	b.n	8003dd8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0208 	orr.w	r2, r2, #8
 8003dd6:	619a      	str	r2, [r3, #24]
}
 8003dd8:	bf00      	nop
 8003dda:	3770      	adds	r7, #112	@ 0x70
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b09c      	sub	sp, #112	@ 0x70
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003dee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003df8:	2b22      	cmp	r3, #34	@ 0x22
 8003dfa:	f040 80b9 	bne.w	8003f70 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e0e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003e12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003e16:	4013      	ands	r3, r2
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e22:	1c9a      	adds	r2, r3, #2
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f040 809c 	bne.w	8003f80 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003e56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e66:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e68:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003e6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e6      	bne.n	8003e48 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3308      	adds	r3, #8
 8003e98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ea0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e5      	bne.n	8003e7a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d018      	beq.n	8003f02 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ef0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e6      	bne.n	8003ed0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d12e      	bne.n	8003f68 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f023 0310 	bic.w	r3, r3, #16
 8003f24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	6979      	ldr	r1, [r7, #20]
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1e6      	bne.n	8003f10 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b10      	cmp	r3, #16
 8003f4e:	d103      	bne.n	8003f58 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2210      	movs	r2, #16
 8003f56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f5e:	4619      	mov	r1, r3
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff f8cd 	bl	8003100 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f66:	e00b      	b.n	8003f80 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7fc fba9 	bl	80006c0 <HAL_UART_RxCpltCallback>
}
 8003f6e:	e007      	b.n	8003f80 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0208 	orr.w	r2, r2, #8
 8003f7e:	619a      	str	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	3770      	adds	r7, #112	@ 0x70
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <memset>:
 8003f88:	4402      	add	r2, r0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d100      	bne.n	8003f92 <memset+0xa>
 8003f90:	4770      	bx	lr
 8003f92:	f803 1b01 	strb.w	r1, [r3], #1
 8003f96:	e7f9      	b.n	8003f8c <memset+0x4>

08003f98 <__libc_init_array>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8003fd0 <__libc_init_array+0x38>)
 8003f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8003fd4 <__libc_init_array+0x3c>)
 8003f9e:	1b64      	subs	r4, r4, r5
 8003fa0:	10a4      	asrs	r4, r4, #2
 8003fa2:	2600      	movs	r6, #0
 8003fa4:	42a6      	cmp	r6, r4
 8003fa6:	d109      	bne.n	8003fbc <__libc_init_array+0x24>
 8003fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8003fd8 <__libc_init_array+0x40>)
 8003faa:	4c0c      	ldr	r4, [pc, #48]	@ (8003fdc <__libc_init_array+0x44>)
 8003fac:	f000 f818 	bl	8003fe0 <_init>
 8003fb0:	1b64      	subs	r4, r4, r5
 8003fb2:	10a4      	asrs	r4, r4, #2
 8003fb4:	2600      	movs	r6, #0
 8003fb6:	42a6      	cmp	r6, r4
 8003fb8:	d105      	bne.n	8003fc6 <__libc_init_array+0x2e>
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
 8003fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc0:	4798      	blx	r3
 8003fc2:	3601      	adds	r6, #1
 8003fc4:	e7ee      	b.n	8003fa4 <__libc_init_array+0xc>
 8003fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fca:	4798      	blx	r3
 8003fcc:	3601      	adds	r6, #1
 8003fce:	e7f2      	b.n	8003fb6 <__libc_init_array+0x1e>
 8003fd0:	08004038 	.word	0x08004038
 8003fd4:	08004038 	.word	0x08004038
 8003fd8:	08004038 	.word	0x08004038
 8003fdc:	0800403c 	.word	0x0800403c

08003fe0 <_init>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr

08003fec <_fini>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	bf00      	nop
 8003ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff2:	bc08      	pop	{r3}
 8003ff4:	469e      	mov	lr, r3
 8003ff6:	4770      	bx	lr
